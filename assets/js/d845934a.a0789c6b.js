"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4507],{5705:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>t,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"computacion-3/semana-5/jest-express-ts","title":"Jest en Express con Typescript","description":"Jest es un framework de pruebas para JavaScript que permite realizar pruebas unitarias, de integraci\xf3n y de E2E. En este caso, veremos c\xf3mo configurar Jest para trabajar con una aplicaci\xf3n Express escrita en TypeScript.","source":"@site/docs/computacion-3/semana-5/jest-express-ts.md","sourceDirName":"computacion-3/semana-5","slug":"/computacion-3/semana-5/jest-express-ts","permalink":"/docs/computacion-3/semana-5/jest-express-ts","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-3/semana-5/jest-express-ts.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"S5 - Jest y pruebas unitarias","permalink":"/docs/category/s5---jest-y-pruebas-unitarias"},"next":{"title":"Despliegue de Express con MongoDB usando Railway","permalink":"/docs/computacion-3/semana-5/deploy-express"}}');var a=n(4848),o=n(8453);const c={sidebar_position:1},t="Jest en Express con Typescript",i={},l=[{value:"1. Instalaci\xf3n de dependencias",id:"1-instalaci\xf3n-de-dependencias",level:2},{value:"2. Creaci\xf3n del archivo de configuraci\xf3n Jest",id:"2-creaci\xf3n-del-archivo-de-configuraci\xf3n-jest",level:2},{value:"2.1 Configuraci\xf3n interactiva de Jest",id:"21-configuraci\xf3n-interactiva-de-jest",level:3},{value:"2.2 Archivo de configuraci\xf3n generado",id:"22-archivo-de-configuraci\xf3n-generado",level:3},{value:"3. Estructura de carpetas",id:"3-estructura-de-carpetas",level:2},{value:"4. Creaci\xf3n de una primera prueba",id:"4-creaci\xf3n-de-una-primera-prueba",level:2},{value:"5. Pruebas y cobertura",id:"5-pruebas-y-cobertura",level:2},{value:"5.1 Pruebas a nivel de servicio",id:"51-pruebas-a-nivel-de-servicio",level:3},{value:"5.2 Pruebas de servicios de usuario",id:"52-pruebas-de-servicios-de-usuario",level:3},{value:"5.2.1 Creaci\xf3n del archivo de pruebas",id:"521-creaci\xf3n-del-archivo-de-pruebas",level:4},{value:"5.2.2 Configuraci\xf3n de imports y mocks",id:"522-configuraci\xf3n-de-imports-y-mocks",level:4},{value:"5.2.3 Configuraci\xf3n de mocks para dependencias externas",id:"523-configuraci\xf3n-de-mocks-para-dependencias-externas",level:4},{value:"5.2.4 Estructura b\xe1sica del suite de pruebas",id:"524-estructura-b\xe1sica-del-suite-de-pruebas",level:4},{value:"5.2.5 Primera prueba: Crear usuario exitosamente",id:"525-primera-prueba-crear-usuario-exitosamente",level:4},{value:"\xbfQu\xe9 es <code>jest.spyOn()</code>?",id:"qu\xe9-es-jestspyon",level:3},{value:"Definici\xf3n y prop\xf3sito",id:"definici\xf3n-y-prop\xf3sito",level:4},{value:"Sintaxis b\xe1sica",id:"sintaxis-b\xe1sica",level:4},{value:"\xbfCu\xe1ndo usar <code>spyOn</code> vs <code>mock</code>?",id:"cu\xe1ndo-usar-spyon-vs-mock",level:4},{value:"Ejemplo comparativo",id:"ejemplo-comparativo",level:4},{value:"M\xe9todos \xfatiles de spyOn",id:"m\xe9todos-\xfatiles-de-spyon",level:4},{value:"Ventajas de spyOn",id:"ventajas-de-spyon",level:4},{value:"Ejemplo pr\xe1ctico en nuestro contexto",id:"ejemplo-pr\xe1ctico-en-nuestro-contexto",level:4},{value:"5.2.6 Segunda prueba: Error cuando el usuario ya existe",id:"526-segunda-prueba-error-cuando-el-usuario-ya-existe",level:4},{value:"5.2.7 Archivo completo",id:"527-archivo-completo",level:4},{value:"5.3 Pruebas de controlador de usuario",id:"53-pruebas-de-controlador-de-usuario",level:3},{value:"5.3.1 Creaci\xf3n del archivo de pruebas",id:"531-creaci\xf3n-del-archivo-de-pruebas",level:4},{value:"5.3.2 Configuraci\xf3n de imports y mocks",id:"532-configuraci\xf3n-de-imports-y-mocks",level:4},{value:"5.3.3 Mock del servicio de usuario",id:"533-mock-del-servicio-de-usuario",level:4},{value:"5.3.4 Configuraci\xf3n de objetos Request y Response simulados",id:"534-configuraci\xf3n-de-objetos-request-y-response-simulados",level:4},{value:"5.3.5 Primera prueba: Crear usuario exitoso",id:"535-primera-prueba-crear-usuario-exitoso",level:4},{value:"5.3.6 Segunda prueba: Manejo de errores",id:"536-segunda-prueba-manejo-de-errores",level:4},{value:"5.3.7 Prueba de obtener todos los usuarios",id:"537-prueba-de-obtener-todos-los-usuarios",level:4},{value:"5.3.8 Prueba de obtener usuario por ID",id:"538-prueba-de-obtener-usuario-por-id",level:4},{value:"5.3.9 Pruebas de actualizaci\xf3n y eliminaci\xf3n",id:"539-pruebas-de-actualizaci\xf3n-y-eliminaci\xf3n",level:4},{value:"5.3.10 Archivo completo del controlador",id:"5310-archivo-completo-del-controlador",level:4},{value:"6. Resultados de cobertura despu\xe9s de implementar las pruebas",id:"6-resultados-de-cobertura-despu\xe9s-de-implementar-las-pruebas",level:2},{value:"6.1 An\xe1lisis de los resultados",id:"61-an\xe1lisis-de-los-resultados",level:3},{value:"\u2705 <strong>Logros destacados:</strong>",id:"-logros-destacados",level:4},{value:"\ud83d\udcca <strong>M\xe9tricas importantes:</strong>",id:"-m\xe9tricas-importantes",level:4},{value:"\ud83c\udfaf <strong>\xc1reas de mejora identificadas:</strong>",id:"-\xe1reas-de-mejora-identificadas",level:4},{value:"6.2 Pr\xf3ximos pasos recomendados",id:"62-pr\xf3ximos-pasos-recomendados",level:3},{value:"6.3 Configuraci\xf3n de umbral de cobertura",id:"63-configuraci\xf3n-de-umbral-de-cobertura",level:3},{value:"6.4 Comparaci\xf3n de resultados",id:"64-comparaci\xf3n-de-resultados",level:3}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"jest-en-express-con-typescript",children:"Jest en Express con Typescript"})}),"\n",(0,a.jsx)(s.p,{children:"Jest es un framework de pruebas para JavaScript que permite realizar pruebas unitarias, de integraci\xf3n y de E2E. En este caso, veremos c\xf3mo configurar Jest para trabajar con una aplicaci\xf3n Express escrita en TypeScript."}),"\n",(0,a.jsx)(s.h2,{id:"1-instalaci\xf3n-de-dependencias",children:"1. Instalaci\xf3n de dependencias"}),"\n",(0,a.jsx)(s.p,{children:"Para comenzar, necesitamos instalar las dependencias necesarias. Ejecuta el siguiente comando en tu terminal:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"npm install --save-dev jest @types/jest\n"})}),"\n",(0,a.jsx)(s.h2,{id:"2-creaci\xf3n-del-archivo-de-configuraci\xf3n-jest",children:"2. Creaci\xf3n del archivo de configuraci\xf3n Jest"}),"\n",(0,a.jsxs)(s.p,{children:["Con ayuda del comando ",(0,a.jsx)(s.code,{children:"npm init jest@latest"})," podemos crear un archivo de configuraci\xf3n ",(0,a.jsx)(s.code,{children:"jest.config.ts"}),". Este archivo nos permitir\xe1 personalizar la configuraci\xf3n de Jest para que funcione correctamente con TypeScript y Express."]}),"\n",(0,a.jsx)(s.h3,{id:"21-configuraci\xf3n-interactiva-de-jest",children:"2.1 Configuraci\xf3n interactiva de Jest"}),"\n",(0,a.jsxs)(s.p,{children:["Cuando ejecutes el comando ",(0,a.jsx)(s.code,{children:"npm init jest@latest"}),", aparecer\xe1n varias preguntas de configuraci\xf3n. A continuaci\xf3n te muestro las preguntas t\xedpicas y las respuestas recomendadas para un proyecto Express con TypeScript:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'> npm init jest@latest\n\nThe following questions will help Jest to create a suitable configuration for your project\n\n\u221a Would you like to use Jest when running "test" script in "package.json"? ... yes\n\u221a Would you like to use Typescript for the configuration file? ... yes\n\u221a Choose the test environment that will be used for testing \xbb node\n\u221a Do you want Jest to add coverage reports? ... yes\n\u221a Which provider should be used to instrument code for coverage? \xbb v8\n\u221a Automatically clear mock calls, instances, contexts and results before every test? ... yes\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Explicaci\xf3n de cada configuraci\xf3n:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:'Use Jest when running "test" script'}),": Al seleccionar ",(0,a.jsx)(s.code,{children:"yes"}),", Jest agregar\xe1 autom\xe1ticamente el script ",(0,a.jsx)(s.code,{children:'"test": "jest"'})," en tu ",(0,a.jsx)(s.code,{children:"package.json"}),", permitiendo ejecutar las pruebas con ",(0,a.jsx)(s.code,{children:"npm test"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Use Typescript for the configuration file"}),": Seleccionar ",(0,a.jsx)(s.code,{children:"yes"})," crear\xe1 un archivo ",(0,a.jsx)(s.code,{children:"jest.config.ts"})," en lugar de ",(0,a.jsx)(s.code,{children:"jest.config.js"}),", lo que permite utilizar TypeScript para la configuraci\xf3n y obtener mejor autocompletado y verificaci\xf3n de tipos."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Choose the test environment"}),": La opci\xf3n ",(0,a.jsx)(s.code,{children:"node"})," es ideal para aplicaciones backend como Express, ya que simula un entorno Node.js. La alternativa ",(0,a.jsx)(s.code,{children:"jsdom"})," se usa t\xedpicamente para aplicaciones frontend que requieren un entorno de navegador simulado."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Add coverage reports"}),": Al elegir ",(0,a.jsx)(s.code,{children:"yes"}),", Jest generar\xe1 autom\xe1ticamente reportes de cobertura de c\xf3digo que muestran qu\xe9 porcentaje de tu c\xf3digo est\xe1 siendo probado por las pruebas."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Coverage provider"}),": ",(0,a.jsx)(s.code,{children:"v8"})," es el proveedor de cobertura m\xe1s moderno y eficiente, utilizando el motor V8 de Node.js para medir la cobertura. La alternativa ",(0,a.jsx)(s.code,{children:"babel"})," es m\xe1s antigua pero compatible con configuraciones m\xe1s complejas."]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Automatically clear mock calls"}),": Seleccionar ",(0,a.jsx)(s.code,{children:"yes"})," garantiza que los mocks se limpien autom\xe1ticamente entre pruebas, evitando interferencias y resultados impredecibles."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"22-archivo-de-configuraci\xf3n-generado",children:"2.2 Archivo de configuraci\xf3n generado"}),"\n",(0,a.jsx)(s.p,{children:"El archivo es un poco largo as\xed como el Tsconfig, pero aqu\xed tienes un ejemplo b\xe1sico:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'/**\n * For a detailed explanation regarding each configuration property, visit:\n * https://jestjs.io/docs/configuration\n */\n\nimport type {Config} from \'jest\';\n\nconst config: Config = {\n  clearMocks: true,\n  collectCoverage: true,\n  coverageDirectory: "coverage",\n  coverageProvider: "v8",\n};\n\nexport default config;\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Al configurar autom\xe1ticamente Jest por medio del script, tambi\xe9n nos agregar\xe1 un nuevo script en el ",(0,a.jsx)(s.code,{children:"package.json"})," para ejecutar las pruebas:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'"scripts": {\n  "test": "jest"\n}\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Debido a que estamos trabajando con Typescript, es necesario instalar ",(0,a.jsx)(s.code,{children:"ts-jest"})," para que Jest pueda entender el c\xf3digo TypeScript. Ejecuta el siguiente comando:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"npm install --save-dev ts-jest\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Finalmente modificamos el archivo ",(0,a.jsx)(s.code,{children:"jest.config.ts"})," para que use ",(0,a.jsx)(s.code,{children:"ts-jest"})," como preprocesador:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import type { Config } from \'jest\';\n\nconst config: Config = {\n    clearMocks: true,\n    collectCoverage: true,\n    coverageDirectory: "coverage",\n    coverageProvider: "v8",\n    preset: "ts-jest",\n    testEnvironment: "node",\n    roots: ["./src/tests"],\n    transform: {\n        "^.+\\\\.ts?$": "ts-jest"\n    },\n    testRegex: "(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.ts$",\n    moduleFileExtensions: ["ts", "js", "json", "node"],\n};\n\nexport default config;\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Aqu\xed explicar\xe9 brevemente cada una de las configuraciones que encontraremos en nuestro archivo ",(0,a.jsx)(s.code,{children:"jest.config.ts"}),":"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"clearMocks"}),": Limpia los mocks despu\xe9s de cada prueba."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"collectCoverage"}),": Habilita la recolecci\xf3n de cobertura de c\xf3digo."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"coverageDirectory"}),": Especifica el directorio donde se guardar\xe1n los informes de cobertura."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"coverageProvider"}),": Define el proveedor de cobertura, en este caso ",(0,a.jsx)(s.code,{children:"v8"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"preset"}),": Configura Jest para usar ",(0,a.jsx)(s.code,{children:"ts-jest"})," como preprocesador de TypeScript."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"testEnvironment"}),": Define el entorno de prueba, en este caso ",(0,a.jsx)(s.code,{children:"node"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"roots"}),": Especifica la ra\xedz de los archivos de prueba."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"transform"}),": Configura Jest para transformar archivos TypeScript usando ",(0,a.jsx)(s.code,{children:"ts-jest"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"testRegex"}),": Define la expresi\xf3n regular para encontrar archivos de prueba."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"moduleFileExtensions"}),": Especifica las extensiones de archivo que Jest reconocer\xe1."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"3-estructura-de-carpetas",children:"3. Estructura de carpetas"}),"\n",(0,a.jsxs)(s.p,{children:["Para organizar nuestro proyecto, crearemos una estructura de carpetas que separe las pruebas del c\xf3digo fuente. Una estructura com\xfan es tener una carpeta ",(0,a.jsx)(s.code,{children:"src"})," para el c\xf3digo fuente y una carpeta ",(0,a.jsx)(s.code,{children:"tests"})," para las pruebas. Aqu\xed agrego un ejemplo de como podr\xeda verse la estructura de carpetas:"]}),"\n",(0,a.jsx)("img",{src:"/img/jest-1.png",alt:"Estructura de carpetas",width:"500"}),"\n",(0,a.jsx)(s.h2,{id:"4-creaci\xf3n-de-una-primera-prueba",children:"4. Creaci\xf3n de una primera prueba"}),"\n",(0,a.jsxs)(s.p,{children:["Para realizar un ejemplo de sencillo de c\xf3mo podemos probar nuestro c\xf3digo, crearemos un archivo de prueba en una carpeta ",(0,a.jsx)(s.code,{children:"utils"})," dentro de ",(0,a.jsx)(s.code,{children:"src"}),". Agregaremos un nuevo archivo llamado ",(0,a.jsx)(s.code,{children:"index.ts"})," y otro archivo llamado ",(0,a.jsx)(s.code,{children:"operations.util.ts"})," con el siguiente c\xf3digo:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:"export function add(a: number, b: number): number {\n    return a + b;\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Y en el archivo ",(0,a.jsx)(s.code,{children:"index.ts"})," agregamos lo siguiente:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:"export * from './operations.util';\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Ahora, dentro de la carpeta ",(0,a.jsx)(s.code,{children:"tests"})," creamos una carpeta ",(0,a.jsx)(s.code,{children:"utils"})," y dentro de esta creamos un archivo llamado ",(0,a.jsx)(s.code,{children:"operations.util.test.ts"})," con el siguiente contenido:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import { add } from "../../utils";\n\nit("should add two numbers", () => {\n    expect(add(2, 3)).toBe(5);\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:"Para ejecutar nuestras pruebas, simplemente ejecutamos el siguiente comando en la terminal:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,a.jsx)(s.p,{children:"Y deber\xedas de ver algo como esto:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"> compunet3-20252@1.0.0 test\n> jest\n\n PASS  src/tests/utils/operation.util.test.ts\n  \u221a should add two numbers (3 ms)\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |     100 |      100 |     100 |     100 |                   \n index.ts           |     100 |      100 |     100 |     100 |                   \n operations.util.ts |     100 |      100 |     100 |     100 |                   \n--------------------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.277 s\nRan all test suites\n"})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Nota"}),": Has este punto, es posible que tu proyecto no compile o aparezcan advertencias en tu editor de c\xf3digo respecto a las funciones it y expect. Esto se debe a que Jest no est\xe1 configurado para reconocer estos tipos de funciones globales. Para solucionarlo, puedes agregar en el archivo ",(0,a.jsx)(s.code,{children:"tsconfig.json"})," la siguiente configuraci\xf3n:"]}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "types": ["jest"]\n  }\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"5-pruebas-y-cobertura",children:"5. Pruebas y cobertura"}),"\n",(0,a.jsx)(s.p,{children:"Hasta este punto, puedes estar algo confundido, y es que por qu\xe9 Jest menciona que tengo una cobertura del 100% si solo tengo una prueba. Esto se debe a que Jest est\xe1 midiendo la cobertura de c\xf3digo, es decir, est\xe1 verificando qu\xe9 partes del c\xf3digo han sido ejecutadas durante las pruebas."}),"\n",(0,a.jsxs)(s.p,{children:["No obstante, quiz\xe1 deseas comprobar la cobertura de tu c\xf3digo de una manera m\xe1s detallada y ver qu\xe9 l\xedneas de c\xf3digo est\xe1n cubiertas por las pruebas. Para ello, puedes modificar el archivo ",(0,a.jsx)(s.code,{children:"jest.config.ts"})," para incluir la opci\xf3n ",(0,a.jsx)(s.code,{children:"collectCoverageFrom"})," y especificar qu\xe9 archivos deseas incluir en la recolecci\xf3n de cobertura. Aqu\xed tienes un ejemplo de c\xf3mo podr\xedas configurarlo:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'const config: Config = {\n    clearMocks: true,\n    collectCoverage: true,\n    coverageDirectory: "coverage",\n    coverageProvider: "v8",\n    preset: "ts-jest",\n    testEnvironment: "node",\n    roots: ["./src"],\n    transform: {\n        "^.+\\\\.ts?$": "ts-jest"\n    },\n    testRegex: "(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.ts$",\n    moduleFileExtensions: ["ts", "js", "json", "node"],\n    collectCoverageFrom: [\n        "src/**/*.ts", // Incluye todos los archivos TypeScript en src/\n        "!src/**/*.d.ts", // Excluye archivos de declaraci\xf3n\n        "!src/index.ts", // Excluye el archivo de entrada principal\n        "!src/interfaces/**/*.ts", // Excluye interfaces\n        "!src/config/**/*.ts", // Excluye archivos de configuraci\xf3n\n        "!src/models/**/*.ts", // Excluye models\n        "!src/routes/**/*.ts", // Excluye routes\n        "!src/**/index.ts", // Excluye archivos index de exportaci\xf3n\n        "!src/validators/**/*.ts", // Excluye schemas de validaci\xf3n\n    ],\n};\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Ahora, nuevamente ejecuta tus pruebas con el comando ",(0,a.jsx)(s.code,{children:"npm test"}),". Deber\xedas ver un informe de cobertura m\xe1s detallado, indicando qu\xe9 l\xedneas de c\xf3digo han sido cubiertas por las pruebas y cu\xe1les no."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"> compunet3-20252@1.0.0 test\n> jest\n\n PASS  src/tests/utils/operation.util.test.ts                                                                                           \n  \u221a should add two numbers (3 ms)\n                                                                                                                                        \n------------------------------|---------|----------|---------|---------|-------------------\nFile                          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                              \n------------------------------|---------|----------|---------|---------|-------------------\nAll files                     |    0.62 |     8.33 |    8.33 |    0.62 |                  \n controllers                  |       0 |        0 |       0 |       0 |                  \n  auth.controller.ts          |       0 |        0 |       0 |       0 | 1-24             \n  games.controller.ts         |       0 |        0 |       0 |       0 | 1-92             \n  user.controller.ts          |       0 |        0 |       0 |       0 | 1-72             \n middlewares                  |       0 |        0 |       0 |       0 |                  \n  auth.middleware.ts          |       0 |        0 |       0 |       0 | 1-20             \n  error.handler.ts            |       0 |        0 |       0 |       0 | 1-50             \n  handle.validations.error.ts |       0 |        0 |       0 |       0 | 1-17             \n  logger.middleware.ts        |       0 |        0 |       0 |       0 | 1-31             \n  preAuthorize.middleware.ts  |       0 |        0 |       0 |       0 | 1-18             \n services                     |       0 |        0 |       0 |       0 |                  \n  auth.service.ts             |       0 |        0 |       0 |       0 | 1-38             \n  games.service.ts            |       0 |        0 |       0 |       0 | 1-56             \n  user.service.ts             |       0 |        0 |       0 |       0 | 1-58             \n utils                        |     100 |      100 |     100 |     100 |                  \n  operations.util.ts          |     100 |      100 |     100 |     100 |                  \n------------------------------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.776 s, estimated 1 s\nRan all test suites.\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Esto tambi\xe9n nos crear\xe1 un reporte en formato HTML, por lo que te recomiendo agregar el directorio en el archivo ",(0,a.jsx)(s.code,{children:".gitignore"})," para evitar subirlo al repositorio."]}),"\n",(0,a.jsx)(s.h3,{id:"51-pruebas-a-nivel-de-servicio",children:"5.1 Pruebas a nivel de servicio"}),"\n",(0,a.jsxs)(s.p,{children:["Para empezar a realizar pruebas de nuestro proyecto usando Jest, te recomiendo revisar su documentaci\xf3n donde podr\xe1s encontrar los elementos principales para crear tus pruebas:\n",(0,a.jsx)(s.a,{href:"https://jestjs.io",children:"Documentaci\xf3n de Jest"})]}),"\n",(0,a.jsx)(s.p,{children:"No obstante, a continuaci\xf3n realizar\xe9 la implementaci\xf3n de las pruebas de servicio del proyecto realizado en este curso, por lo que podr\xedas usarlo de referencia para realizar tus propias pruebas."}),"\n",(0,a.jsx)(s.h3,{id:"52-pruebas-de-servicios-de-usuario",children:"5.2 Pruebas de servicios de usuario"}),"\n",(0,a.jsx)(s.p,{children:"Para realizar pruebas de los servicios de usuario, vamos a crear paso a paso un archivo de pruebas completo."}),"\n",(0,a.jsx)(s.h4,{id:"521-creaci\xf3n-del-archivo-de-pruebas",children:"5.2.1 Creaci\xf3n del archivo de pruebas"}),"\n",(0,a.jsxs)(s.p,{children:["Primero, crea un archivo llamado ",(0,a.jsx)(s.code,{children:"user.service.test.ts"})," dentro de la carpeta ",(0,a.jsx)(s.code,{children:"tests/services"}),"."]}),"\n",(0,a.jsx)(s.h4,{id:"522-configuraci\xf3n-de-imports-y-mocks",children:"5.2.2 Configuraci\xf3n de imports y mocks"}),"\n",(0,a.jsx)(s.p,{children:"Comenzamos importando las dependencias necesarias y configurando los mocks:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import { userService } from "../../services";\nimport { UserModel, UserDocument, UserRole } from "../../models";\nimport bcrypt from "bcrypt";\nimport { UserInput } from "../../interfaces";\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"\xbfQu\xe9 son los mocks?"})," Los mocks son simulaciones de funciones o m\xf3dulos que nos permiten controlar su comportamiento durante las pruebas, sin ejecutar el c\xf3digo real."]}),"\n",(0,a.jsx)(s.h4,{id:"523-configuraci\xf3n-de-mocks-para-dependencias-externas",children:"5.2.3 Configuraci\xf3n de mocks para dependencias externas"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'// Mock de bcrypt para simular el hash de contrase\xf1as\njest.mock("bcrypt", () => ({\n    hash: jest.fn(),\n}));\n\n// Mock del modelo de usuario para simular operaciones de base de datos\njest.mock("../../models", () => ({\n    UserRole: {\n        ADMIN: "admin",\n        USER: "user",\n    },\n    UserModel: {\n        create: jest.fn()\n    },\n}));\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"\xbfPor qu\xe9 hacer mocks?"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"bcrypt"}),": Evitamos ejecutar el hash real que es lento"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"UserModel"}),": Evitamos conectar a la base de datos real durante las pruebas"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"524-estructura-b\xe1sica-del-suite-de-pruebas",children:"5.2.4 Estructura b\xe1sica del suite de pruebas"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("UserService", () => {\n    beforeEach(() => {\n        jest.clearAllMocks(); // Limpia los mocks antes de cada prueba\n    });\n\n    // Aqu\xed ir\xe1n nuestras pruebas espec\xedficas\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Explicaci\xf3n:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"describe"}),": Agrupa pruebas relacionadas con el UserService"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"beforeEach"}),": Se ejecuta antes de cada prueba individual para limpiar el estado"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"525-primera-prueba-crear-usuario-exitosamente",children:"5.2.5 Primera prueba: Crear usuario exitosamente"}),"\n",(0,a.jsxs)(s.p,{children:["Ahora agregamos nuestra primera prueba dentro del bloque ",(0,a.jsx)(s.code,{children:"describe"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("create", () => {\n    it("should create a new user", async () => {\n        // 1. Preparar datos de prueba\n        const mockUserInput: UserInput = {\n            name: "John Doe",\n            email: "john.doe@example.com",\n            password: "password123",\n        };\n\n        const mockHashedPassword = "hashedPassword123";\n        const mockCreatedUser: Partial<UserDocument> = {\n            ...mockUserInput,\n            _id: "12345",\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            roles: [UserRole.USER],\n        };\n\n        // 2. Configurar mocks\n        jest.spyOn(userService, "findByEmail").mockResolvedValue(null);\n        (bcrypt.hash as jest.Mock).mockResolvedValue(mockHashedPassword);\n        (UserModel.create as jest.Mock).mockResolvedValue(mockCreatedUser);\n\n        // 3. Ejecutar la funci\xf3n a probar\n        const result = await userService.create(mockUserInput);\n\n        // 4. Verificar resultados\n        expect(bcrypt.hash).toHaveBeenCalledWith(mockUserInput.password, 10);\n        expect(UserModel.create).toHaveBeenCalledWith({\n            ...mockUserInput,\n            password: mockHashedPassword,\n        });\n        expect(result).toEqual(mockCreatedUser);\n    });\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Pasos de la prueba:"})}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Preparar"}),": Definimos los datos que usaremos"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Configurar"}),": Establecemos c\xf3mo se comportar\xe1n los mocks"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Ejecutar"}),": Llamamos al m\xe9todo que queremos probar"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Verificar"}),": Comprobamos que todo funcion\xf3 como esper\xe1bamos"]}),"\n"]}),"\n",(0,a.jsxs)(s.h3,{id:"qu\xe9-es-jestspyon",children:["\xbfQu\xe9 es ",(0,a.jsx)(s.code,{children:"jest.spyOn()"}),"?"]}),"\n",(0,a.jsxs)(s.p,{children:["En la prueba anterior usamos ",(0,a.jsx)(s.code,{children:'jest.spyOn(userService, "findByEmail")'}),". Es importante entender qu\xe9 hace esta funci\xf3n y cu\xe1ndo usarla."]}),"\n",(0,a.jsx)(s.h4,{id:"definici\xf3n-y-prop\xf3sito",children:"Definici\xf3n y prop\xf3sito"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"jest.spyOn()"}),' es una funci\xf3n que permite "espiar" (spy) y controlar el comportamiento de m\xe9todos existentes en objetos reales. A diferencia de ',(0,a.jsx)(s.code,{children:"jest.mock()"})," que reemplaza completamente un m\xf3dulo, ",(0,a.jsx)(s.code,{children:"spyOn"})," permite interceptar llamadas a m\xe9todos espec\xedficos sin afectar el resto del objeto."]}),"\n",(0,a.jsx)(s.h4,{id:"sintaxis-b\xe1sica",children:"Sintaxis b\xe1sica"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:"jest.spyOn(objeto, 'nombreDelM\xe9todo').mockImplementation(() => {\n    // Nueva implementaci\xf3n\n});\n\n// O m\xe1s com\xfan:\njest.spyOn(objeto, 'nombreDelM\xe9todo').mockResolvedValue(valorRetorno);\n"})}),"\n",(0,a.jsxs)(s.h4,{id:"cu\xe1ndo-usar-spyon-vs-mock",children:["\xbfCu\xe1ndo usar ",(0,a.jsx)(s.code,{children:"spyOn"})," vs ",(0,a.jsx)(s.code,{children:"mock"}),"?"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsxs)(s.strong,{children:["Usa ",(0,a.jsx)(s.code,{children:"jest.spyOn()"})," cuando:"]})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Quieres interceptar m\xe9todos espec\xedficos de un objeto existente"}),"\n",(0,a.jsx)(s.li,{children:"El objeto ya est\xe1 importado y disponible en tu prueba"}),"\n",(0,a.jsx)(s.li,{children:"Quieres mantener el comportamiento original de algunos m\xe9todos del objeto"}),"\n",(0,a.jsx)(s.li,{children:"Necesitas verificar si un m\xe9todo fue llamado y con qu\xe9 argumentos"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsxs)(s.strong,{children:["Usa ",(0,a.jsx)(s.code,{children:"jest.mock()"})," cuando:"]})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Quieres reemplazar un m\xf3dulo completo"}),"\n",(0,a.jsx)(s.li,{children:"Quieres evitar importar dependencias externas (como base de datos, APIs)"}),"\n",(0,a.jsx)(s.li,{children:"Necesitas control total sobre el comportamiento de todas las funciones de un m\xf3dulo"}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"ejemplo-comparativo",children:"Ejemplo comparativo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'// \u274c Usando jest.mock() - Reemplaza TODO el m\xf3dulo\njest.mock("../../services", () => ({\n    userService: {\n        findByEmail: jest.fn(),\n        create: jest.fn(),\n        // Tengo que mockear TODOS los m\xe9todos\n    }\n}));\n\n// \u2705 Usando jest.spyOn() - Solo intercepta m\xe9todos espec\xedficos\nimport { userService } from "../../services"; // Importo el objeto real\n\n// En la prueba:\njest.spyOn(userService, "findByEmail").mockResolvedValue(null);\n// Solo mockeo el m\xe9todo que necesito, el resto funciona normalmente\n'})}),"\n",(0,a.jsx)(s.h4,{id:"m\xe9todos-\xfatiles-de-spyon",children:"M\xe9todos \xfatiles de spyOn"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'const spy = jest.spyOn(userService, "findByEmail");\n\n// Controlar el valor de retorno\nspy.mockResolvedValue(mockUser);           // Para promesas exitosas\nspy.mockRejectedValue(new Error("Error")); // Para promesas que fallan\nspy.mockReturnValue(mockUser);             // Para valores s\xedncronos\n\n// Verificar llamadas\nexpect(spy).toHaveBeenCalled();                    // \xbfFue llamado?\nexpect(spy).toHaveBeenCalledWith("test@email.com"); // \xbfCon qu\xe9 argumentos?\nexpect(spy).toHaveBeenCalledTimes(2);              // \xbfCu\xe1ntas veces?\n\n// Restaurar comportamiento original\nspy.mockRestore();\n'})}),"\n",(0,a.jsx)(s.h4,{id:"ventajas-de-spyon",children:"Ventajas de spyOn"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Granularidad"}),": Puedes mockear solo los m\xe9todos que necesitas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Flexibilidad"}),": Puedes cambiar el comportamiento durante la prueba"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Verificaci\xf3n"}),": Puedes verificar exactamente c\xf3mo fue llamado el m\xe9todo"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Mantenimiento"}),": Es m\xe1s f\xe1cil mantener cuando el objeto original cambia"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"ejemplo-pr\xe1ctico-en-nuestro-contexto",children:"Ejemplo pr\xe1ctico en nuestro contexto"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'// En nuestra prueba de usuario\nit("should create a new user", async () => {\n    // Espiamos el m\xe9todo findByEmail del userService real\n    const findByEmailSpy = jest.spyOn(userService, "findByEmail");\n    \n    // Configuramos qu\xe9 debe devolver cuando sea llamado\n    findByEmailSpy.mockResolvedValue(null); // Usuario no existe\n    \n    // Ejecutamos la funci\xf3n\n    await userService.create(mockUserInput);\n    \n    // Verificamos que fue llamado correctamente\n    expect(findByEmailSpy).toHaveBeenCalledWith("john.doe@example.com");\n    expect(findByEmailSpy).toHaveBeenCalledTimes(1);\n    \n    // Opcionalmente, restauramos el comportamiento original\n    findByEmailSpy.mockRestore();\n});\n'})}),"\n",(0,a.jsx)(s.h4,{id:"526-segunda-prueba-error-cuando-el-usuario-ya-existe",children:"5.2.6 Segunda prueba: Error cuando el usuario ya existe"}),"\n",(0,a.jsxs)(s.p,{children:["Agregamos una segunda prueba dentro del mismo bloque ",(0,a.jsx)(s.code,{children:'describe("create")'}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'it("should throw an error if the user already exists", async () => {\n    // 1. Preparar datos de prueba\n    const mockUserInput: UserInput = {\n        name: "John Doe",\n        email: "john.doe@example.com",\n        password: "password123",\n    };\n\n    // 2. Configurar mock para simular usuario existente\n    jest.spyOn(userService, "findByEmail").mockResolvedValue({\n        ...mockUserInput,\n        _id: "12345",\n    } as UserDocument);\n\n    // 3. Ejecutar y verificar que lance error\n    await expect(userService.create(mockUserInput)).rejects.toThrow(\n        "User already exists"\n    );\n\n    // 4. Verificar que no se intent\xf3 crear el usuario\n    expect(userService.findByEmail).toHaveBeenCalledWith(mockUserInput.email);\n    expect(UserModel.create).not.toHaveBeenCalled();\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Conceptos clave:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"rejects.toThrow()"}),": Verifica que una funci\xf3n as\xedncrona lance un error"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"not.toHaveBeenCalled()"}),": Verifica que una funci\xf3n NO haya sido llamada"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"527-archivo-completo",children:"5.2.7 Archivo completo"}),"\n",(0,a.jsxs)(s.p,{children:["El archivo completo ",(0,a.jsx)(s.code,{children:"user.service.test.ts"})," se ver\xeda as\xed:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import { userService } from "../../services";\nimport { UserModel, UserDocument, UserRole } from "../../models";\nimport bcrypt from "bcrypt";\nimport { UserInput } from "../../interfaces";\n\njest.mock("bcrypt", () => ({\n    hash: jest.fn(),\n}));\n\njest.mock("../../models", () => ({\n    UserRole: {\n        ADMIN: "admin",\n        USER: "user",\n    },\n    UserModel: {\n        create: jest.fn()\n    },\n}));\n\ndescribe("UserService", () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe("create", () => {\n        it("should create a new user", async () => {\n            const mockUserInput: UserInput = {\n                name: "John Doe",\n                email: "john.doe@example.com",\n                password: "password123",\n            };\n\n            const mockHashedPassword = "hashedPassword123";\n            const mockCreatedUser: Partial<UserDocument> = {\n                ...mockUserInput,\n                _id: "12345",\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                roles: [UserRole.USER],\n            };\n\n            jest.spyOn(userService, "findByEmail").mockResolvedValue(null);\n            (bcrypt.hash as jest.Mock).mockResolvedValue(mockHashedPassword);\n            (UserModel.create as jest.Mock).mockResolvedValue(mockCreatedUser);\n            \n            const result = await userService.create(mockUserInput);\n\n            expect(bcrypt.hash).toHaveBeenCalledWith(mockUserInput.password, 10);\n            expect(UserModel.create).toHaveBeenCalledWith({\n                ...mockUserInput,\n                password: mockHashedPassword,\n            });\n            expect(result).toEqual(mockCreatedUser);\n        });\n\n        it("should throw an error if the user already exists", async () => {\n            const mockUserInput: UserInput = {\n                name: "John Doe",\n                email: "john.doe@example.com",\n                password: "password123",\n            };\n\n            jest.spyOn(userService, "findByEmail").mockResolvedValue({\n                ...mockUserInput,\n                _id: "12345",\n            } as UserDocument);\n\n            await expect(userService.create(mockUserInput)).rejects.toThrow(\n                "User already exists"\n            );\n\n            expect(userService.findByEmail).toHaveBeenCalledWith(mockUserInput.email);\n            expect(UserModel.create).not.toHaveBeenCalled();\n        });\n    });\n});\n'})}),"\n",(0,a.jsx)(s.h3,{id:"53-pruebas-de-controlador-de-usuario",children:"5.3 Pruebas de controlador de usuario"}),"\n",(0,a.jsx)(s.p,{children:"Las pruebas de controlador son diferentes a las de servicio porque aqu\xed probamos las respuestas HTTP y el manejo de requests/responses. Vamos paso a paso."}),"\n",(0,a.jsx)(s.h4,{id:"531-creaci\xf3n-del-archivo-de-pruebas",children:"5.3.1 Creaci\xf3n del archivo de pruebas"}),"\n",(0,a.jsxs)(s.p,{children:["Crea un archivo llamado ",(0,a.jsx)(s.code,{children:"user.controller.test.ts"})," dentro de la carpeta ",(0,a.jsx)(s.code,{children:"tests/controllers"}),"."]}),"\n",(0,a.jsx)(s.h4,{id:"532-configuraci\xf3n-de-imports-y-mocks",children:"5.3.2 Configuraci\xf3n de imports y mocks"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import { userController } from "../../controllers/user.controller";\nimport { userService } from "../../services/user.service";\nimport { Request, Response } from "express";\nimport { UserDocument } from "../../models";\nimport { UserInput, UserInputUpdate } from "../../interfaces";\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Diferencia clave:"})," Aqu\xed importamos tipos de Express (",(0,a.jsx)(s.code,{children:"Request"}),", ",(0,a.jsx)(s.code,{children:"Response"}),") para simular peticiones HTTP."]}),"\n",(0,a.jsx)(s.h4,{id:"533-mock-del-servicio-de-usuario",children:"5.3.3 Mock del servicio de usuario"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'jest.mock("../../services/user.service", () => ({\n    userService: {\n        create: jest.fn(),\n        getAll: jest.fn(),\n        getById: jest.fn(),\n        update: jest.fn(),\n        delete: jest.fn(),\n    },\n}));\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"\xbfPor qu\xe9 mockear el servicio?"})," No queremos probar la l\xf3gica del servicio aqu\xed, solo verificar que el controlador llame correctamente al servicio y maneje las respuestas."]}),"\n",(0,a.jsx)(s.h4,{id:"534-configuraci\xf3n-de-objetos-request-y-response-simulados",children:"5.3.4 Configuraci\xf3n de objetos Request y Response simulados"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("UserController", () => {\n    let req: Partial<Request>;\n    let res: Partial<Response>;\n    let next: jest.Mock;\n\n    beforeEach(() => {\n        req = {};\n        res = {\n            status: jest.fn().mockReturnThis(), // mockReturnThis permite encadenar m\xe9todos\n            json: jest.fn(),\n            send: jest.fn(),\n        };\n        next = jest.fn();\n        jest.clearAllMocks();\n    });\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Explicaci\xf3n:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"req"}),": Objeto simulado de petici\xf3n HTTP"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"res"}),": Objeto simulado de respuesta HTTP con m\xe9todos como ",(0,a.jsx)(s.code,{children:"status()"}),", ",(0,a.jsx)(s.code,{children:"json()"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"next"}),": Funci\xf3n middleware para manejo de errores"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"mockReturnThis()"}),": Permite encadenar m\xe9todos como ",(0,a.jsx)(s.code,{children:"res.status(201).json(data)"})]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"535-primera-prueba-crear-usuario-exitoso",children:"5.3.5 Primera prueba: Crear usuario exitoso"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("create", () => {\n    it("should create a new user and return 201", async () => {\n        // 1. Preparar datos de entrada\n        const mockUserInput: UserInput = {\n            name: "John Doe",\n            email: "john.doe@example.com",\n            password: "password123",\n        };\n\n        const mockUser: UserDocument = {\n            ...mockUserInput,\n            _id: "12345",\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            roles: ["user"],\n        } as UserDocument;\n\n        // 2. Configurar request mock\n        req.body = mockUserInput;\n        \n        // 3. Configurar respuesta del servicio\n        (userService.create as jest.Mock).mockResolvedValue(mockUser);\n\n        // 4. Ejecutar controlador\n        await userController.create(req as Request, res as Response, next);\n\n        // 5. Verificar llamadas y respuestas\n        expect(userService.create).toHaveBeenCalledWith(mockUserInput);\n        expect(res.status).toHaveBeenCalledWith(201);\n        expect(res.json).toHaveBeenCalledWith(mockUser);\n    });\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Puntos importantes:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Simulamos ",(0,a.jsx)(s.code,{children:"req.body"})," con los datos de entrada"]}),"\n",(0,a.jsx)(s.li,{children:"Verificamos que se devuelva el c\xf3digo de estado HTTP correcto (201)"}),"\n",(0,a.jsx)(s.li,{children:"Verificamos que se env\xede la respuesta JSON correcta"}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"536-segunda-prueba-manejo-de-errores",children:"5.3.6 Segunda prueba: Manejo de errores"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'it("should call next with an error if user already exists", async () => {\n    // 1. Preparar datos\n    const mockUserInput: UserInput = {\n        name: "John Doe",\n        email: "john.doe@example.com",\n        password: "password123",\n    };\n\n    req.body = mockUserInput;\n    \n    // 2. Configurar error del servicio\n    const error = new ReferenceError("User already exists");\n    (userService.create as jest.Mock).mockRejectedValue(error);\n\n    // 3. Ejecutar controlador\n    await userController.create(req as Request, res as Response, next);\n\n    // 4. Verificar manejo de errores\n    expect(userService.create).toHaveBeenCalledWith(mockUserInput);\n    expect(next).toHaveBeenCalledWith(expect.any(Error));\n});\n'})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Concepto clave:"})," ",(0,a.jsx)(s.code,{children:"next()"})," se usa en Express para pasar errores al middleware de manejo de errores."]}),"\n",(0,a.jsx)(s.h4,{id:"537-prueba-de-obtener-todos-los-usuarios",children:"5.3.7 Prueba de obtener todos los usuarios"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("getAll", () => {\n    it("should return all users", async () => {\n        // 1. Preparar datos simulados\n        const mockUsers: UserDocument[] = [\n            { _id: "1", name: "John Doe", email: "john@example.com", roles: ["user"] } as UserDocument,\n            { _id: "2", name: "Jane Doe", email: "jane@example.com", roles: ["admin"] } as UserDocument,\n        ];\n\n        // 2. Configurar respuesta del servicio\n        (userService.getAll as jest.Mock).mockResolvedValue(mockUsers);\n\n        // 3. Ejecutar controlador\n        await userController.getAll(req as Request, res as Response);\n\n        // 4. Verificar resultados\n        expect(userService.getAll).toHaveBeenCalled();\n        expect(res.json).toHaveBeenCalledWith(mockUsers);\n    });\n});\n'})}),"\n",(0,a.jsx)(s.h4,{id:"538-prueba-de-obtener-usuario-por-id",children:"5.3.8 Prueba de obtener usuario por ID"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("getOne", () => {\n    it("should return a user by id", async () => {\n        const mockUser: UserDocument = {\n            _id: "12345",\n            name: "John Doe",\n            email: "john@example.com",\n            roles: ["user"],\n        } as UserDocument;\n\n        // Simular par\xe1metros de URL\n        req.params = { id: "12345" };\n        (userService.getById as jest.Mock).mockResolvedValue(mockUser);\n\n        await userController.getOne(req as Request, res as Response);\n\n        expect(userService.getById).toHaveBeenCalledWith("12345");\n        expect(res.json).toHaveBeenCalledWith(mockUser);\n    });\n\n    it("should return 404 if user is not found", async () => {\n        req.params = { id: "12345" };\n        (userService.getById as jest.Mock).mockResolvedValue(null);\n\n        await userController.getOne(req as Request, res as Response);\n\n        expect(userService.getById).toHaveBeenCalledWith("12345");\n        expect(res.status).toHaveBeenCalledWith(404);\n        expect(res.json).toHaveBeenCalledWith({ message: "User with id 12345 not found" });\n    });\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Conceptos importantes:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"req.params"}),": Simula par\xe1metros de URL como ",(0,a.jsx)(s.code,{children:"/users/:id"})]}),"\n",(0,a.jsx)(s.li,{children:"Probamos tanto el caso exitoso como el caso de error (404)"}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"539-pruebas-de-actualizaci\xf3n-y-eliminaci\xf3n",children:"5.3.9 Pruebas de actualizaci\xf3n y eliminaci\xf3n"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'describe("update", () => {\n    it("should update a user and return the updated user", async () => {\n        const mockUserUpdate: UserInputUpdate = { \n            name: "Updated Name", \n            email: "email.updated@gmail.com" \n        };\n        const mockUpdatedUser: UserDocument = {\n            _id: "12345",\n            name: "Updated Name",\n            email: "john@example.com",\n            roles: ["user"],\n        } as UserDocument;\n\n        req.params = { id: "12345" };\n        req.body = mockUserUpdate;\n        (userService.update as jest.Mock).mockResolvedValue(mockUpdatedUser);\n\n        await userController.update(req as Request, res as Response);\n\n        expect(userService.update).toHaveBeenCalledWith("12345", mockUserUpdate);\n        expect(res.json).toHaveBeenCalledWith(mockUpdatedUser);\n    });\n});\n\ndescribe("delete", () => {\n    it("should delete a user and return 204", async () => {\n        req.params = { id: "12345" };\n        (userService.delete as jest.Mock).mockResolvedValue(true);\n\n        await userController.delete(req as Request, res as Response);\n\n        expect(userService.delete).toHaveBeenCalledWith("12345");\n        expect(res.status).toHaveBeenCalledWith(204);\n        expect(res.send).toHaveBeenCalled();\n    });\n});\n'})}),"\n",(0,a.jsx)(s.h4,{id:"5310-archivo-completo-del-controlador",children:"5.3.10 Archivo completo del controlador"}),"\n",(0,a.jsxs)(s.p,{children:["Aqu\xed tienes el archivo completo ",(0,a.jsx)(s.code,{children:"user.controller.test.ts"})," con todas las pruebas organizadas:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'import { userController } from "../../controllers/user.controller";\nimport { userService } from "../../services/user.service";\nimport { Request, Response } from "express";\nimport { UserDocument } from "../../models";\nimport { UserInput, UserInputUpdate } from "../../interfaces";\n\njest.mock("../../services/user.service", () => ({\n    userService: {\n        create: jest.fn(),\n        getAll: jest.fn(),\n        getById: jest.fn(),\n        update: jest.fn(),\n        delete: jest.fn(),\n    },\n}));\n\ndescribe("UserController", () => {\n    let req: Partial<Request>;\n    let res: Partial<Response>;\n    let next: jest.Mock;\n\n    beforeEach(() => {\n        req = {};\n        res = {\n            status: jest.fn().mockReturnThis(),\n            json: jest.fn(),\n            send: jest.fn(),\n        };\n        next = jest.fn();\n        jest.clearAllMocks();\n    });\n\n    describe("create", () => {\n        it("should create a new user and return 201", async () => {\n            const mockUserInput: UserInput = {\n                name: "John Doe",\n                email: "john.doe@example.com",\n                password: "password123",\n            };\n\n            const mockUser: UserDocument = {\n                ...mockUserInput,\n                _id: "12345",\n                createdAt: new Date(),\n                updatedAt: new Date(),\n                roles: ["user"],\n            } as UserDocument;\n\n            req.body = mockUserInput;\n            (userService.create as jest.Mock).mockResolvedValue(mockUser);\n\n            await userController.create(req as Request, res as Response, next);\n\n            expect(userService.create).toHaveBeenCalledWith(mockUserInput);\n            expect(res.status).toHaveBeenCalledWith(201);\n            expect(res.json).toHaveBeenCalledWith(mockUser);\n        });\n\n        it("should call next with an error if user already exists", async () => {\n            const mockUserInput: UserInput = {\n                name: "John Doe",\n                email: "john.doe@example.com",\n                password: "password123",\n            };\n\n            req.body = mockUserInput;\n            const error = new ReferenceError("User already exists");\n            (userService.create as jest.Mock).mockRejectedValue(error);\n\n            await userController.create(req as Request, res as Response, next);\n\n            expect(userService.create).toHaveBeenCalledWith(mockUserInput);\n            expect(next).toHaveBeenCalledWith(expect.any(Error));\n        });\n    });\n\n    describe("getAll", () => {\n        it("should return all users", async () => {\n            const mockUsers: UserDocument[] = [\n                { _id: "1", name: "John Doe", email: "john@example.com", roles: ["user"] } as UserDocument,\n                { _id: "2", name: "Jane Doe", email: "jane@example.com", roles: ["admin"] } as UserDocument,\n            ];\n\n            (userService.getAll as jest.Mock).mockResolvedValue(mockUsers);\n\n            await userController.getAll(req as Request, res as Response);\n\n            expect(userService.getAll).toHaveBeenCalled();\n            expect(res.json).toHaveBeenCalledWith(mockUsers);\n        });\n    });\n\n    describe("getOne", () => {\n        it("should return a user by id", async () => {\n            const mockUser: UserDocument = {\n                _id: "12345",\n                name: "John Doe",\n                email: "john@example.com",\n                roles: ["user"],\n            } as UserDocument;\n\n            req.params = { id: "12345" };\n            (userService.getById as jest.Mock).mockResolvedValue(mockUser);\n\n            await userController.getOne(req as Request, res as Response);\n\n            expect(userService.getById).toHaveBeenCalledWith("12345");\n            expect(res.json).toHaveBeenCalledWith(mockUser);\n        });\n\n        it("should return 404 if user is not found", async () => {\n            req.params = { id: "12345" };\n            (userService.getById as jest.Mock).mockResolvedValue(null);\n\n            await userController.getOne(req as Request, res as Response);\n\n            expect(userService.getById).toHaveBeenCalledWith("12345");\n            expect(res.status).toHaveBeenCalledWith(404);\n            expect(res.json).toHaveBeenCalledWith({ message: "User with id 12345 not found" });\n        });\n    });\n\n    describe("update", () => {\n        it("should update a user and return the updated user", async () => {\n            const mockUserUpdate: UserInputUpdate = { \n                name: "Updated Name", \n                email: "email.updated@gmail.com" \n            };\n            const mockUpdatedUser: UserDocument = {\n                _id: "12345",\n                name: "Updated Name",\n                email: "john@example.com",\n                roles: ["user"],\n            } as UserDocument;\n\n            req.params = { id: "12345" };\n            req.body = mockUserUpdate;\n            (userService.update as jest.Mock).mockResolvedValue(mockUpdatedUser);\n\n            await userController.update(req as Request, res as Response);\n\n            expect(userService.update).toHaveBeenCalledWith("12345", mockUserUpdate);\n            expect(res.json).toHaveBeenCalledWith(mockUpdatedUser);\n        });\n\n        it("should return 404 if user is not found", async () => {\n            req.params = { id: "12345" };\n            req.body = { name: "Updated Name" };\n            (userService.update as jest.Mock).mockResolvedValue(null);\n\n            await userController.update(req as Request, res as Response);\n\n            expect(userService.update).toHaveBeenCalledWith("12345", { name: "Updated Name" });\n            expect(res.status).toHaveBeenCalledWith(404);\n            expect(res.json).toHaveBeenCalledWith({ message: "User with id 12345 not found" });\n        });\n    });\n\n    describe("delete", () => {\n        it("should delete a user and return 204", async () => {\n            req.params = { id: "12345" };\n            (userService.delete as jest.Mock).mockResolvedValue(true);\n\n            await userController.delete(req as Request, res as Response);\n\n            expect(userService.delete).toHaveBeenCalledWith("12345");\n            expect(res.status).toHaveBeenCalledWith(204);\n            expect(res.send).toHaveBeenCalled();\n        });\n\n        it("should return 404 if user is not found", async () => {\n            req.params = { id: "12345" };\n            (userService.delete as jest.Mock).mockResolvedValue(false);\n\n            await userController.delete(req as Request, res as Response);\n\n            expect(userService.delete).toHaveBeenCalledWith("12345");\n            expect(res.status).toHaveBeenCalledWith(404);\n            expect(res.json).toHaveBeenCalledWith({ message: "User with id 12345 not found" });\n        });\n    });\n});\n'})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Diferencias clave entre pruebas de servicio y controlador:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Servicio"}),": Prueba l\xf3gica de negocio, interacciones con base de datos"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Controlador"}),": Prueba manejo HTTP, c\xf3digos de estado, formato de respuestas"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Resumen del archivo completo:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Imports y mocks"}),": Configuraci\xf3n inicial de dependencias"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Setup de pruebas"}),": Configuraci\xf3n de objetos Request/Response simulados"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Pruebas CRUD completas"}),": Create, Read, Update, Delete con casos de \xe9xito y error"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Verificaciones HTTP"}),": C\xf3digos de estado, respuestas JSON, manejo de errores"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Cobertura total"}),": Todos los m\xe9todos del controlador est\xe1n probados"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"6-resultados-de-cobertura-despu\xe9s-de-implementar-las-pruebas",children:"6. Resultados de cobertura despu\xe9s de implementar las pruebas"}),"\n",(0,a.jsx)(s.p,{children:"Despu\xe9s de implementar las pruebas de servicios y controladores, veamos c\xf3mo ha mejorado la cobertura de c\xf3digo de nuestro proyecto:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Reporte de cobertura obtenido:"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"------------------------------|---------|----------|---------|---------|------------------------------------------\nFile                          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n------------------------------|---------|----------|---------|---------|------------------------------------------\nAll files                     |   36.79 |       56 |   29.03 |   36.79 |\n controllers                  |   32.97 |    47.36 |   71.42 |   32.97 |\n  auth.controller.ts          |       0 |        0 |       0 |       0 | 1-24\n  games.controller.ts         |       0 |        0 |       0 |       0 | 1-92\n  user.controller.ts          |   86.11 |    52.94 |     100 |   86.11 | 16-17,26-27,40-41,54-55,67-68\n middlewares                  |   30.14 |    66.66 |      25 |   30.14 |\n  auth.middleware.ts          |      25 |      100 |       0 |      25 | 6-20\n  error.handler.ts            |      54 |      100 |      50 |      54 | 25-45,49-50\n  handle.validations.error.ts |   23.52 |      100 |       0 |   23.52 | 5-17\n  logger.middleware.ts        |   16.12 |      100 |       0 |   16.12 | 6-31\n  preAuthorize.middleware.ts  |       0 |        0 |       0 |       0 | 1-18\n services                     |    46.1 |      100 |    6.66 |    46.1 |\n  auth.service.ts             |   39.47 |      100 |       0 |   39.47 | 10-26,29-34\n  games.service.ts            |    37.5 |      100 |       0 |    37.5 | 7-14,17-28,31-32,35-36,39-45,48-49,52-53\n  user.service.ts             |   58.33 |      100 |   16.66 |   58.33 | 24-25,28-39,42-43,46-47,50-56\n utils                        |     100 |      100 |     100 |     100 |\n  operations.util.ts          |     100 |      100 |     100 |     100 |\n------------------------------|---------|----------|---------|---------|------------------------------------------\n"})}),"\n",(0,a.jsx)(s.h3,{id:"61-an\xe1lisis-de-los-resultados",children:"6.1 An\xe1lisis de los resultados"}),"\n",(0,a.jsxs)(s.h4,{id:"-logros-destacados",children:["\u2705 ",(0,a.jsx)(s.strong,{children:"Logros destacados:"})]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"user.controller.ts"}),": ",(0,a.jsx)(s.strong,{children:"86.11% de cobertura"})," - Excelente resultado gracias a nuestras pruebas de controlador"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"user.service.ts"}),": ",(0,a.jsx)(s.strong,{children:"58.33% de cobertura"})," - Mejora notable con las pruebas de servicio (incremento de ~1.44%)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"operations.util.ts"}),": ",(0,a.jsx)(s.strong,{children:"100% de cobertura"})," - Cobertura completa en nuestras utilidades"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Cobertura general"}),": ",(0,a.jsx)(s.strong,{children:"36.79%"})," - Incremento ligero pero positivo en la cobertura total"]}),"\n"]}),"\n",(0,a.jsxs)(s.h4,{id:"-m\xe9tricas-importantes",children:["\ud83d\udcca ",(0,a.jsx)(s.strong,{children:"M\xe9tricas importantes:"})]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"% Stmts"})," (Statements): Porcentaje de declaraciones ejecutadas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"% Branch"})," (Branches): Porcentaje de ramas condicionales probadas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"% Funcs"})," (Functions): Porcentaje de funciones llamadas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"% Lines"}),": Porcentaje de l\xedneas de c\xf3digo ejecutadas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Uncovered Line #s"}),": N\xfameros de l\xedneas no cubiertas por las pruebas"]}),"\n"]}),"\n",(0,a.jsxs)(s.h4,{id:"-\xe1reas-de-mejora-identificadas",children:["\ud83c\udfaf ",(0,a.jsx)(s.strong,{children:"\xc1reas de mejora identificadas:"})]}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"auth.controller.ts y games.controller.ts"}),": ",(0,a.jsx)(s.strong,{children:"0% de cobertura"})," - Requieren implementar pruebas urgentemente"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Middlewares"}),": ",(0,a.jsx)(s.strong,{children:"30.14% promedio"})," - Necesitan pruebas espec\xedficas para middleware"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"auth.service.ts y games.service.ts"}),": ",(0,a.jsx)(s.strong,{children:"Cobertura parcial"})," - Pueden beneficiarse de m\xe1s pruebas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"user.service.ts"}),": A\xfan tiene l\xedneas sin cubrir (24-25, 28-39, 42-43, 46-47, 50-56)"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"62-pr\xf3ximos-pasos-recomendados",children:"6.2 Pr\xf3ximos pasos recomendados"}),"\n",(0,a.jsx)(s.p,{children:"Para mejorar la cobertura general del proyecto, te recomendamos:"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Implementar pruebas para auth.controller.ts y games.controller.ts"})," siguiendo el mismo patr\xf3n que usamos para user.controller.ts"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Crear pruebas para middlewares"})," utilizando t\xe9cnicas similares pero adaptadas para middleware de Express"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Completar pruebas de servicios"})," para auth.service.ts y games.service.ts"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Mejorar cobertura de user.service.ts"})," agregando pruebas para las l\xedneas no cubiertas"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Establecer un umbral m\xednimo de cobertura"})," (por ejemplo, 80%) en la configuraci\xf3n de Jest"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"63-configuraci\xf3n-de-umbral-de-cobertura",children:"6.3 Configuraci\xf3n de umbral de cobertura"}),"\n",(0,a.jsxs)(s.p,{children:["Puedes agregar umbrales m\xednimos de cobertura en tu ",(0,a.jsx)(s.code,{children:"jest.config.ts"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-typescript",children:'const config: Config = {\n    // ... otras configuraciones\n    coverageThreshold: {\n        global: {\n            branches: 80,\n            functions: 80,\n            lines: 80,\n            statements: 80\n        },\n        // Umbrales espec\xedficos por archivo\n        "./src/controllers/user.controller.ts": {\n            branches: 90,\n            functions: 100,\n            lines: 90,\n            statements: 90\n        }\n    }\n};\n'})}),"\n",(0,a.jsx)(s.p,{children:"Esto har\xe1 que las pruebas fallen si la cobertura cae por debajo del umbral establecido en cualquier m\xe9trica."}),"\n",(0,a.jsx)(s.h3,{id:"64-comparaci\xf3n-de-resultados",children:"6.4 Comparaci\xf3n de resultados"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Antes de las pruebas (solo operations.util.ts):"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Cobertura total: ~0.62%"}),"\n",(0,a.jsx)(s.li,{children:"Solo 1 archivo con pruebas"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Despu\xe9s de implementar pruebas de servicio y controlador:"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Cobertura total: ",(0,a.jsx)(s.strong,{children:"36.79%"})," (incremento de ~36.17%)"]}),"\n",(0,a.jsxs)(s.li,{children:["user.controller.ts: ",(0,a.jsx)(s.strong,{children:"86.11%"})," de cobertura"]}),"\n",(0,a.jsxs)(s.li,{children:["user.service.ts: ",(0,a.jsx)(s.strong,{children:"58.33%"})," de cobertura"]}),"\n",(0,a.jsxs)(s.li,{children:["Cobertura de funciones en controladores: ",(0,a.jsx)(s.strong,{children:"71.42%"})]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"\xa1Felicitaciones!"})," Has implementado exitosamente las pruebas b\xe1sicas para tu aplicaci\xf3n Express con TypeScript usando Jest. El ",(0,a.jsx)(s.strong,{children:"86.11%"})," de cobertura en el controlador de usuario y el ",(0,a.jsx)(s.strong,{children:"58.33%"})," en el servicio demuestran la efectividad de las pruebas implementadas."]}),"\n",(0,a.jsx)(s.p,{children:"TODO:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Aumentar la cobertura del controlador y servicio de usuario que cubra todos los m\xe9todos"}),"\n",(0,a.jsx)(s.li,{children:"Implementar pruebas para el controlador y servicio de games"}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var r=n(6540);const a={},o=r.createContext(a);function c(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);