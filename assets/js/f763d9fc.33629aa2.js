"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6627],{2463:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"disenando-con-algoritmos/semana-5/jest","title":"Gu\xeda de Jest en JS","description":"\xbfQu\xe9 es Jest?","source":"@site/docs/disenando-con-algoritmos/semana-5/jest.md","sourceDirName":"disenando-con-algoritmos/semana-5","slug":"/disenando-con-algoritmos/semana-5/jest","permalink":"/docs/disenando-con-algoritmos/semana-5/jest","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/disenando-con-algoritmos/semana-5/jest.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"S5 - Testing, Calidad e IA","permalink":"/docs/category/s5---testing-calidad-e-ia"},"next":{"title":"S6 - Typescript","permalink":"/docs/category/s6---typescript"}}');var o=n(4848),r=n(8453);const t={sidebar_position:4},c="Gu\xeda de Jest en JS",l={},i=[{value:"\xbfQu\xe9 es Jest?",id:"qu\xe9-es-jest",level:2},{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:2},{value:"Tu primer test",id:"tu-primer-test",level:2},{value:"Conceptos importantes",id:"conceptos-importantes",level:2},{value:"1. Matchers",id:"1-matchers",level:3},{value:"2. Agrupar tests con <code>describe</code>",id:"2-agrupar-tests-con-describe",level:3},{value:"3. Before &amp; After Hooks",id:"3-before--after-hooks",level:3},{value:"4. Mocks",id:"4-mocks",level:3},{value:"Tests as\xedncronos",id:"tests-as\xedncronos",level:2},{value:"1. Con Callbacks",id:"1-con-callbacks",level:3},{value:"2. Con Promesas",id:"2-con-promesas",level:3},{value:"3. Con Async/Await (lo m\xe1s limpio \u2728)",id:"3-con-asyncawait-lo-m\xe1s-limpio-",level:3},{value:"Pr\xe1cticas recomendadas",id:"pr\xe1cticas-recomendadas",level:2},{value:"<code>test.only(...)</code>",id:"testonly",level:3},{value:"<code>test.skip(...)</code>",id:"testskip",level:3},{value:"<code>describe.only</code> y <code>describe.skip</code>",id:"describeonly-y-describeskip",level:3},{value:"Cobertura de c\xf3digo",id:"cobertura-de-c\xf3digo",level:2},{value:"Consejos finales",id:"consejos-finales",level:2},{value:"Recursos adicionales \ud83d\udcda",id:"recursos-adicionales-",level:2}];function d(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"gu\xeda-de-jest-en-js",children:"Gu\xeda de Jest en JS"})}),"\n",(0,o.jsx)(s.h2,{id:"qu\xe9-es-jest",children:"\xbfQu\xe9 es Jest?"}),"\n",(0,o.jsxs)(s.p,{children:["Jest es un ",(0,o.jsx)(s.strong,{children:"framework de testing"})," desarrollado por Facebook, pensado originalmente para proyectos con React, pero que puedes usar con cualquier aplicaci\xf3n de ",(0,o.jsx)(s.strong,{children:"JavaScript"}),".",(0,o.jsx)(s.br,{}),"\n","Es r\xe1pido, tiene una sintaxis muy intuitiva y viene con muchas funcionalidades listas para usar."]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"instalaci\xf3n",children:"Instalaci\xf3n"}),"\n",(0,o.jsxs)(s.p,{children:["Primero, aseg\xfarate de tener ",(0,o.jsx)(s.strong,{children:"Node.js"})," y ",(0,o.jsx)(s.strong,{children:"npm"})," instalados en tu m\xe1quina."]}),"\n",(0,o.jsx)(s.p,{children:"En tu proyecto, corre este comando:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"npm install --save-dev jest\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Luego, en tu archivo ",(0,o.jsx)(s.code,{children:"package.json"}),", agrega el script:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-json",children:'"scripts": {\n  "test": "jest"\n}\n'})}),"\n",(0,o.jsx)(s.p,{children:"Pero, hace falta donde lo vamos a probar, as\xed que lo vamos a hacerlo paso a paso:"}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"tu-primer-test",children:"Tu primer test"}),"\n",(0,o.jsxs)(s.p,{children:["Crea un archivo con el nombre ",(0,o.jsx)(s.code,{children:"suma.js"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"// Definimos una funci\xf3n llamada 'suma' que recibe dos par\xe1metros y devuelve la suma de estos\nfunction suma(a, b) {\n  return a + b;\n}\n\n// Exportamos la funci\xf3n 'suma' para que pueda ser usada en otros archivos\nmodule.exports = suma;\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Ahora, crea el archivo ",(0,o.jsx)(s.code,{children:"suma.test.js"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"// Importamos la funci\xf3n 'suma' desde el archivo suma.js\n// Esto nos permite usar esa funci\xf3n dentro de nuestro test.\nconst suma = require(\"./suma\");\n\n// Aqu\xed definimos un test con Jest.\n\n// El primer par\xe1metro es una descripci\xf3n (no es obligatorio).\ntest(\"la funci\xf3n suma debe devolver la suma de dos n\xfameros\", () => {\n  // El segundo par\xe1metro es una funci\xf3n que contiene las expectativas del test.\n  expect(suma(2, 3)).toBe(5);\n  // Usamos 'expect' para indicar el resultado esperado.\n  // Estamos llamando a suma(2, 3) y verificamos que el resultado sea exactamente 5.\n  // '.toBe(5)' comprueba igualdad estricta (===).\n});\n"})}),"\n",(0,o.jsx)(s.p,{children:"Corre el test con:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,o.jsx)(s.p,{children:'\xa1Y listo! Si todo va bien, ver\xe1s un mensajito verde que te diga "PASS" \u2705'}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"conceptos-importantes",children:"Conceptos importantes"}),"\n",(0,o.jsx)(s.h3,{id:"1-matchers",children:"1. Matchers"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"toBe"})," \u2192 compara valores primitivos"]}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"expect(2 + 2).toBe(4);\n"})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"toEqual"})," \u2192 compara objetos/arrays"]}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'expect({ nombre: "Pedro" }).toEqual({ nombre: "Pedro" });\n'})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.strong,{children:"toBeNull / toBeUndefined / toBeDefined"})}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"expect(null).toBeNull();\n"})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.strong,{children:"toContain"})}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'expect(["rojo", "azul"]).toContain("rojo");\n'})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.strong,{children:"toBeGreaterThan / toBeLessThan"})}),"\n"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"expect(10).toBeGreaterThan(5);\n"})}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsxs)(s.h3,{id:"2-agrupar-tests-con-describe",children:["2. Agrupar tests con ",(0,o.jsx)(s.code,{children:"describe"})]}),"\n",(0,o.jsx)(s.p,{children:"Sirve para organizar mejor tus pruebas:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'describe("Operaciones matem\xe1ticas", () => {\n  test("suma", () => {\n    expect(2 + 2).toBe(4);\n  });\n\n  test("resta", () => {\n    expect(5 - 3).toBe(2);\n  });\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"3-before--after-hooks",children:"3. Before & After Hooks"}),"\n",(0,o.jsx)(s.p,{children:"Puedes preparar o limpiar cosas antes y despu\xe9s de tus tests:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'beforeAll(() => {\n  console.log("Se ejecuta una vez ANTES de todos los tests");\n});\n\nbeforeEach(() => {\n  console.log("Se ejecuta una vez ANTES de cada tests");\n});\n\nafterAll(() => {\n  console.log("Se ejecuta una vez DESPU\xc9S de todos los tests");\n});\n\nafterEach(() => {\n  console.log("Se ejecuta una vez DESPU\xc9S de cada tests");\n});\n'})}),"\n",(0,o.jsx)(s.h3,{id:"4-mocks",children:"4. Mocks"}),"\n",(0,o.jsxs)(s.p,{children:["A veces no quieres usar funciones reales (por ejemplo, llamadas a una API). Para eso est\xe1n los ",(0,o.jsx)(s.em,{children:"mocks"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:"// Creamos una funci\xf3n \"falsa\" (mock) con Jest.\n// jest.fn() nos da una funci\xf3n vac\xeda que podemos usar para pruebas.\nconst fakeFn = jest.fn();\n\n// Llamamos a la funci\xf3n falsa pasando el argumento 'Hola'.\n// Esto queda registrado dentro del mock (Jest guarda cada vez que se llam\xf3 y con qu\xe9 argumentos).\nfakeFn(\"Hola\");\n\n// Verificamos que la funci\xf3n haya sido llamada al menos una vez.\n// Si nunca la hubi\xe9ramos ejecutado, este test fallar\xeda.\nexpect(fakeFn).toHaveBeenCalled();\n\n// Verificamos que la funci\xf3n haya sido llamada espec\xedficamente con el argumento 'Hola'.\n// Si la llamamos con otro valor (ej: 'Chao'), este test fallar\xeda.\nexpect(fakeFn).toHaveBeenCalledWith(\"Hola\");\n"})}),"\n",(0,o.jsx)(s.p,{children:"Ejemplo con un m\xf3dulo:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'// Le decimos a Jest que "mockee" (simule) el m\xf3dulo \'./api\'.\n// Eso significa que en lugar de usar las funciones reales de ese archivo,\n// Jest crear\xe1 versiones falsas (mocks) que podemos controlar.\njest.mock("./api");\n\n// Importamos el m\xf3dulo \'api\'. Como ya lo mockeamos arriba,\n// lo que recibimos aqu\xed son esas funciones simuladas.\nconst api = require("./api");\n\ntest("usa el mock", () => {\n  // Configuramos el mock para que, cuando alguien llame a api.getData(),\n  // no ejecute la l\xf3gica real, sino que devuelva una promesa resuelta con "dato falso".\n  api.getData.mockResolvedValue("dato falso");\n\n  // Llamamos a la funci\xf3n simulada (api.getData()).\n  // Como es un mock configurado, devolver\xe1 la promesa con "dato falso".\n  return api.getData().then((data) => {\n    // Aqu\xed comprobamos que el valor devuelto efectivamente sea "dato falso".\n    expect(data).toBe("dato falso");\n  });\n});\n'})}),"\n",(0,o.jsx)(s.h2,{id:"tests-as\xedncronos",children:"Tests as\xedncronos"}),"\n",(0,o.jsxs)(s.p,{children:["El mundo real est\xe1 lleno de cosas as\xedncronas (APIs, llamadas a bases de datos, timers, etc.).",(0,o.jsx)(s.br,{}),"\n","En Jest hay varias formas de testear c\xf3digo as\xedncrono: con ",(0,o.jsx)(s.strong,{children:"callbacks"}),", con ",(0,o.jsx)(s.strong,{children:"promesas"})," y con ",(0,o.jsx)(s.strong,{children:"async/await"}),"."]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"1-con-callbacks",children:"1. Con Callbacks"}),"\n",(0,o.jsxs)(s.p,{children:["Algunas funciones no devuelven promesas, sino que usan un ",(0,o.jsx)(s.strong,{children:"callback"})," para entregar el resultado.",(0,o.jsx)(s.br,{}),"\n","En Jest, para estos casos se usa el par\xe1metro especial ",(0,o.jsx)(s.code,{children:"done"}),", que le dice a Jest cu\xe1ndo terminar el test:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'function fetchDataCallback(callback) {\n  setTimeout(() => {\n    callback("datos");\n  }, 100);\n}\n\ntest(\'fetchDataCallback devuelve "datos" usando callback\', (done) => {\n  fetchDataCallback((data) => {\n    expect(data).toBe("datos");\n    done(); // Le decimos a Jest que ya puede dar el test como terminado\n  });\n});\n'})}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"2-con-promesas",children:"2. Con Promesas"}),"\n",(0,o.jsxs)(s.p,{children:["Si la funci\xf3n devuelve una ",(0,o.jsx)(s.strong,{children:"Promise"}),", podemos devolverla directamente en el test.",(0,o.jsx)(s.br,{}),"\n","Jest esperar\xe1 a que se resuelva antes de dar el test como terminado:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'function fetchDataPromise() {\n  return Promise.resolve("datos");\n}\n\ntest(\'fetchDataPromise devuelve "datos" con promesa\', () => {\n  return fetchDataPromise().then((data) => {\n    expect(data).toBe("datos");\n  });\n});\n'})}),"\n",(0,o.jsxs)(s.p,{children:["Tambi\xe9n puedes testear que una promesa falle usando ",(0,o.jsx)(s.code,{children:".catch"})," o el matcher ",(0,o.jsx)(s.code,{children:"rejects"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'function fetchDataError() {\n  return Promise.reject("error");\n}\n\ntest(\'fetchDataPromise rechaza con "error"\', () => {\n  return expect(fetchDataError()).rejects.toBe("error");\n});\n'})}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"3-con-asyncawait-lo-m\xe1s-limpio-",children:"3. Con Async/Await (lo m\xe1s limpio \u2728)"}),"\n",(0,o.jsxs)(s.p,{children:["La forma m\xe1s moderna y clara es usar ",(0,o.jsx)(s.strong,{children:"async/await"}),".",(0,o.jsx)(s.br,{}),"\n","Solo marcas el test como ",(0,o.jsx)(s.code,{children:"async"})," y usas ",(0,o.jsx)(s.code,{children:"await"})," para esperar el resultado:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'function fetchDataAsync() {\n  return Promise.resolve("datos");\n}\n\ntest(\'fetchDataAsync devuelve "datos" con async/await\', async () => {\n  const data = await fetchDataAsync();\n  expect(data).toBe("datos");\n});\n'})}),"\n",(0,o.jsxs)(s.p,{children:["Y para errores, simplemente usas ",(0,o.jsx)(s.code,{children:"try/catch"})," o el matcher ",(0,o.jsx)(s.code,{children:"rejects"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'async function fetchDataAsyncError() {\n  throw new Error("error");\n}\n\ntest("fetchDataAsync lanza error", async () => {\n  await expect(fetchDataAsyncError()).rejects.toThrow("error");\n});\n'})}),"\n",(0,o.jsx)(s.p,{children:"En resumen:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Callbacks"})," \u2192 usa ",(0,o.jsx)(s.code,{children:"done()"})," para indicar cu\xe1ndo termin\xf3 el test."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Promesas"})," \u2192 devuelve la promesa en el test."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Async/Await"})," \u2192 m\xe1s legible; usa ",(0,o.jsx)(s.code,{children:"await"})," y ",(0,o.jsx)(s.code,{children:"rejects"}),"."]}),"\n"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"pr\xe1cticas-recomendadas",children:"Pr\xe1cticas recomendadas"}),"\n",(0,o.jsxs)(s.p,{children:["A veces no quieres correr ",(0,o.jsx)(s.strong,{children:"todos"})," los tests, solo enfocarte en uno en\nparticular (porque el bug anda escondido ah\xed \ud83d\udc40).",(0,o.jsx)(s.br,{}),"\n","Para eso Jest te da dos s\xfaperpoderes:"]}),"\n",(0,o.jsx)(s.h3,{id:"testonly",children:(0,o.jsx)(s.code,{children:"test.only(...)"})}),"\n",(0,o.jsx)(s.p,{children:"Corre \xfanicamente ese test y se olvida de los dem\xe1s. \xdatil cuando est\xe1s\ndepurando un caso espec\xedfico."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'test.only("suma correctamente 2 + 2", () => {\n  expect(2 + 2).toBe(4);\n});\n\ntest("este test se ignora temporalmente", () => {\n  expect(true).toBe(false);\n});\n'})}),"\n",(0,o.jsx)(s.p,{children:"En este ejemplo, solo el primer test se ejecutar\xe1."}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h3,{id:"testskip",children:(0,o.jsx)(s.code,{children:"test.skip(...)"})}),"\n",(0,o.jsx)(s.p,{children:"Salta un test que no quieres ejecutar en ese momento (por ejemplo,\nporque a\xfan no est\xe1 listo o depende de algo externo)."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'test.skip("esto lo haremos despu\xe9s", () => {\n  expect("hola").toBe("adi\xf3s");\n});\n'})}),"\n",(0,o.jsxs)(s.p,{children:["El test queda marcado como ",(0,o.jsx)(s.em,{children:"skipped"}),", as\xed no molesta en los resultados."]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsxs)(s.h3,{id:"describeonly-y-describeskip",children:[(0,o.jsx)(s.code,{children:"describe.only"})," y ",(0,o.jsx)(s.code,{children:"describe.skip"})]}),"\n",(0,o.jsxs)(s.p,{children:["Los bloques ",(0,o.jsx)(s.code,{children:"describe"})," sirven para agrupar tests, s\xed. Pero tambi\xe9n tienen ",(0,o.jsx)(s.code,{children:".only"}),"\ny ",(0,o.jsx)(s.code,{children:".skip"})," para controlar qu\xe9 conjuntos de pruebas se ejecutan."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'describe.only("grupo especial", () => {\n  test("ejecuta este", () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  test("tambi\xe9n este", () => {\n    expect(2 * 2).toBe(4);\n  });\n});\n\ndescribe.skip("grupo en pausa", () => {\n  test("ignorado", () => {\n    expect(true).toBe(false);\n  });\n});\n'})}),"\n",(0,o.jsx)(s.p,{children:"Con esto, puedes depurar solo un bloque de pruebas y dejar otros en\npausa sin borrarlos."}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"cobertura-de-c\xf3digo",children:"Cobertura de c\xf3digo"}),"\n",(0,o.jsxs)(s.p,{children:["La ",(0,o.jsx)(s.strong,{children:"cobertura de c\xf3digo"})," mide qu\xe9 tanto de tu c\xf3digo est\xe1 siendo probado por tus tests.",(0,o.jsx)(s.br,{}),"\n","Jest trae esta funcionalidad integrada y es muy f\xe1cil de usar."]}),"\n",(0,o.jsx)(s.p,{children:"Para generar un reporte de cobertura, simplemente corre:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"npm test -- --coverage\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Esto mostrar\xe1 en consola qu\xe9 porcentaje de tu c\xf3digo est\xe1 cubierto por tests (l\xedneas, funciones, ramas, etc.).",(0,o.jsx)(s.br,{}),"\n","Adem\xe1s, Jest generar\xe1 una carpeta llamada ",(0,o.jsx)(s.code,{children:"coverage"})," con un reporte en ",(0,o.jsx)(s.strong,{children:"HTML"})," que puedes abrir en tu navegador con el ",(0,o.jsx)(s.code,{children:"index.html"}),"."]}),"\n",(0,o.jsx)(s.p,{children:"\ud83d\udc49 Ejemplo de salida en consola:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:"File        | % Stmts | % Branch | % Funcs | % Lines\n------------|---------|----------|---------|---------\nAll files   |   85.71 |    75    |   80    |   85.71\n"})}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"consejos-finales",children:"Consejos finales"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Empieza simple"}),": no necesitas testear todo de una vez. Ve agregando pruebas poco a poco."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Usa nombres claros en tus tests"})," : deben explicar lo que esperas que suceda."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Conf\xeda en los mocks cuando trabajes con APIs o recursos externos"})," : te dan control y velocidad."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"No te obsesiones con el 100% de cobertura"}),": es una m\xe9trica \xfatil, pero lo importante es la calidad de los tests."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"Integra los tests en tu flujo diario"}),": correrlos seguido evita sorpresas desagradables m\xe1s adelante."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.strong,{children:"No pruebes cosas obvias"}),": como por ejemplo ",(0,o.jsx)(s.code,{children:"expect(true).toBe(true)"}),"."]}),"\n"]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"recursos-adicionales-",children:"Recursos adicionales \ud83d\udcda"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://jestjs.io/docs/getting-started",children:"Documentaci\xf3n oficial de\nJest"})}),"\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://devhints.io/jest",children:"Cheatsheet r\xe1pida de Jest"})}),"\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://github.com/facebook/jest/tree/main/examples",children:"Ejemplos pr\xe1cticos en el\nGitHub de Jest"})}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var a=n(6540);const o={},r=a.createContext(o);function t(e){const s=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);