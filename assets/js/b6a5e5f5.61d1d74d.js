"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1800],{4311:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"disenando-con-algoritmos/semana-6/intro-ts","title":"Typescript","description":"\xa1Hola! Si has llegado hasta aqu\xed, probablemente ya conoces la libertad (y a veces el caos) que puede ofrecer JavaScript. Aqu\xed es cuando entra TypeScript para dale un poco de orden a esa libertad.","source":"@site/docs/disenando-con-algoritmos/semana-6/intro-ts.md","sourceDirName":"disenando-con-algoritmos/semana-6","slug":"/disenando-con-algoritmos/semana-6/intro-ts","permalink":"/docs/disenando-con-algoritmos/semana-6/intro-ts","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/disenando-con-algoritmos/semana-6/intro-ts.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"S6 - Typescript","permalink":"/docs/category/s6---typescript"},"next":{"title":"Ejercicios de Typescript","permalink":"/docs/disenando-con-algoritmos/semana-6/ts-exercises"}}');var i=s(4848),a=s(8453);const o={sidebar_position:1},c="Typescript",l={},t=[{value:"1. \xbfPor qu\xe9 usar TypeScript?",id:"1-por-qu\xe9-usar-typescript",level:2},{value:"2. Instalaci\xf3n y configuraci\xf3n b\xe1sica",id:"2-instalaci\xf3n-y-configuraci\xf3n-b\xe1sica",level:2},{value:"2.1 Instalaci\xf3n global",id:"21-instalaci\xf3n-global",level:3},{value:"2.2 Inicializar un proyecto con TypeScript",id:"22-inicializar-un-proyecto-con-typescript",level:3},{value:"2.3 Compilar y ejecutar",id:"23-compilar-y-ejecutar",level:3},{value:"3. Tipos b\xe1sicos en TypeScript",id:"3-tipos-b\xe1sicos-en-typescript",level:2},{value:"4. Funciones en TypeScript",id:"4-funciones-en-typescript",level:2},{value:"5. Interfaces y Objetos",id:"5-interfaces-y-objetos",level:2},{value:"6. Clases en TypeScript",id:"6-clases-en-typescript",level:2},{value:"7. M\xf3dulos en TypeScript",id:"7-m\xf3dulos-en-typescript",level:2},{value:"8. Tipos avanzados",id:"8-tipos-avanzados",level:2},{value:"9. Ejecuci\xf3n en el navegador",id:"9-ejecuci\xf3n-en-el-navegador",level:2},{value:"10. Interface vs Type Alias",id:"10-interface-vs-type-alias",level:2},{value:"Ejemplo: Algo que se puede hacer con <code>type</code> pero no con <code>interface</code>",id:"ejemplo-algo-que-se-puede-hacer-con-type-pero-no-con-interface",level:3},{value:"11. Recomendaciones",id:"11-recomendaciones",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typescript",children:"Typescript"})}),"\n",(0,i.jsx)(n.p,{children:"\xa1Hola! Si has llegado hasta aqu\xed, probablemente ya conoces la libertad (y a veces el caos) que puede ofrecer JavaScript. Aqu\xed es cuando entra TypeScript para dale un poco de orden a esa libertad."}),"\n",(0,i.jsxs)(n.p,{children:["En esencia, TypeScript es un ",(0,i.jsx)(n.strong,{children:"superset de JavaScript"})," desarrollado por Microsoft que a\xf1ade ",(0,i.jsx)(n.strong,{children:"tipado est\xe1tico"})," y otras caracter\xedsticas modernas para mejorar la calidad, mantenibilidad y escalabilidad del c\xf3digo. Esto significa que ",(0,i.jsx)(n.strong,{children:"todo c\xf3digo JavaScript v\xe1lido es tambi\xe9n v\xe1lido en TypeScript"}),", pero adem\xe1s TypeScript ofrece herramientas adicionales."]}),"\n",(0,i.jsx)(n.h2,{id:"1-por-qu\xe9-usar-typescript",children:"1. \xbfPor qu\xe9 usar TypeScript?"}),"\n",(0,i.jsxs)(n.p,{children:["JavaScript es un lenguaje flexible y din\xe1mico, pero esa flexibilidad puede llevar a errores dif\xedciles de detectar. TypeScript ayuda a prevenirlos ",(0,i.jsx)(n.strong,{children:"antes de ejecutar el c\xf3digo"})," gracias al tipado est\xe1tico y a herramientas de desarrollo m\xe1s potentes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ventajas principales:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tipado est\xe1tico"}),": Evita errores comunes de tipo en tiempo de desarrollo"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mejor experiencia de desarrollo"}),": Autocompletado inteligente, refactoring seguro y navegaci\xf3n de c\xf3digo"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Detecci\xf3n temprana de errores"}),": Los errores se detectan durante la compilaci\xf3n, no en producci\xf3n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compatibilidad moderna"}),": Uso de caracter\xedsticas modernas de JavaScript con transpilaci\xf3n autom\xe1tica"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Escalabilidad"}),": Ideal para proyectos grandes y equipos de desarrollo"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentaci\xf3n viviente"}),": Los tipos sirven como documentaci\xf3n del c\xf3digo"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ejemplo de problema en JavaScript:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'function sumar(a, b) {\n  return a + b;\n}\n\nconsole.log(sumar(5, "10")); // Resultado: "510"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mismo ejemplo en TypeScript:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"function sumar(a: number, b: number): number {\n  return a + b;\n}\n\n// console.log(sumar(5, \"10\")); // Error: Argument of type 'string' is not assignable to parameter of type 'number'.\nconsole.log(sumar(5, 10)); // 15\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-instalaci\xf3n-y-configuraci\xf3n-b\xe1sica",children:"2. Instalaci\xf3n y configuraci\xf3n b\xe1sica"}),"\n",(0,i.jsx)(n.h3,{id:"21-instalaci\xf3n-global",children:"2.1 Instalaci\xf3n global"}),"\n",(0,i.jsxs)(n.p,{children:["Inicialmente necesitas tener ",(0,i.jsx)(n.strong,{children:"Node.js y npm"})," instalados. Luego de eso, escribe en la terminal:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install -g typescript\n"})}),"\n",(0,i.jsx)(n.p,{children:"Verifica que est\xe1 instalado con:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"tsc -v\n"})}),"\n",(0,i.jsx)(n.h3,{id:"22-inicializar-un-proyecto-con-typescript",children:"2.2 Inicializar un proyecto con TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"Antes de escribir c\xf3digo, necesitamos preparar el proyecto. Con estos comandos crear\xe1s la carpeta, instalar\xe1s TypeScript:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir proyecto-ts\ncd proyecto-ts\nnpm init -y\nnpm install typescript --save-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Con esta linea de c\xf3digo crear\xe1s el archivo de configuraci\xf3n ",(0,i.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"  npx tsc --init\n"})}),"\n",(0,i.jsx)(n.p,{children:"Esto genera el archivo tsconfig.json con muchas opciones comentadas. Las opciones m\xe1s \xfatiles para empezar:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "es6", // Versi\xf3n de JS a generar\n    "module": "commonjs", // Sistema de m\xf3dulos\n    "outDir": "./dist", // Carpeta de salida\n    "rootDir": "./src", // Carpeta de c\xf3digo fuente\n    "strict": true, // Habilitar todas las comprobaciones estrictas\n    "esModuleInterop": true // Mejor compatibilidad con m\xf3dulos\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Estructura recomendada del proyecto:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"proyecto-ts/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 dist/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,i.jsx)(n.h3,{id:"23-compilar-y-ejecutar",children:"2.3 Compilar y ejecutar"}),"\n",(0,i.jsx)(n.p,{children:"Una vez tengas tu c\xf3digo en TypeScript, necesitas transformarlo a JavaScript para que pueda correr en Node. Para compilar debes escribir esto:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx tsc\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Esto convierte tus archivos ",(0,i.jsx)(n.code,{children:".ts"})," en archivos ",(0,i.jsx)(n.code,{children:".js"})," dentro de la carpeta ",(0,i.jsx)(n.code,{children:"dist/"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Para ejecutar:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"node dist/index.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Si prefieres evitar la compilaci\xf3n previa y correr TypeScript directamente, podemos usar ",(0,i.jsx)(n.code,{children:"ts-node"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install -D ts-node\nnpx ts-node src/index.ts\n"})}),"\n",(0,i.jsx)(n.p,{children:"De esta forma podr\xe1s probar tu c\xf3digo en un solo paso, ideal mientras aprendes o desarrollas r\xe1pido."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-tipos-b\xe1sicos-en-typescript",children:"3. Tipos b\xe1sicos en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"TypeScript a\xf1ade tipos est\xe1ticos que permiten definir qu\xe9 tipo de dato esperamos."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let nombre: string = "Kevin";\nlet edad: number = 25;\nlet activo: boolean = true;\nlet indefinido: undefined = undefined;\nlet nulo: null = null;\nlet cualquiera: any = "Hola"; // Evitar en lo posible\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Arreglos:"})}),"\n",(0,i.jsx)(n.p,{children:"En TypeScript tambi\xe9n podemos indicar qu\xe9 tipo de datos contendr\xe1 un arreglo."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let numeros: number[] = [1, 2, 3];\nlet letras: Array<string> = ["a", "b", "c"];\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tuplas:"})}),"\n",(0,i.jsx)(n.p,{children:"Una tupla es como un arreglo con un n\xfamero fijo de posiciones y tipos ya definidos. Aqu\xed TypeScript sabe que el primer valor debe ser texto y el segundo un n\xfamero."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let persona: [string, number] = ["Kevin", 25];\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Enums:"})}),"\n",(0,i.jsx)(n.p,{children:"Los enums permiten dar nombres m\xe1s claros a un conjunto de valores. Son \xfatiles para evitar usar valores \u201cm\xe1gicos\u201d en el c\xf3digo y mantener todo m\xe1s legible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'enum Color {\n  Rojo = "ROJO",\n  Verde = "VERDE",\n  Azul = "AZUL",\n}\n\nlet colorFav: Color = Color.Verde;\nconsole.log(colorFav); // "VERDE"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Union types:"})}),"\n",(0,i.jsxs)(n.p,{children:["A veces una variable puede ser de m\xe1s de un tipo. Con ",(0,i.jsx)(n.code,{children:"|"})," le decimos a TypeScript que acepte varias opciones."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let id: string | number;\nid = "ABC123";\nid = 42;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Type aliases:"})}),"\n",(0,i.jsx)(n.p,{children:"Para no repetirnos, podemos crear un nombre que represente esa uni\xf3n de tipos y reutilizarlo en cualquier parte."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type ID = string | number;\nlet usuarioID: ID = 101;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-funciones-en-typescript",children:"4. Funciones en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"En TypeScript tambi\xe9n podemos especificar los tipos de los par\xe1metros y del valor que devuelve una funci\xf3n. Esto evita errores y hace el c\xf3digo m\xe1s f\xe1cil de entender."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'function saludar(nombre: string): string {\n  return `Hola, ${nombre}`;\n}\n\nconsole.log(saludar("Kevin")); // "Hola, Kevin"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Par\xe1metros opcionales y valores por defecto"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Un par\xe1metro por defecto tiene un valor asignado si no se pasa nada."}),"\n",(0,i.jsxs)(n.li,{children:["Un par\xe1metro opcional (con ",(0,i.jsx)(n.code,{children:"?"}),") puede omitirse."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'function multiplicar(a: number, b: number = 2, mensaje?: string): number {\n  if (mensaje) console.log(mensaje);\n  return a * b;\n}\n\nconsole.log(multiplicar(3)); // usa b = 2 \u2192 6\nconsole.log(multiplicar(3, 4, "Calculando...")); // muestra mensaje \u2192 12\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Funciones flecha"})}),"\n",(0,i.jsx)(n.p,{children:"Las funciones flecha son una forma m\xe1s corta de escribir funciones y tambi\xe9n se pueden tipar."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const dividir = (a: number, b: number): number => a / b;\n\nconsole.log(dividir(10, 2)); // 5\n"})}),"\n",(0,i.jsx)(n.p,{children:"La clave es que, al tipar funciones, siempre sabes qu\xe9 esperas recibir y qu\xe9 vas a devolver, lo que da seguridad y orden al c\xf3digo."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-interfaces-y-objetos",children:"5. Interfaces y Objetos"}),"\n",(0,i.jsx)(n.p,{children:"En TypeScript, una interface sirve para describir la forma que debe tener un objeto: qu\xe9 propiedades tiene, de qu\xe9 tipo son y si alguna es opcional. Esto ayuda a mantener el c\xf3digo consistente y f\xe1cil de entender."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'interface Usuario {\n  id: number;\n  nombre: string;\n  activo?: boolean; // dato opcional\n}\n\nlet user1: Usuario = {\n  id: 1,\n  nombre: "Kevin",\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Aqu\xed ",(0,i.jsx)(n.code,{children:"user1"})," debe cumplir con la estructura definida en Usuario. Si intentamos agregar un dato que no existe en la interfaz, TypeScript nos avisar\xe1."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Interfaces con funciones:"})}),"\n",(0,i.jsx)(n.p,{children:"Las interfaces no solo sirven para objetos, tambi\xe9n pueden usarse para definir la firma de una funci\xf3n, es decir, los par\xe1metros que recibe y lo que devuelve."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Operacion {\n  (a: number, b: number): number;\n}\n\nconst sumar: Operacion = (x, y) => x + y;\nconsole.log(sumar(5, 3));\n"})}),"\n",(0,i.jsx)(n.p,{children:"De esta manera, nos aseguramos de que cualquier funci\xf3n que usemos como Operacion reciba dos n\xfameros y devuelva un n\xfamero."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-clases-en-typescript",children:"6. Clases en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"En TypeScript, las clases funcionan de forma similar a otros lenguajes orientados a objetos: son plantillas para crear objetos con propiedades y m\xe9todos."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'class Persona {\n  private nombre: string; // solo accesible dentro de la clase\n  protected edad: number; // accesible en esta clase y en clases hijas\n  public activo: boolean; // accesible desde cualquier parte\n\n  constructor(nombre: string, edad: number, activo: boolean) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.activo = activo;\n  }\n\n  saludar(): string {\n    return `Hola, soy ${this.nombre}`;\n  }\n}\n\nconst p1 = new Persona("Kevin", 25, true);\nconsole.log(p1.saludar()); // "Hola, soy Kevin"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Aqu\xed vemos tres modificadores de acceso:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"private"})," \u2192 solo dentro de la misma clase."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"protected"})," \u2192 dentro de la clase y sus herederas."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"public"})," \u2192 disponible en todas partes (valor por defecto)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Herencia:"})}),"\n",(0,i.jsx)(n.p,{children:"Las clases pueden extenderse para crear nuevas con propiedades o comportamientos adicionales."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'class Estudiante extends Persona {\n  curso: string;\n\n  constructor(nombre: string, edad: number, activo: boolean, curso: string) {\n    super(nombre, edad, activo); // llama al constructor de Persona\n    this.curso = curso;\n  }\n}\n\nconst e1 = new Estudiante("Sof\xeda", 22, true, "TypeScript b\xe1sico");\nconsole.log(e1.saludar()); // Hereda m\xe9todo de Persona\nconsole.log(e1.curso); // Propiedad propia de Estudiante\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As\xed, ",(0,i.jsx)(n.code,{children:"Estudiante"})," hereda lo de ",(0,i.jsx)(n.code,{children:"Persona"}),", pero tambi\xe9n puede tener sus propios datos y m\xe9todo"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-m\xf3dulos-en-typescript",children:"7. M\xf3dulos en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"Cuando tu proyecto crece, no es buena idea meter todo el c\xf3digo en un solo archivo. Los m\xf3dulos te permiten separar tu c\xf3digo en partes m\xe1s peque\xf1as y reutilizables."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exportar:"})}),"\n",(0,i.jsx)(n.p,{children:"Si quieres que algo est\xe9 disponible fuera de un archivo, debes exportarlo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// archivo: utils.ts\nexport function sumar(a: number, b: number): number {\n  return a + b;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Aqu\xed la funci\xf3n ",(0,i.jsx)(n.code,{children:"sumar"})," queda lista para ser usada en otros archivos."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Importar:"})}),"\n",(0,i.jsx)(n.p,{children:"Para usar lo que exportaste, necesitas importarlo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// archivo: index.ts\nimport { sumar } from "./utils";\nconsole.log(sumar(3, 4));\n'})}),"\n",(0,i.jsx)(n.p,{children:"Piensa en los m\xf3dulos como \u201ccajitas\u201d de c\xf3digo que puedes reutilizar luego. Esto mantiene tu proyecto organizado, f\xe1cil de mantener y escalable."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-tipos-avanzados",children:"8. Tipos avanzados"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Generics:"})}),"\n",(0,i.jsxs)(n.p,{children:["Los gen\xe9ricos as\xed como en Java nos permiten crear funciones y clases que pueden trabajar con diferentes tipos de datos sin perder la seguridad de tipos.\nEn ellos especificaremos un tipo gen\xe9rico denotado por ",(0,i.jsx)(n.code,{children:"<T>"})," el cual podemos usar en lugar de un tipo espec\xedfico."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'function identidad<T>(valor: T): T {\n  return valor;\n}\n\nconsole.log(identidad<string>("Hola"));\nconsole.log(identidad<number>(123));\n'})}),"\n",(0,i.jsxs)(n.p,{children:["El ejemplo anterior muestra una funci\xf3n que recibe un valor de tipo gen\xe9rico ",(0,i.jsx)(n.code,{children:"T"})," y lo retorna sin modificarlo. Esto permite que la funci\xf3n sea flexible y reutilizable con diferentes tipos de datos."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Intersection types:"})}),"\n",(0,i.jsx)(n.p,{children:"Estos tipos permiten combinar m\xfaltiples tipos en uno solo, creando un nuevo tipo que tiene todas las propiedades de los tipos combinados."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'interface A {\n  a: string;\n}\ninterface B {\n  b: number;\n}\n// Lo mismo que interface C { a: string; b: number; }\n\ntype AB = A & B;\nlet obj: AB = { a: "Hola", b: 42 };\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"9-ejecuci\xf3n-en-el-navegador",children:"9. Ejecuci\xf3n en el navegador"}),"\n",(0,i.jsxs)(n.p,{children:["TypeScript no se entiende directamente con el navegador, porque este solo sabe leer JavaScript.\nPor eso, primero necesitamos compilar nuestros archivos ",(0,i.jsx)(n.code,{children:".ts"})," a ",(0,i.jsx)(n.code,{children:".js"}),", y luego incluirlos en el HTML."]}),"\n",(0,i.jsx)(n.p,{children:"El flujo es simple:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Escribes en TypeScript"}),"\n",(0,i.jsxs)(n.li,{children:["Lo compilas con ",(0,i.jsx)(n.code,{children:"tsc"})]}),"\n",(0,i.jsx)(n.li,{children:"Cargas el archivo compilado .js en tu HTML."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// src/app.ts\nconst mensaje: string = "Hola desde TS";\nconsole.log(mensaje);\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'\x3c!-- index.html --\x3e\n<script src="dist/app.js"><\/script>\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"10-interface-vs-type-alias",children:"10. Interface vs Type Alias"}),"\n",(0,i.jsxs)(n.p,{children:["En TypeScript, tanto ",(0,i.jsx)(n.strong,{children:"interfaces"})," como ",(0,i.jsx)(n.strong,{children:"type aliases"})," se usan para definir tipos, pero cada uno brilla en escenarios distintos."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ideales para describir la forma de un objeto."}),"\n",(0,i.jsx)(n.li,{children:"Se pueden extender (herencia de interfaces)."}),"\n",(0,i.jsx)(n.li,{children:"Muy \xfatiles cuando quieres definir contratos claros entre distintas partes del c\xf3digo."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Usuario {\n  id: number;\n  nombre: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Piensa en una interface como un molde que describe c\xf3mo debe verse un objeto."})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type Aliases"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"M\xe1s flexibles: permiten definir uniones, tuplas y hasta tipos primitivos."}),"\n",(0,i.jsx)(n.li,{children:"No pueden extenderse igual que las interfaces."}),"\n",(0,i.jsx)(n.li,{children:"Perfectos cuando necesitas tipos que no son solo objetos."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"type ID = string | number;\ntype Usuario = {\n  id: ID;\n  nombre: string;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Un type alias es como un atajo: le das un nombre a un tipo (simple o complejo) para reutilizarlo."})}),"\n",(0,i.jsxs)(n.h3,{id:"ejemplo-algo-que-se-puede-hacer-con-type-pero-no-con-interface",children:["Ejemplo: Algo que se puede hacer con ",(0,i.jsx)(n.code,{children:"type"})," pero no con ",(0,i.jsx)(n.code,{children:"interface"})]}),"\n",(0,i.jsxs)(n.p,{children:["Los ",(0,i.jsx)(n.code,{children:"type aliases"})," permiten definir uniones de tipos, algo que no es posible directamente con ",(0,i.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'type Resultado = string | number;\n\nlet respuesta: Resultado;\nrespuesta = "\xc9xito";\nrespuesta = 42;\n\n// Esto no se puede hacer con `interface`.\n'})}),"\n",(0,i.jsxs)(n.p,{children:["En este caso, ",(0,i.jsx)(n.code,{children:"Resultado"})," puede ser un ",(0,i.jsx)(n.code,{children:"string"})," o un ",(0,i.jsx)(n.code,{children:"number"}),", lo que lo hace m\xe1s flexible para ciertos escenarios. Las interfaces, por otro lado, est\xe1n dise\xf1adas para describir la forma de objetos y no soportan uniones de tipos."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"11-recomendaciones",children:"11. Recomendaciones"}),"\n",(0,i.jsx)(n.p,{children:"Para sacarle el m\xe1ximo provecho a TypeScript, ten en cuenta estas buenas pr\xe1cticas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Activa ",(0,i.jsx)(n.code,{children:'"strict": true'})," en tu ",(0,i.jsx)(n.code,{children:"tsconfig.json"})]})," \u2192 as\xed aprovechas todas las comprobaciones de seguridad."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Evita usar ",(0,i.jsx)(n.code,{children:"any"})]})," \u2192 es como apagar el radar de TypeScript; \xfasalo solo en casos extremos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefiere interfaces y tipos"})," \u2192 definen contratos claros y mantienen tu c\xf3digo ordenado."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Deja que el editor trabaje por ti"})," \u2192 usa el autocompletado y las sugerencias de errores, son tus mejores aliados."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compila seguido"})," \u2192 as\xed detectas problemas cuanto antes, sin sorpresas al final."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"La idea no es escribir m\xe1s c\xf3digo, sino escribir mejor c\xf3digo."})}),"\n",(0,i.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);