"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8336],{1883:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"computacion-3/semana-3/intro-express","title":"Express | Typescript | Mongodb | Docker. Parte 1","description":"Taller guiado para la elaboraci\xf3n de un proyecto base con Mongo DB, Express y Typescript.","source":"@site/docs/computacion-3/semana-3/intro-express.md","sourceDirName":"computacion-3/semana-3","slug":"/computacion-3/semana-3/intro-express","permalink":"/docs/computacion-3/semana-3/intro-express","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-3/semana-3/intro-express.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Ejercicios de Typescript","permalink":"/docs/computacion-3/semana-3/ts-exercises"},"next":{"title":"S4 - Express","permalink":"/docs/category/s4---express"}}');var o=r(4848),a=r(8453);const i={sidebar_position:3},d="Express | Typescript | Mongodb | Docker. Parte 1",c={},l=[{value:"1. \xbfQu\xe9 es express?",id:"1-qu\xe9-es-express",level:2},{value:"2. \xbfPor qu\xe9 usar Express?",id:"2-por-qu\xe9-usar-express",level:2},{value:"3. \xbfPor qu\xe9 usar MongoDB combinado con Express y TS?",id:"3-por-qu\xe9-usar-mongodb-combinado-con-express-y-ts",level:2},{value:"4. Contexto del taller guiado",id:"4-contexto-del-taller-guiado",level:2},{value:"5. Configuraci\xf3n del entorno de desarrollo",id:"5-configuraci\xf3n-del-entorno-de-desarrollo",level:2},{value:"5.1. Requisitos previos",id:"51-requisitos-previos",level:3},{value:"5.2 Creaci\xf3n de la base de datos contenerizada",id:"52-creaci\xf3n-de-la-base-de-datos-contenerizada",level:3},{value:"5.3. Configuraci\xf3n del proyecto de Node.js con TypeScript",id:"53-configuraci\xf3n-del-proyecto-de-nodejs-con-typescript",level:3},{value:"5.4. Estructura del proyecto",id:"54-estructura-del-proyecto",level:3},{value:"6. Creaci\xf3n del servidor Express",id:"6-creaci\xf3n-del-servidor-express",level:2},{value:"6.1 Creaci\xf3n del archivo <code>index.ts</code>",id:"61-creaci\xf3n-del-archivo-indexts",level:3},{value:"6.2. Creaci\xf3n del archivo de conexi\xf3n a la base de datos",id:"62-creaci\xf3n-del-archivo-de-conexi\xf3n-a-la-base-de-datos",level:3},{value:"6.3. Ejecutar el servidor",id:"63-ejecutar-el-servidor",level:3},{value:"7. Creaci\xf3n de un modelo de datos",id:"7-creaci\xf3n-de-un-modelo-de-datos",level:2},{value:"7.1 Creaci\xf3n del modelo Usuario",id:"71-creaci\xf3n-del-modelo-usuario",level:3},{value:"7.2 Creaci\xf3n del modelo Games",id:"72-creaci\xf3n-del-modelo-games",level:3},{value:"8. Creaci\xf3n de un servicio para la gesti\xf3n de usuarios",id:"8-creaci\xf3n-de-un-servicio-para-la-gesti\xf3n-de-usuarios",level:2},{value:"8.1 Creaci\xf3n del servicio UserService",id:"81-creaci\xf3n-del-servicio-userservice",level:3},{value:"8.1.1 M\xe9todo create",id:"811-m\xe9todo-create",level:4},{value:"8.1.2 M\xe9todo findByEmail",id:"812-m\xe9todo-findbyemail",level:4},{value:"8.1.3 M\xe9todo update",id:"813-m\xe9todo-update",level:4},{value:"8.1.4 M\xe9todo getAll",id:"814-m\xe9todo-getall",level:4},{value:"8.1.5 M\xe9todo getById",id:"815-m\xe9todo-getbyid",level:4},{value:"9. Creaci\xf3n de un controlador para la gesti\xf3n de usuarios",id:"9-creaci\xf3n-de-un-controlador-para-la-gesti\xf3n-de-usuarios",level:2},{value:"9.1 Creaci\xf3n del controlador UserController",id:"91-creaci\xf3n-del-controlador-usercontroller",level:3},{value:"9.1.1 M\xe9todo create",id:"911-m\xe9todo-create",level:4},{value:"9.1.2 M\xe9todo getAll",id:"912-m\xe9todo-getall",level:4},{value:"9.1.3 M\xe9todo getOne",id:"913-m\xe9todo-getone",level:4},{value:"9.1.4 M\xe9todo update",id:"914-m\xe9todo-update",level:4},{value:"10. Creaci\xf3n de las rutas para los usuarios",id:"10-creaci\xf3n-de-las-rutas-para-los-usuarios",level:2},{value:"10.1 Integraci\xf3n de las rutas en el servidor",id:"101-integraci\xf3n-de-las-rutas-en-el-servidor",level:3},{value:"11. Pruebas de la API",id:"11-pruebas-de-la-api",level:2},{value:"12. Express en Docker",id:"12-express-en-docker",level:2},{value:"13. TO DO",id:"13-to-do",level:2}];function t(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"express--typescript--mongodb--docker-parte-1",children:"Express | Typescript | Mongodb | Docker. Parte 1"})}),"\n",(0,o.jsx)(n.p,{children:"Taller guiado para la elaboraci\xf3n de un proyecto base con Mongo DB, Express y Typescript."}),"\n",(0,o.jsx)(n.h2,{id:"1-qu\xe9-es-express",children:"1. \xbfQu\xe9 es express?"}),"\n",(0,o.jsx)(n.p,{children:"Express es un framework para el entorno de ejecuci\xf3n Node.js que facilita la creaci\xf3n de aplicaciones web y APIs. Este proporciona una serie de caracter\xedsticas y herramientas que simplifican el desarrollo de aplicaciones del lado del servidor sobre todo para el desarrollo de microservicios y APIs RESTful. Algunas de las caracter\xedsticas clave de Express incluyen:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Rutas"}),": Permite definir rutas para manejar diferentes solicitudes HTTP (GET, POST, PUT, DELETE, etc.) y asociarlas con funciones espec\xedficas."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Middleware"}),": Soporta el uso de middleware, que son funciones que se ejecutan durante el ciclo de vida de una solicitud. Esto permite agregar funcionalidades como autenticaci\xf3n, manejo de errores, an\xe1lisis de cuerpos de solicitudes, etc."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Plantillas"}),": Facilita la integraci\xf3n con motores de plantillas para generar contenido HTML din\xe1mico."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Manejo de errores"}),": Proporciona un sistema para manejar errores de manera eficiente."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Extensibilidad"}),": Permite la integraci\xf3n con una amplia variedad de m\xf3dulos y paquetes de Node.js para ampliar sus funcionalidades."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Proveniendo de antiguos desarrollos y aprendizajes del curso de Computaci\xf3n en Internet 2, encontrar\xe1s bastantes similitudes con Express y el framework de Backend Spring, por lo que para ayudarte en tu proceso de entender el funcionamiento de Express, realizar\xe9 algunas semejanzas con lo que ya conoces."}),"\n",(0,o.jsx)(n.h2,{id:"2-por-qu\xe9-usar-express",children:"2. \xbfPor qu\xe9 usar Express?"}),"\n",(0,o.jsx)(n.p,{children:"Express es una opci\xf3n popular para el desarrollo de aplicaciones web y APIs por varias razones:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicidad y flexibilidad"}),": Express es minimalista y no impone una estructura r\xedgida, lo que permite a los desarrolladores tener un control total sobre la arquitectura de su aplicaci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ecosistema"}),": Al ser uno de los frameworks m\xe1s populares para Node.js, cuenta con una gran cantidad de m\xf3dulos y paquetes disponibles que pueden integrarse f\xe1cilmente, dentro de esta gu\xeda se revisar\xe1n algunos de ellos o ser\xe1n adicionados en pr\xf3ximas sesiones."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Rendimiento"}),": Express es conocido por su rendimiento eficiente, lo que lo hace adecuado para aplicaciones de alta concurrencia (aunque no es tan robusto como otros frameworks m\xe1s pesados como Spring)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Comunidad activa"}),": Cuenta con una comunidad grande y activa que contribuye con documentaci\xf3n, tutoriales y soporte, lo que facilita la resoluci\xf3n de problemas y el aprendizaje."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compatibilidad con JavaScript/TypeScript"}),": Al estar basado en Node.js, Express permite a los desarrolladores usar JavaScript o TypeScript tanto en el frontend como en el backend, lo que puede simplificar el desarrollo y la colaboraci\xf3n entre equipos."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"3-por-qu\xe9-usar-mongodb-combinado-con-express-y-ts",children:"3. \xbfPor qu\xe9 usar MongoDB combinado con Express y TS?"}),"\n",(0,o.jsx)(n.p,{children:"Siguiendo los stack de desarrollo m\xe1s populares, el stack MERN (MongoDB, Express, React, Node.js) es ampliamente utilizado para construir aplicaciones web modernas. MongoDB es una base de datos NoSQL que se integra bien con Express y Node.js debido a su naturaleza flexible y escalable."}),"\n",(0,o.jsx)("img",{src:"/img/mern.png",alt:"MERN Stack",width:"800"}),"\n",(0,o.jsx)(n.h2,{id:"4-contexto-del-taller-guiado",children:"4. Contexto del taller guiado"}),"\n",(0,o.jsx)(n.p,{children:"Los juegos de mesa han sido unas de las actividades m\xe1s populares que he podido experimentar en los \xfaltimos a\xf1os, me han permitido conocer nuevas formas de ver el mundo y relacionarme con personas. No obstante, he notado que no existen aplicaciones modernas que hablen sobre ellos y generen comunidad, es por eso que a modo de taller guiado, desarrollaremos una aplicaci\xf3n b\xe1sica que permita a los usuarios registrarse, iniciar sesi\xf3n y compartir sus juegos de mesa favoritos. La aplicaci\xf3n tendr\xe1 las siguientes caracter\xedsticas:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Registro de usuarios: Los usuarios podr\xe1n crear una cuenta proporcionando su nombre, correo electr\xf3nico y una contrase\xf1a segura."}),"\n",(0,o.jsx)(n.li,{children:"Inicio de sesi\xf3n: Los usuarios podr\xe1n iniciar sesi\xf3n en la aplicaci\xf3n utilizando su correo electr\xf3nico y contrase\xf1a."}),"\n",(0,o.jsx)(n.li,{children:"Gesti\xf3n de juegos de mesa: Los usuarios podr\xe1n agregar, editar y eliminar juegos de mesa."}),"\n",(0,o.jsx)(n.li,{children:"Creaci\xf3n de comentarios: Los usuarios podr\xe1n comentar sobre los juegos de mesa y compartir sus opiniones."}),"\n",(0,o.jsx)(n.li,{children:"Agendar sesiones con ubicaciones y fechas: Los usuarios podr\xe1n agendar sesiones de juego, especificando la ubicaci\xf3n y la fecha del evento."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"5-configuraci\xf3n-del-entorno-de-desarrollo",children:"5. Configuraci\xf3n del entorno de desarrollo"}),"\n",(0,o.jsx)(n.p,{children:"Siguiendo con los temas revisados en el curso, intentar\xe9 que gran parte de la aplicaci\xf3n que desarrollemos en este taller guiado, sea usando las tecnolog\xedas de contenedores provistas por Docker y Docker Compose, para que puedas entender el flujo de trabajo y la importancia de estas tecnolog\xedas en el desarrollo moderno de software. Adem\xe1s de poder migrar y desplegar tus aplicaciones a la nube de manera sencilla."}),"\n",(0,o.jsx)(n.h3,{id:"51-requisitos-previos",children:"5.1. Requisitos previos"}),"\n",(0,o.jsx)(n.p,{children:"Antes de comenzar, aseg\xfarate de tener instalado lo siguiente en tu m\xe1quina:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://nodejs.org/",children:"Node.js"})," (versi\xf3n 22)"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.docker.com/get-started",children:"Docker"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"52-creaci\xf3n-de-la-base-de-datos-contenerizada",children:"5.2 Creaci\xf3n de la base de datos contenerizada"}),"\n",(0,o.jsxs)(n.p,{children:["Para facilitar la creaci\xf3n de la base de datos, usaremos Docker Compose para definir y ejecutar un contenedor de MongoDB. Crea un archivo llamado ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," en la ra\xedz de tu proyecto con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n    mongo:\n        image: mongo:8.0.12\n        container_name: mongo\n        restart: always\n        ports:\n        - "27017:27017"\n        environment:\n            MONGO_INITDB_ROOT_USERNAME: admin\n            MONGO_INITDB_ROOT_PASSWORD: admin123\n            MONGO_INITDB_DATABASE: boardgame-db\n        volumes:\n        - mongo_data:/data/db\n\nvolumes:\nmongo_data:\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este caso usaremos la versi\xf3n 8.0.12 de MongoDB que es de las m\xe1s modernas hasta el momento de escribir esta gu\xeda. El contenedor expondr\xe1 el puerto 27017, que es el puerto predeterminado de MongoDB, y establecer\xe1 un usuario administrador con las credenciales ",(0,o.jsx)(n.code,{children:"admin"})," y ",(0,o.jsx)(n.code,{children:"admin123"}),". Adem\xe1s, se crea un volumen llamado ",(0,o.jsx)(n.code,{children:"mongo_data"})," para persistir los datos de la base de datos."]}),"\n",(0,o.jsx)(n.p,{children:"Podemos ejecutar el contenedor con el siguiente comando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,o.jsx)(n.p,{children:"Esto iniciar\xe1 el contenedor de MongoDB en segundo plano. Puedes verificar que el contenedor est\xe9 funcionando correctamente con el comando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,o.jsx)(n.p,{children:"Deber\xedas ver el contenedor de MongoDB en la lista de contenedores en ejecuci\xf3n."}),"\n",(0,o.jsx)(n.p,{children:"Si deseas detener el contenedor, puedes usar el comando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose down\n"})}),"\n",(0,o.jsx)(n.h3,{id:"53-configuraci\xf3n-del-proyecto-de-nodejs-con-typescript",children:"5.3. Configuraci\xf3n del proyecto de Node.js con TypeScript"}),"\n",(0,o.jsxs)(n.p,{children:["Para comenzar, usaremos el directorio donde creamos el archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," como nuestro directorio de trabajo. Abre una terminal y navega a ese directorio. Luego, ejecuta los siguientes comandos para inicializar un nuevo proyecto de Node.js:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm init -y\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Esto crear\xe1 un archivo ",(0,o.jsx)(n.code,{children:"package.json"})," con la configuraci\xf3n predeterminada del proyecto."]}),"\n",(0,o.jsx)(n.p,{children:"A continuaci\xf3n, instalaremos las dependencias necesarias para nuestro proyecto. Ejecuta el siguiente comando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install express mongoose dotenv cors bcrypt\n"})}),"\n",(0,o.jsx)(n.p,{children:"Ahora, instalaremos TypeScript y las herramientas relacionadas para configurar nuestro proyecto con TypeScript:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev typescript @types/node @types/express @types/bcrypt ts-node nodemon\n"})}),"\n",(0,o.jsx)(n.p,{children:"Luego, inicializa un archivo de configuraci\xf3n de TypeScript ejecutando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npx tsc --init\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Esto generar\xe1 un archivo ",(0,o.jsx)(n.code,{children:"tsconfig.json"})," en tu proyecto. Puedes personalizarlo seg\xfan tus necesidades, pero la configuraci\xf3n predeterminada deber\xeda ser suficiente para comenzar."]}),"\n",(0,o.jsxs)(n.p,{children:["El archivo configuraci\xf3n ",(0,o.jsx)(n.code,{children:"tsconfig.json"})," deber\xeda verse algo as\xed:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  // Visit https://aka.ms/tsconfig to read more about this file\n  "compilerOptions": {\n    // File Layout\n    // "rootDir": "./src",\n    "outDir": "./dist", // Directorio de salida para los archivos compilados\n\n    // Environment Settings\n    // See also https://aka.ms/tsconfig/module\n    "module": "nodenext", //"module": "commonjs"\n    "target": "esnext",  // "target": "es2016"\n    "types": [],\n    // For nodejs:\n    // "lib": ["esnext"],\n    // "types": ["node"],\n    // and npm install -D @types/node\n\n    // Other Outputs\n    "sourceMap": true,\n    "declaration": true,\n    "declarationMap": true,\n\n    // Stricter Typechecking Options\n    "noUncheckedIndexedAccess": true,\n    "exactOptionalPropertyTypes": true,\n\n    // Style Options\n    // "noImplicitReturns": true,\n    // "noImplicitOverride": true,\n    // "noUnusedLocals": true,\n    // "noUnusedParameters": true,\n    // "noFallthroughCasesInSwitch": true,\n    // "noPropertyAccessFromIndexSignature": true,\n\n    // Recommended Options\n    "strict": true,\n    "jsx": "react-jsx",\n    "verbatimModuleSyntax": false,\n    "isolatedModules": true,\n    "noUncheckedSideEffectImports": true,\n    "moduleDetection": "force",\n    "skipLibCheck": true,\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nota:"})," Aseg\xfarate de crear un archivo .gitignore en la ra\xedz de tu proyecto y agregar las siguientes l\xedneas para evitar subir archivos innecesarios al repositorio:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"node_modules/\ndist/\n.env\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Finalmente modificaremos el archivo ",(0,o.jsx)(n.code,{children:"package.json"})," para agregar un script que nos permita ejecutar nuestro proyecto con TypeScript y Nodemon. Agrega lo siguiente en la secci\xf3n de scripts:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"scripts": {\n    "start": "ts-node ./src/index.ts",\n    "dev": "nodemon ./src/index.ts",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  }\n'})}),"\n",(0,o.jsx)(n.p,{children:"Ts-Node nos permitir\xe1 ejecutar archivos TypeScript directamente, mientras que Nodemon reiniciar\xe1 autom\xe1ticamente la aplicaci\xf3n cada vez que detecte cambios en los archivos."}),"\n",(0,o.jsx)(n.h3,{id:"54-estructura-del-proyecto",children:"5.4. Estructura del proyecto"}),"\n",(0,o.jsx)(n.p,{children:"A diferencia de cuando se trabaja con Java / Spring, en Node.js y Express no hay una estructura de proyecto estrictamente definida, pero es recomendable seguir una convenci\xf3n para mantener el c\xf3digo organizado. Una estructura com\xfan para un proyecto Express con TypeScript podr\xeda ser la siguiente:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"compunet3-20252/\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 config/\n\u2502\xa0\xa0 \u251c\u2500\u2500 controllers/\n\u2502\xa0\xa0 \u251c\u2500\u2500 interfaces/\n\u2502\xa0\xa0 \u251c\u2500\u2500 models/\n\u2502\xa0\xa0 \u251c\u2500\u2500 routes/\n\u2502\xa0\xa0 \u2514\u2500\u2500 services/\n\u2502\xa0\xa0 \u2514\u2500\u2500 index.ts\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,o.jsx)(n.p,{children:"Claramente se observa que hay diferencias con la estructura de un proyecto Java, pero la idea es que cada carpeta tenga una responsabilidad espec\xedfica:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"config/"}),": Contiene archivos de configuraci\xf3n, como la conexi\xf3n a la base de datos y variables de entorno."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"controllers/"}),": Contiene los controladores que manejan la l\xf3gica de negocio y las respuestas a las solicitudes HTTP similarmente a los controladores en Spring."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"interfaces/"}),": Define las interfaces de TypeScript para los modelos de datos y otros tipos utilizados en la aplicaci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"models/"}),": Contiene los modelos de datos, que representan las entidades de la aplicaci\xf3n y se comunican con la base de datos."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"routes/"}),": Define las rutas de la aplicaci\xf3n y las asocia con los controladores correspondientes (Puedes relacionarlo con las etiquetas de ",(0,o.jsx)(n.code,{children:"@RequestMapping"})," en Spring)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"services/"}),": Contiene la l\xf3gica de negocio y servicios que interact\xfaan con los modelos y controladores."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"index.ts"}),": El punto de entrada de la aplicaci\xf3n, donde se configura y se inicia el servidor Express."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Adem\xe1s he adicionado un archivo ",(0,o.jsx)(n.code,{children:".env"})," para manejar las variables de entorno, como las credenciales de la base de datos y otras configuraciones sensibles."]}),"\n",(0,o.jsx)(n.h2,{id:"6-creaci\xf3n-del-servidor-express",children:"6. Creaci\xf3n del servidor Express"}),"\n",(0,o.jsxs)(n.h3,{id:"61-creaci\xf3n-del-archivo-indexts",children:["6.1 Creaci\xf3n del archivo ",(0,o.jsx)(n.code,{children:"index.ts"})]}),"\n",(0,o.jsxs)(n.p,{children:["Ahora que tenemos la estructura del proyecto y las dependencias instaladas, vamos a crear el servidor Express. Abre el archivo ",(0,o.jsx)(n.code,{children:"src/index.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import express, { Express, Request, Response } from 'express';\n\nimport { db } from './config/connectionDB'; // A\xfan no est\xe1 creado\n\nconst app: Express = express(); // Creaci\xf3n de una instancia de express\n\nprocess.loadEnvFile(); // Process es un m\xf3dulo de nodejs para manejar el entorno de ejecuci\xf3n, aqu\xed cargamos las variables de entorno desde el archivo .env\n\nconst port = process.env.PORT || 3000; // Definimos el puerto en el que escuchar\xe1 el servidor, si no se especifica en las variables de entorno, usar\xe1 el puerto 3000 por defecto.\n\napp.use(express.json()); // M\xf3dulo de Express para manejar solicitudes JSON\napp.use(express.urlencoded({ extended: true })); // M\xf3dulo de Express para manejar solicitudes URL codificadas\n\napp.get(\"/\", (req: Request, res: Response) => { // Definimos una ruta ra\xedz para probar que el servidor est\xe1 funcionando correctamente.\n    res.send('Hola Mundo');\n});\n\n// Conectamos a la base de datos y luego iniciamos el servidor\ndb.then(() =>\n    app.listen(port, () => {\n        console.log(`Server is running on port ${port}`);\n    })\n);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["En este archivo buscamos una configuraci\xf3n sencilla usando ",(0,o.jsx)(n.code,{children:"Express"}),", por lo que importamos las dependencias necesarias y configuramos el servidor para que escuche en un puerto espec\xedfico (3000 por defecto). Tambi\xe9n configuramos el middleware para manejar solicitudes JSON y URL codificadas."]}),"\n",(0,o.jsxs)(n.p,{children:["Ya que tenemos la posibilidad de configurar las variables de entorno (como se realizaba con el archivo ",(0,o.jsx)(n.code,{children:"application.properties"})," de Spring), crearemos un archivo ",(0,o.jsx)(n.code,{children:".env"})," en la ra\xedz del proyecto con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"PORT=3000\nMONGO_URI=mongodb://admin:admin123@localhost:27017\n"})}),"\n",(0,o.jsx)(n.h3,{id:"62-creaci\xf3n-del-archivo-de-conexi\xf3n-a-la-base-de-datos",children:"6.2. Creaci\xf3n del archivo de conexi\xf3n a la base de datos"}),"\n",(0,o.jsxs)(n.p,{children:["Para mantener una conexi\xf3n a la base de datos MongoDB, crearemos un archivo de configuraci\xf3n en la carpeta ",(0,o.jsx)(n.code,{children:"config"})," llamado ",(0,o.jsx)(n.code,{children:"connectionDB.ts"}),". Este archivo se encargar\xe1 de establecer la conexi\xf3n a la base de datos utilizando Mongoose, que es una biblioteca de modelado de objetos MongoDB para Node.js."]}),"\n",(0,o.jsxs)(n.p,{children:["Crea el archivo ",(0,o.jsx)(n.code,{children:"src/config/connectionDB.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import mongoose from "mongoose";\n\nprocess.loadEnvFile();\n\nconst connectionString = process.env.MONGO_URI || "";\n\nexport const db = mongoose.connect(connectionString, { dbName: \'boardgame-db\'})\n    .then(() =>\n        console.log("Connected to MongoDB")\n    ).catch(\n        (error) => console.error(error)\n    )\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este archivo, importamos Mongoose y usamos la funci\xf3n ",(0,o.jsx)(n.code,{children:"connect"})," para establecer una conexi\xf3n a la base de datos MongoDB utilizando la cadena de conexi\xf3n definida en las variables de entorno. Tambi\xe9n especificamos el nombre de la base de datos como ",(0,o.jsx)(n.code,{children:"boardgame-db"}),", que es el que definimos en el archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"63-ejecutar-el-servidor",children:"6.3. Ejecutar el servidor"}),"\n",(0,o.jsx)(n.p,{children:"Hagamos una prueba simple, ejecuta el siguiente comando en la terminal para iniciar el servidor:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Si todo funcion\xf3 correctamente, deber\xedas ver en tu terminal un mensaje indicando que el servidor est\xe1 corriendo en el puerto 3000. Ahora, abre tu navegador y ve a ",(0,o.jsx)(n.code,{children:"http://localhost:3000"}),'. Deber\xedas ver el mensaje "Hola Mundo".']}),"\n",(0,o.jsx)(n.h2,{id:"7-creaci\xf3n-de-un-modelo-de-datos",children:"7. Creaci\xf3n de un modelo de datos"}),"\n",(0,o.jsx)(n.h3,{id:"71-creaci\xf3n-del-modelo-usuario",children:"7.1 Creaci\xf3n del modelo Usuario"}),"\n",(0,o.jsxs)(n.p,{children:["Ahora que tenemos el servidor funcionando, vamos a crear un modelo de datos para representar los juegos de mesa. Dentro de los entorno de desarrollo de Javascript, es com\xfan encontrar que los m\xf3dulos de la aplicaci\xf3n presentan un archivo ",(0,o.jsx)(n.code,{children:"index.ts"})," que exporta todos los m\xf3dulos del directorio, por lo que crearemos un archivo ",(0,o.jsx)(n.code,{children:"index.ts"})," en la carpeta ",(0,o.jsx)(n.code,{children:"models"})," para exportar nuestro modelo de datos."]}),"\n",(0,o.jsxs)(n.p,{children:["Crea el archivo ",(0,o.jsx)(n.code,{children:"src/models/index.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'export * from "./user.model";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Luego, crearemos el modelo de datos para los usuarios en un archivo llamado ",(0,o.jsx)(n.code,{children:"user.model.ts"})," dentro de la carpeta ",(0,o.jsx)(n.code,{children:"models"}),". Crea el archivo ",(0,o.jsx)(n.code,{children:"src/models/user.model.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import mongoose from "mongoose";\nimport { UserInput } from "../interfaces"; // TODO\n\nexport interface UserDocument extends UserInput, mongoose.Document {\n    createdAt: Date,\n    updatedAt: Date,\n    deletedAt: Date\n}\n\nconst userSchema = new mongoose.Schema({\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true, index: true },\n    password: { type: String, required: true, select: false }\n}, { timestamps: true, collection: \'users\' })\n\nexport const UserModel = mongoose.model<UserDocument>("User", userSchema); \n'})}),"\n",(0,o.jsxs)(n.p,{children:["Mongoose es uno de los m\xf3dulos que usaremos para interactuar con la base de datos MongoDB. Este se considera un ",(0,o.jsx)(n.code,{children:"ODM (Object Document Mapper)"}),", que permite definir esquemas y modelos para los documentos de la base de datos, facilitando la interacci\xf3n con MongoDB."]}),"\n",(0,o.jsx)(n.p,{children:"Las instrucciones que deseamos ilustrar con este Script es lo siguiente:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Definimos una interfaz ",(0,o.jsx)(n.code,{children:"UserDocument"})," que extiende de ",(0,o.jsx)(n.code,{children:"UserInput"})," y ",(0,o.jsx)(n.code,{children:"mongoose.Document"}),". Esta interfaz representa un documento de usuario en la base de datos y define los campos que tendr\xe1 el modelo, incluyendo los campos de marca de tiempo (",(0,o.jsx)(n.code,{children:"createdAt"}),", ",(0,o.jsx)(n.code,{children:"updatedAt"}),", ",(0,o.jsx)(n.code,{children:"deletedAt"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["Creamos un esquema de Mongoose llamado ",(0,o.jsx)(n.code,{children:"userSchema"})," que define la estructura del documento de usuario, incluyendo los campos ",(0,o.jsx)(n.code,{children:"name"}),", ",(0,o.jsx)(n.code,{children:"email"})," y ",(0,o.jsx)(n.code,{children:"password"}),". El campo ",(0,o.jsx)(n.code,{children:"email"})," es \xfanico y tiene un \xedndice para mejorar el rendimiento de las consultas. Puedes relacionar los esquemas de Mongoose con las entidades en JPA/Hibernate."]}),"\n",(0,o.jsxs)(n.li,{children:["Finalmente, exportamos el modelo ",(0,o.jsx)(n.code,{children:"UserModel"})," que se basa en el esquema definido. Este modelo se utilizar\xe1 para interactuar con la colecci\xf3n de usuarios en la base de datos como se hac\xeda con los repositorios en Spring Data JPA."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nota:"})," A\xfan no hemos definido la interfaz ",(0,o.jsx)(n.code,{children:"UserInput"}),", ser\xe1 tu trabajajo definirla en el archivo ",(0,o.jsx)(n.code,{children:"src/interfaces/user.interface.ts"}),". Esta interfaz debe contener los campos ",(0,o.jsx)(n.code,{children:"name"}),", ",(0,o.jsx)(n.code,{children:"email"})," y ",(0,o.jsx)(n.code,{children:"password"})," que se utilizar\xe1n al crear un nuevo usuario. Recuerda especificar el archivo ",(0,o.jsx)(n.code,{children:"index.ts"})," en la carpeta ",(0,o.jsx)(n.code,{children:"interfaces"})," para exportar la interfaz ",(0,o.jsx)(n.code,{children:"UserInput"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"72-creaci\xf3n-del-modelo-games",children:"7.2 Creaci\xf3n del modelo Games"}),"\n",(0,o.jsx)(n.p,{children:"Dentro del contexto de esta aplicaci\xf3n de juegos de mesa, es fundamental contar con un modelo que represente los juegos en s\xed, los cuales pueden ser registrados y gestionados por los usuarios. Este modelo nos permitir\xe1 almacenar informaci\xf3n relevante sobre cada juego, facilitando su administraci\xf3n y consulta dentro de la aplicaci\xf3n."}),"\n",(0,o.jsxs)(n.p,{children:["Crea el archivo ",(0,o.jsx)(n.code,{children:"src/models/game.model.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import mongoose from "mongoose";\nimport { UserDocument } from "./user.model";\n\nexport interface GameDocument extends mongoose.Document {\n    title: string;\n    genre: string;\n    releaseDate: Date;\n    createdBy: UserDocument;\n    createdAt: Date;\n    updatedAt: Date;\n    deletedAt: Date;\n}\n\nconst gameSchema = new mongoose.Schema({\n    title: { type: String, required: true },\n    genre: { type: String, required: true },\n    releaseDate: { type: Date, required: true },\n    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: \'User\', required: true }\n}, { timestamps: true, collection: \'games\' });\n\nexport const GameModel = mongoose.model<GameDocument>("Game", gameSchema);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Recuerda adicionar la exportaci\xf3n del modelo en el archivo ",(0,o.jsx)(n.code,{children:"src/models/index.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'export * from "./user.model";\nexport * from "./game.model";\n'})}),"\n",(0,o.jsx)(n.h2,{id:"8-creaci\xf3n-de-un-servicio-para-la-gesti\xf3n-de-usuarios",children:"8. Creaci\xf3n de un servicio para la gesti\xf3n de usuarios"}),"\n",(0,o.jsx)(n.p,{children:"Manteniendo una estructura similar a la de Spring, crearemos un servicio para manejar la l\xf3gica de negocio relacionada con los usuarios. Este servicio se encargar\xe1 de interactuar con el modelo de usuario y proporcionar m\xe9todos para crear, leer, actualizar y eliminar usuarios."}),"\n",(0,o.jsx)(n.h3,{id:"81-creaci\xf3n-del-servicio-userservice",children:"8.1 Creaci\xf3n del servicio UserService"}),"\n",(0,o.jsxs)(n.p,{children:["En el apartado de servicios, aunque en Javascript no es regla manejar todas las funcionalidades por medio de constantes o functiones, las clases son una buena forma de encapsular la l\xf3gica de negocio. Por lo que crearemos un archivo ",(0,o.jsx)(n.code,{children:"user.service.ts"})," dentro de la carpeta ",(0,o.jsx)(n.code,{children:"services"})," y agregaremos el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import bcrypt from "bcrypt";\n\nimport { UserInput } from "../interfaces";\nimport { UserDocument, UserModel } from "../models";\n\nclass UserService {\n    public async create(userInput: UserInput): Promise<UserDocument> {\n    }\n\n    public findByEmail(email: string): Promise<UserDocument | null> {\n    }\n\n    public async update(id: string, userInput: UserInputUpdate): Promise<UserDocument | null> {\n    }\n\n    public getAll(): Promise<UserDocument[]> {\n    }\n\n    public getById(id: string): Promise<UserDocument | null> {\n    }\n\n}\n\nexport const userService = new UserService();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Como se observa, lo que hemos hecho hasta el momento es definir una clase ",(0,o.jsx)(n.code,{children:"UserService"})," que contiene m\xe9todos para crear, buscar, actualizar y obtener usuarios. Cada m\xe9todo interact\xfaa con el modelo ",(0,o.jsx)(n.code,{children:"UserModel"})," para realizar las operaciones necesarias en la base de datos."]}),"\n",(0,o.jsx)(n.p,{children:"Primero, revisemos el m\xe9todo que permitir\xe1 crear nuevos usuarios."}),"\n",(0,o.jsx)(n.h4,{id:"811-m\xe9todo-create",children:"8.1.1 M\xe9todo create"}),"\n",(0,o.jsxs)(n.p,{children:["Para implementar el m\xe9todo ",(0,o.jsx)(n.code,{children:"create"}),", debemos asegurarnos de que la contrase\xf1a del usuario se almacene de forma segura. Para ello, utilizaremos ",(0,o.jsx)(n.code,{children:"bcrypt"})," para hashear la contrase\xf1a antes de guardarla en la base de datos. Aqu\xed est\xe1 la implementaci\xf3n del m\xe9todo ",(0,o.jsx)(n.code,{children:"create"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'public async create(userInput: UserInput): Promise<UserDocument> {\n\n        process.loadEnvFile();\n\n        const userExists: UserDocument | null = await this.findByEmail(userInput.email);\n        if (userExists !== null) {\n            throw new ReferenceError("User already exists");\n        }\n        if (userInput.password) {\n            userInput.password = await bcrypt.hash(userInput.password, 10);\n        }\n        return UserModel.create(userInput);\n    }\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Ya que estamos trabajando con Typescript, podemos observar su uso avanzado en diferentes partes del c\xf3digo. Por ejemplo el uso de ",(0,o.jsx)(n.code,{children:"Promise<UserDocument>"})," indica que el m\xe9todo ",(0,o.jsx)(n.code,{children:"create"})," devolver\xe1 una promesa que resolver\xe1 un objeto de tipo ",(0,o.jsx)(n.code,{children:"UserDocument"}),". Esto es \xfatil para manejar operaciones as\xedncronas, como las consultas a la base de datos."]}),"\n",(0,o.jsxs)(n.p,{children:["Adem\xe1s, el uso de ",(0,o.jsx)(n.code,{children:"ReferenceError"})," para lanzar un error si el usuario ya existe es una buena pr\xe1ctica para manejar errores de manera controlada. Tambi\xe9n se utiliza ",(0,o.jsx)(n.code,{children:"bcrypt.hash"})," para hashear la contrase\xf1a del usuario antes de guardarla en la base de datos, lo que mejora la seguridad de la aplicaci\xf3n (se podr\xeda mejorar)."]}),"\n",(0,o.jsx)(n.h4,{id:"812-m\xe9todo-findbyemail",children:"8.1.2 M\xe9todo findByEmail"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"findByEmail"})," se encargar\xe1 de buscar un usuario por su correo electr\xf3nico. Aqu\xed est\xe1 la plantilla del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public findByEmail(email: string): ? {\n    return UserModel.?\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Tu tarea ser\xe1 completar este m\xe9todo para que busque un usuario por su correo electr\xf3nico utilizando el modelo ",(0,o.jsx)(n.code,{children:"UserModel"}),". Puedes usar el m\xe9todo ",(0,o.jsx)(n.code,{children:"findOne"})," de Mongoose para realizar esta operaci\xf3n."]}),"\n",(0,o.jsx)(n.h4,{id:"813-m\xe9todo-update",children:"8.1.3 M\xe9todo update"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"update"})," se encargar\xe1 de actualizar la informaci\xf3n de un usuario existente. Aqu\xed est\xe1 la plantilla del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public async update(id: string, userInput: UserInputUpdate): Promise<UserDocument | null>{\n    try {\n        const user: UserDocument | null = await UserModel.findOneAndUpdate(\n            {_id: id}, \n            userInput, \n            {returnOriginal: false}\n        );\n\n        return user; \n    } catch (error) {\n        throw error;\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Como puedes observar, mongoose nos ofrece el m\xe9todo ",(0,o.jsx)(n.code,{children:"findOneAndUpdate"})," que nos permite buscar un documento por su ID y actualizarlo con los nuevos datos proporcionados en ",(0,o.jsx)(n.code,{children:"userInput"}),". El par\xe1metro ",(0,o.jsx)(n.code,{children:"{returnOriginal: false}"})," asegura que se devuelva el documento actualizado en lugar del original."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nota:"})," Aseg\xfarate de definir la interfaz ",(0,o.jsx)(n.code,{children:"UserInputUpdate"})," en el archivo ",(0,o.jsx)(n.code,{children:"src/interfaces/user.interface.ts"})," para que puedas usarla en este m\xe9todo. Esta interfaz debe contener los campos que se pueden actualizar, como ",(0,o.jsx)(n.code,{children:"name"})," e ",(0,o.jsx)(n.code,{children:"email"}),". Dejaremos la forma de actualizar la contrase\xf1a como un ejercicio posterior."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"814-m\xe9todo-getall",children:"8.1.4 M\xe9todo getAll"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getAll"})," se encargar\xe1 de obtener todos los usuarios de la base de datos."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public getAll(): Promise<UserDocument[]> {\n    return UserModel.find();\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Este m\xe9todo utiliza el m\xe9todo ",(0,o.jsx)(n.code,{children:"find"})," de Mongoose para recuperar todos los documentos de la colecci\xf3n de usuarios. Devuelve una promesa que resolver\xe1 un array de ",(0,o.jsx)(n.code,{children:"UserDocument"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"815-m\xe9todo-getbyid",children:"8.1.5 M\xe9todo getById"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getById"})," se encargar\xe1 de obtener un usuario por su ID. Aqu\xed est\xe1 la plantilla del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public getById(id: string): Promise<UserDocument | null> {\n    return UserModel.findById(id);\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nota:"})," Aseg\xfarate de exportar el servicio ",(0,o.jsx)(n.code,{children:"userService"})," al final del archivo ",(0,o.jsx)(n.code,{children:"src/services/user.service.ts"})," para que pueda ser utilizado en otras partes de la aplicaci\xf3n. Esto se har\xe1 por medio del archivo ",(0,o.jsx)(n.code,{children:"index.ts"})," en la carpeta ",(0,o.jsx)(n.code,{children:"services"}),". No debes de preocuparte de que cada vez que se importe el servicio, se cree una nueva instancia, ya que en Javascript y Typescript, las clases son singleton por defecto, es decir, solo se crea una instancia de la clase y se reutiliza en todas las importaciones."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"9-creaci\xf3n-de-un-controlador-para-la-gesti\xf3n-de-usuarios",children:"9. Creaci\xf3n de un controlador para la gesti\xf3n de usuarios"}),"\n",(0,o.jsxs)(n.p,{children:["Ahora que tenemos el servicio ",(0,o.jsx)(n.code,{children:"UserService"})," implementado, vamos a crear un controlador para manejar las solicitudes HTTP relacionadas con los usuarios. Este controlador se encargar\xe1 de recibir las solicitudes, llamar al servicio correspondiente y devolver las respuestas adecuadas."]}),"\n",(0,o.jsx)(n.h3,{id:"91-creaci\xf3n-del-controlador-usercontroller",children:"9.1 Creaci\xf3n del controlador UserController"}),"\n",(0,o.jsxs)(n.p,{children:["Crea un archivo ",(0,o.jsx)(n.code,{children:"user.controller.ts"})," junto al archivo ",(0,o.jsx)(n.code,{children:"index.ts"})," dentro de la carpeta ",(0,o.jsx)(n.code,{children:"controllers"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { Request, Response } from "express";\nimport { UserDocument } from "../models";\nimport { userService } from "../services";\nimport { UserInput, UserInputUpdate } from "../interfaces";\n\nclass UserController {\n    public async create(req: Request, res: Response){\n    }\n\n    public async getAll(req: Request, res: Response){\n    }\n\n    public async getOne(req: Request, res: Response){\n    }\n\n    public async  update(req: Request, res: Response){\n    }\n    public delete(req: Request, res: Response){\n        // TODO\n    }\n}\n\nexport const userController = new UserController();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Como manejaremos las solicitudes, cada m\xe9todo del controlador recibir\xe1 un objeto ",(0,o.jsx)(n.code,{children:"Request"})," y un objeto ",(0,o.jsx)(n.code,{children:"Response"})," de Express. Estos objetos nos permiten acceder a los datos de la solicitud y enviar respuestas al cliente como los c\xf3digos de estado HTTP, encabezados y cuerpos de respuesta."]}),"\n",(0,o.jsx)(n.h4,{id:"911-m\xe9todo-create",children:"9.1.1 M\xe9todo create"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"create"})," se encargar\xe1 de crear un nuevo usuario. Aqu\xed est\xe1 la implementaci\xf3n del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'public async create(req: Request, res: Response) {\n    try {\n        const userInput: UserInput = req.body;\n        const user: UserDocument = await userService.create(userInput); // Tambi\xe9n podr\xeda ser req.body as UserInput;\n        res.status(201).json(user);\n    } catch (error) {\n        if (error instanceof ReferenceError) {\n            res.status(400).json({ message: "User already exists" });\n            return;\n        }\n        res.status(500).json(error);\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Por el momento, su funcionalidad es limitada, por lo que lo usar\xedamos como un delegado para el servicio ",(0,o.jsx)(n.code,{children:"userService"}),". Este m\xe9todo recibe los datos del usuario desde el cuerpo de la solicitud (",(0,o.jsx)(n.code,{children:"req.body"}),"), llama al m\xe9todo ",(0,o.jsx)(n.code,{children:"create"})," del servicio y devuelve el usuario creado con un c\xf3digo de estado 201 (Creado). Si ocurre un error, se maneja adecuadamente y se devuelve un mensaje de error con un c\xf3digo de estado 500 (Error interno del servidor)."]}),"\n",(0,o.jsx)(n.h4,{id:"912-m\xe9todo-getall",children:"9.1.2 M\xe9todo getAll"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getAll"})," se encargar\xe1 de obtener todos los usuarios. Aqu\xed est\xe1 la implementaci\xf3n del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"public async getAll(req: Request, res: Response) {\n    try {\n        const users: UserDocument[] = ?;\n        res.json(users);\n    } catch (error) {\n        res.status(?).json(error);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"913-m\xe9todo-getone",children:"9.1.3 M\xe9todo getOne"}),"\n",(0,o.jsxs)(n.p,{children:["El m\xe9todo ",(0,o.jsx)(n.code,{children:"getOne"})," se encargar\xe1 de obtener un usuario por su ID, por lo que desear\xedamos recibirlo como un par\xe1metro de la solicitud. Aqu\xed est\xe1 la implementaci\xf3n del m\xe9todo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'public async getOne(req: Request, res: Response) {\n    try {\n        const id: string = req.params.id || "";\n        const user: UserDocument | null = await userService.getById(id);\n        if (user === null) {\n            res.status(404).json({ message: `User with id ${id} not found` });\n            return;\n        }\n        res.json(user);\n    } catch (error) {\n        res.status(500).json(error);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"914-m\xe9todo-update",children:"9.1.4 M\xe9todo update"}),"\n",(0,o.jsxs)(n.p,{children:["Realiza la implementaci\xf3n del m\xe9todo ",(0,o.jsx)(n.code,{children:"update"})," de manera similar a los anteriores, asegur\xe1ndote de que se manejen correctamente los errores y se devuelva el usuario actualizado."]}),"\n",(0,o.jsx)(n.h2,{id:"10-creaci\xf3n-de-las-rutas-para-los-usuarios",children:"10. Creaci\xf3n de las rutas para los usuarios"}),"\n",(0,o.jsxs)(n.p,{children:["A diferencia de Spring, donde las rutas de los endpoints se definen directamente en los controladores mediante anotaciones, en Express las rutas se manejan de manera m\xe1s expl\xedcita. Crearemos un archivo ",(0,o.jsx)(n.code,{children:"user.route.ts"})," dentro de la carpeta ",(0,o.jsx)(n.code,{children:"routes"})," para definir las rutas relacionadas con los usuarios (No olvides adicionar el archivo ",(0,o.jsx)(n.code,{children:"index.ts"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["Crea el archivo ",(0,o.jsx)(n.code,{children:"src/routes/user.route.ts"})," y agrega el siguiente c\xf3digo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\nimport { userController } from "../controllers";\n\nexport const router = express.Router();\n\nrouter.get("/", userController.getAll);\n\nrouter.get("/:id", userController.getOne);\n\nrouter.put("/:id", userController.update);\n\nrouter.post("/", userController.create);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["De esta manera express nos permite especificar las rutas de la aplicaci\xf3n de manera m\xe1s expl\xedcita. En este caso, hemos definido las rutas para obtener todos los usuarios (",(0,o.jsx)(n.code,{children:"GET /"}),"), obtener un usuario por ID (",(0,o.jsx)(n.code,{children:"GET /:id"}),"), actualizar un usuario por ID (",(0,o.jsx)(n.code,{children:"PUT /:id"}),") y crear un nuevo usuario (",(0,o.jsx)(n.code,{children:"POST /"}),")."]}),"\n",(0,o.jsx)(n.h3,{id:"101-integraci\xf3n-de-las-rutas-en-el-servidor",children:"10.1 Integraci\xf3n de las rutas en el servidor"}),"\n",(0,o.jsxs)(n.p,{children:["Para integrar las rutas de usuarios en nuestro servidor Express, debemos importar el router que acabamos de crear y usarlo en el archivo ",(0,o.jsx)(n.code,{children:"src/index.ts"}),". Agrega el siguiente c\xf3digo despu\xe9s de la configuraci\xf3n del middleware:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { router as userRouter } from "./routes/user.route";\n\napp.use("/api/users", userRouter);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"11-pruebas-de-la-api",children:"11. Pruebas de la API"}),"\n",(0,o.jsx)(n.p,{children:"Para probar nuestra API, podemos usar herramientas como Postman, Insomnia o directamente un cURL en la terminal. Estas herramientas nos permiten enviar solicitudes HTTP a nuestro servidor y ver las respuestas."}),"\n",(0,o.jsx)(n.p,{children:"Primero aseg\xfarate de que el servidor est\xe9 corriendo. Luego, puedes probar los siguientes endpoints:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,o.jsx)(n.h2,{id:"12-express-en-docker",children:"12. Express en Docker"}),"\n",(0,o.jsxs)(n.p,{children:["Para mantener simple el despliegue de nuestro servicio de docker, realizaremos un archivo ",(0,o.jsx)(n.code,{children:"Dockerfile"})," en la ra\xedz del proyecto. Este archivo se encargar\xe1 de construir una imagen de Docker para nuestra aplicaci\xf3n Express. Posterior a esto la agregaremos en el archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," para que se ejecute junto con el contenedor de MongoDB.\nCrea el archivo ",(0,o.jsx)(n.code,{children:"Dockerfile"})," en la ra\xedz del proyecto y agrega el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Usamos la imagen oficial de Node.js como base\nFROM node:22\n# Establecemos el directorio de trabajo dentro del contenedor\nWORKDIR /usr/src/app\n# Copiamos los archivos de nuestro proyecto al contenedor\nCOPY package*.json ./\n# Instalamos las dependencias del proyecto\nRUN npm install\n# Copiamos el resto de los archivos del proyecto al contenedor\nCOPY . .\n# Exponemos el puerto en el que nuestra aplicaci\xf3n escuchar\xe1\nEXPOSE 3000\n# Comando para iniciar la aplicaci\xf3n\nCMD ["npm", "run", "dev"]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Posterior a esto, modificaremos el archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," para incluir nuestro servicio de Express. Agrega lo siguiente al archivo:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  mongo:\n    image: mongo:8.0.12\n    container_name: mongo\n    restart: always\n    ports:\n      - "27017:27017"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: admin123\n      MONGO_INITDB_DATABASE: boardgame-db\n    volumes:\n      - mongo_data:/data/db\n\n  express:\n    build: .\n    container_name: express-app\n    restart: always\n    ports:\n        - "3000:3000"\n    depends_on:\n        - mongo\n\nvolumes:\n    mongo_data:\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Con esto, hemos definido un nuevo servicio llamado ",(0,o.jsx)(n.code,{children:"express"})," que construir\xe1 la imagen de Docker a partir del ",(0,o.jsx)(n.code,{children:"Dockerfile"})," en la ra\xedz del proyecto. El contenedor expondr\xe1 el puerto 3000 y depender\xe1 del contenedor de MongoDB para funcionar correctamente."]}),"\n",(0,o.jsx)(n.p,{children:"Podemos observar los logs del contenedor de Express ejecutando el siguiente comando:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose logs -f express\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Nota:"})," Aseg\xfarate de que el contenedor de MongoDB est\xe9 corriendo antes de iniciar el contenedor de Express, ya que este \xfaltimo depende del primero para funcionar correctamente. Adem\xe1s de eso, debido a que el ambos contenedores funcionar\xe1n a trav\xe9s de una red Docker, es necesario modificar la cadena de conexi\xf3n a MongoDB en el archivo ",(0,o.jsx)(n.code,{children:".env"})," para que apunte al nombre del servicio de MongoDB en lugar de ",(0,o.jsx)(n.code,{children:"localhost"}),". Cambia la l\xednea ",(0,o.jsx)(n.code,{children:"MONGO_URI=mongodb://admin:admin123@localhost:27017"})," a ",(0,o.jsx)(n.code,{children:"MONGO_URI=mongodb://admin:admin123@mongo:27017"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"13-to-do",children:"13. TO DO"}),"\n",(0,o.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implementar el m\xe9todo ",(0,o.jsx)(n.code,{children:"delete"})," en el controlador de usuarios."]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implementar un CRUD para el modelo de datos ",(0,o.jsx)(n.code,{children:"Game"}),"."]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implementar un servicio para manejar la l\xf3gica de negocio relacionada con los juegos de mesa."]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implementar un controlador para manejar las solicitudes HTTP relacionadas con los juegos de mesa."]}),"\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Implementar las rutas para los juegos de mesa."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var s=r(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);