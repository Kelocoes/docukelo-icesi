"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[186],{3788:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"disenando-con-algoritmos/semana-3/js-poo","title":"Programaci\xf3n Orientada a Objetos en JavaScript","description":"\xa1Bienvenido al mundo de la Programaci\xf3n Orientada a Objetos (POO) en JavaScript! Si est\xe1s aqu\xed, probablemente ya sabes algo de programaci\xf3n b\xe1sica, pero ahora quieres dar el siguiente paso. La POO es como organizar tu c\xf3digo de una manera m\xe1s inteligente, como si fueras un arquitecto dise\xf1ando una casa en lugar de solo apilar ladrillos.","source":"@site/docs/disenando-con-algoritmos/semana-3/js-poo.md","sourceDirName":"disenando-con-algoritmos/semana-3","slug":"/disenando-con-algoritmos/semana-3/js-poo","permalink":"/docs/disenando-con-algoritmos/semana-3/js-poo","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/disenando-con-algoritmos/semana-3/js-poo.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Desaf\xedos de Programaci\xf3n","permalink":"/docs/disenando-con-algoritmos/semana-3/js-exercises"},"next":{"title":"50 Ejercicios de Practica de JavaScript","permalink":"/docs/disenando-con-algoritmos/semana-3/js-practice"}}');var s=a(4848),r=a(8453);const i={sidebar_position:4},t="Programaci\xf3n Orientada a Objetos en JavaScript",c={},d=[{value:"\xbfQu\xe9 es la Programaci\xf3n Orientada a Objetos?",id:"qu\xe9-es-la-programaci\xf3n-orientada-a-objetos",level:2},{value:"Clases y Objetos",id:"clases-y-objetos",level:2},{value:"Definiendo una Clase",id:"definiendo-una-clase",level:3},{value:"Creando Objetos (Instancias)",id:"creando-objetos-instancias",level:3},{value:"Getters y Setters",id:"getters-y-setters",level:2},{value:"\xbfPor qu\xe9 usarlos?",id:"por-qu\xe9-usarlos",level:3},{value:"Ejemplo B\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"Ejemplo M\xe1s Avanzado: Cuenta de Usuario",id:"ejemplo-m\xe1s-avanzado-cuenta-de-usuario",level:3},{value:"Getters y Setters con Propiedades Privadas",id:"getters-y-setters-con-propiedades-privadas",level:3},{value:"Cu\xe1ndo Usar Getters y Setters",id:"cu\xe1ndo-usar-getters-y-setters",level:3},{value:"Propiedades y M\xe9todos",id:"propiedades-y-m\xe9todos",level:2},{value:"Propiedades",id:"propiedades",level:3},{value:"M\xe9todos Est\xe1ticos",id:"m\xe9todos-est\xe1ticos",level:3},{value:"Los Cuatro Pilares de la POO",id:"los-cuatro-pilares-de-la-poo",level:2},{value:"1. Encapsulamiento",id:"1-encapsulamiento",level:3},{value:"2. Herencia",id:"2-herencia",level:3},{value:"3. Polimorfismo",id:"3-polimorfismo",level:3},{value:"4. Abstracci\xf3n",id:"4-abstracci\xf3n",level:3},{value:"Ejemplo Pr\xe1ctico: Sistema de Videojuegos",id:"ejemplo-pr\xe1ctico-sistema-de-videojuegos",level:2},{value:"Consejos para tener buenas pr\xe1cticas",id:"consejos-para-tener-buenas-pr\xe1cticas",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2}];function l(e){const n={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"programaci\xf3n-orientada-a-objetos-en-javascript",children:"Programaci\xf3n Orientada a Objetos en JavaScript"})}),"\n",(0,s.jsx)(n.p,{children:"\xa1Bienvenido al mundo de la Programaci\xf3n Orientada a Objetos (POO) en JavaScript! Si est\xe1s aqu\xed, probablemente ya sabes algo de programaci\xf3n b\xe1sica, pero ahora quieres dar el siguiente paso. La POO es como organizar tu c\xf3digo de una manera m\xe1s inteligente, como si fueras un arquitecto dise\xf1ando una casa en lugar de solo apilar ladrillos."}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-es-la-programaci\xf3n-orientada-a-objetos",children:"\xbfQu\xe9 es la Programaci\xf3n Orientada a Objetos?"}),"\n",(0,s.jsxs)(n.p,{children:["Imagina que quieres modelar un auto en tu c\xf3digo. En lugar de tener variables sueltas como ",(0,s.jsx)(n.code,{children:"colorAuto"}),", ",(0,s.jsx)(n.code,{children:"marcaAuto"}),", ",(0,s.jsx)(n.code,{children:"velocidadAuto"}),', la POO te permite crear un "molde" (clase) que define c\xf3mo debe ser cualquier auto, y luego crear "autos espec\xedficos" (objetos) a partir de ese molde.']}),"\n",(0,s.jsx)(n.h2,{id:"clases-y-objetos",children:"Clases y Objetos"}),"\n",(0,s.jsx)(n.h3,{id:"definiendo-una-clase",children:"Definiendo una Clase"}),"\n",(0,s.jsx)(n.p,{children:"Una clase es como el plano de lo que vas a hacer. Define qu\xe9 caracter\xedsticas y comportamientos tendr\xe1n todos los objetos creados a partir de \xe9l, pero a\xfan no creas los objetos."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Auto {\n  // Constructor: se ejecuta cuando creamos un nuevo auto\n  constructor(marca, modelo, color) {\n    this.marca = marca; // Propiedad\n    this.modelo = modelo; // Propiedad\n    this.color = color; // Propiedad\n    this.velocidad = 0; // Propiedad con valor inicial\n    this.encendido = false; // Propiedad con valor inicial\n  }\n\n  // M\xe9todos: las acciones que puede realizar el auto\n  encender() {\n    this.encendido = true;\n    console.log(`El ${this.marca} ${this.modelo} est\xe1 encendido`);\n  }\n\n  acelerar(incremento) {\n    if (this.encendido) {\n      this.velocidad += incremento;\n      console.log(`Velocidad actual: ${this.velocidad} km/h`);\n    } else {\n      console.log("Primero debes encender el auto");\n    }\n  }\n\n  frenar() {\n    this.velocidad = Math.max(0, this.velocidad - 10);\n    console.log(`Frenando... Velocidad: ${this.velocidad} km/h`);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creando-objetos-instancias",children:"Creando Objetos (Instancias)"}),"\n",(0,s.jsxs)(n.p,{children:["Una ",(0,s.jsx)(n.strong,{children:"instancia"})," es un objeto real creado a partir de una clase.",(0,s.jsx)(n.br,{}),"\n","Cada objeto tiene sus ",(0,s.jsx)(n.strong,{children:"propios valores"})," y su ",(0,s.jsx)(n.strong,{children:"propio estado"}),", aunque todos comparten la misma estructura y comportamientos definidos en la clase."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Crear objetos espec\xedficos a partir de la clase\nconst miAuto = new Auto("Toyota", "Corolla", "rojo");\nconst tuAuto = new Auto("Honda", "Civic", "azul");\n\n// Usar los objetos\nmiAuto.encender();\nmiAuto.acelerar(50);\nmiAuto.frenar();\n\ntuAuto.encender();\ntuAuto.acelerar(30);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"getters-y-setters",children:"Getters y Setters"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\xbfQu\xe9 son?"}),' Los getters y setters son como "puertas especiales" para acceder y modificar las propiedades de un objeto. En lugar de cambiar algo directamente, pasas por estas puertas que pueden validar, transformar o proteger la informaci\xf3n.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"En palabras simples:"}),' "Controlo c\xf3mo se lee y c\xf3mo se modifica mi informaci\xf3n"']}),"\n",(0,s.jsx)(n.h3,{id:"por-qu\xe9-usarlos",children:"\xbfPor qu\xe9 usarlos?"}),"\n",(0,s.jsxs)(n.p,{children:["Imagina que tienes una propiedad ",(0,s.jsx)(n.code,{children:"edad"})," en un objeto ",(0,s.jsx)(n.code,{children:"Persona"}),". Sin getters/setters, alguien podr\xeda hacer esto:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'persona.edad = -50; // \xa1Esto no tiene sentido!\npersona.edad = "veinte"; // \xa1Esto tampoco!\n'})}),"\n",(0,s.jsx)(n.p,{children:"Con getters y setters, puedes controlar qu\xe9 valores son v\xe1lidos."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo B\xe1sico"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this._edad = edad; // Usamos _ para indicar que es "semi-privada"\n  }\n\n  // GETTER: controla c\xf3mo se LEE la propiedad\n  get edad() {\n    return this._edad;\n  }\n\n  // SETTER: controla c\xf3mo se MODIFICA la propiedad\n  set edad(nuevaEdad) {\n    if (nuevaEdad < 0) {\n      console.log("\u274c La edad no puede ser negativa");\n      return;\n    }\n    if (nuevaEdad > 150) {\n      console.log("\u274c Esa edad parece un poco alta...");\n      return;\n    }\n    if (typeof nuevaEdad !== "number") {\n      console.log("\u274c La edad debe ser un n\xfamero");\n      return;\n    }\n\n    this._edad = nuevaEdad;\n    console.log(`\u2705 Edad actualizada a ${nuevaEdad} a\xf1os`);\n  }\n\n  // Getter que calcula algo din\xe1micamente\n  get esAdulto() {\n    return this._edad >= 18;\n  }\n\n  // Getter para informaci\xf3n combinada\n  get informacion() {\n    return `${this.nombre}, ${this._edad} a\xf1os (${\n      this.esAdulto ? "Adulto" : "Menor"\n    })`;\n  }\n}\n\n// Uso de getters y setters\nconst ana = new Persona("Ana", 25);\n\nconsole.log(ana.edad); // Getter: lee la edad (25)\nconsole.log(ana.esAdulto); // Getter calculado: true\nconsole.log(ana.informacion); // Getter combinado: "Ana, 25 a\xf1os (Adulto)"\n\n// Los setters validan autom\xe1ticamente\nana.edad = 30; // \u2705 Funciona\nana.edad = -5; // \u274c Error controlado\nana.edad = "treinta"; // \u274c Error controlado\nana.edad = 200; // \u274c Error controlado\n\nconsole.log(ana.informacion); // "Ana, 30 a\xf1os (Adulto)"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-m\xe1s-avanzado-cuenta-de-usuario",children:"Ejemplo M\xe1s Avanzado: Cuenta de Usuario"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class CuentaUsuario {\n  constructor(usuario, email) {\n    this._usuario = usuario;\n    this._email = email;\n    this._activa = true;\n    this._intentosFallidos = 0;\n  }\n\n  // Getter simple\n  get usuario() {\n    return this._usuario;\n  }\n\n  // Setter que valida formato de usuario\n  set usuario(nuevoUsuario) {\n    // Validar que solo tenga letras, n\xfameros y guiones bajos\n    if (!/^[a-zA-Z0-9_]+$/.test(nuevoUsuario)) {\n      console.log("\u274c El usuario solo puede tener letras, n\xfameros y _");\n      return;\n    }\n\n    if (nuevoUsuario.length < 3) {\n      console.log("\u274c El usuario debe tener al menos 3 caracteres");\n      return;\n    }\n\n    this._usuario = nuevoUsuario;\n    console.log(`\u2705 Usuario cambiado a: ${nuevoUsuario}`);\n  }\n\n  // Getter que formatea el email\n  get email() {\n    return this._activa ? this._email : "[CUENTA DESACTIVADA]";\n  }\n\n  // Setter que valida email\n  set email(nuevoEmail) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(nuevoEmail)) {\n      console.log("\u274c Email inv\xe1lido");\n      return;\n    }\n\n    this._email = nuevoEmail;\n    console.log(`\u2705 Email actualizado a: ${nuevoEmail}`);\n  }\n\n  // Getter que indica el estado de la cuenta\n  get estado() {\n    if (!this._activa) return "\ud83d\udd12 Desactivada";\n    if (this._intentosFallidos >= 3) return "\u26a0\ufe0f Bloqueada";\n    return "\u2705 Activa";\n  }\n\n  // M\xe9todo que usa setter internamente\n  intentarLogin(contrase\xf1a) {\n    if (contrase\xf1a === "123456") {\n      // Contrase\xf1a s\xfaper segura \ud83d\ude05\n      this._intentosFallidos = 0;\n      console.log(`\ud83c\udf89 \xa1Bienvenido ${this._usuario}!`);\n    } else {\n      this._intentosFallidos++;\n      console.log(\n        `\u274c Contrase\xf1a incorrecta. Intentos: ${this._intentosFallidos}/3`\n      );\n    }\n  }\n\n  // Setter para reactivar cuenta (solo desde c\xf3digo interno)\n  set _reactivarCuenta(valor) {\n    if (valor === true) {\n      this._activa = true;\n      this._intentosFallidos = 0;\n      console.log("\u2705 Cuenta reactivada");\n    }\n  }\n}\n\n// Probando la cuenta\nconst miCuenta = new CuentaUsuario("ana_92", "ana@email.com");\n\nconsole.log(`Usuario: ${miCuenta.usuario}`);\nconsole.log(`Email: ${miCuenta.email}`);\nconsole.log(`Estado: ${miCuenta.estado}`);\n\n// Cambiar datos con validaci\xf3n autom\xe1tica\nmiCuenta.usuario = "a"; // \u274c Muy corto\nmiCuenta.usuario = "ana@gmail"; // \u274c Caracteres inv\xe1lidos\nmiCuenta.usuario = "ana_garcia"; // \u2705 V\xe1lido\n\nmiCuenta.email = "email-malo"; // \u274c Email inv\xe1lido\nmiCuenta.email = "ana@gmail.com"; // \u2705 V\xe1lido\n\n// Probar login\nmiCuenta.intentarLogin("password"); // \u274c Incorrecto\nmiCuenta.intentarLogin("password"); // \u274c Incorrecto\nmiCuenta.intentarLogin("password"); // \u274c Incorrecto\nconsole.log(`Estado: ${miCuenta.estado}`); // Bloqueada\n\nmiCuenta.intentarLogin("123456"); // \u2705 Correcto\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getters-y-setters-con-propiedades-privadas",children:"Getters y Setters con Propiedades Privadas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Producto {\n  #precio = 0; // Propiedad verdaderamente privada\n  #descuento = 0;\n\n  constructor(nombre, precio) {\n    this.nombre = nombre;\n    this.precio = precio; // Usa el setter autom\xe1ticamente\n  }\n\n  // Getter para precio (lectura controlada)\n  get precio() {\n    return this.#precio;\n  }\n\n  // Setter para precio (escritura controlada)\n  set precio(nuevoPrecio) {\n    if (nuevoPrecio < 0) {\n      console.log("\u274c El precio no puede ser negativo");\n      return;\n    }\n    this.#precio = nuevoPrecio;\n  }\n\n  // Getter para descuento\n  get descuento() {\n    return this.#descuento;\n  }\n\n  // Setter para descuento (con validaci\xf3n)\n  set descuento(porcentaje) {\n    if (porcentaje < 0 || porcentaje > 100) {\n      console.log("\u274c El descuento debe estar entre 0% y 100%");\n      return;\n    }\n    this.#descuento = porcentaje;\n  }\n\n  // Getter calculado: precio final con descuento\n  get precioFinal() {\n    const descuentoEnDinero = (this.#precio * this.#descuento) / 100;\n    return this.#precio - descuentoEnDinero;\n  }\n\n  // Getter que formatea el precio para mostrar\n  get precioFormateado() {\n    return `$${this.precioFinal.toFixed(2)}`;\n  }\n}\n\n// Usar el producto\nconst laptop = new Producto("Laptop Gaming", 1000);\n\nconsole.log(`Precio original: $${laptop.precio}`);\nlaptop.descuento = 20;\nconsole.log(`Con 20% descuento: ${laptop.precioFormateado}`);\n\nlaptop.descuento = 150; // \u274c No permite m\xe1s de 100%\nlaptop.precio = -500; // \u274c No permite precios negativos\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cu\xe1ndo-usar-getters-y-setters",children:"Cu\xe1ndo Usar Getters y Setters"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\xdasalos cuando necesites:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validar datos antes de guardarlos"}),"\n",(0,s.jsx)(n.li,{children:"Calcular valores din\xe1micamente"}),"\n",(0,s.jsx)(n.li,{children:"Formatear datos al mostrarlos"}),"\n",(0,s.jsx)(n.li,{children:"Controlar el acceso a propiedades sensibles"}),"\n",(0,s.jsx)(n.li,{children:"Mantener otras propiedades sincronizadas"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NO los uses para:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Propiedades simples que no necesitan validaci\xf3n"}),"\n",(0,s.jsx)(n.li,{children:'Solo por "hacer bonito" el c\xf3digo'}),"\n",(0,s.jsx)(n.li,{children:"Operaciones muy costosas en getters (pueden hacer lento tu c\xf3digo)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Regla de oro"}),': Si solo necesitas guardar y leer un valor sin validaci\xf3n ni c\xe1lculos, una propiedad normal est\xe1 bien. Los getters/setters son para cuando necesitas "hacer algo especial" al leer o escribir.']}),"\n",(0,s.jsx)(n.h2,{id:"propiedades-y-m\xe9todos",children:"Propiedades y M\xe9todos"}),"\n",(0,s.jsx)(n.h3,{id:"propiedades",children:"Propiedades"}),"\n",(0,s.jsx)(n.p,{children:"Las propiedades son las caracter\xedsticas de un objeto. Pueden ser p\xfablicas (accesibles desde fuera) o privadas (solo accesibles desde dentro de la clase)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre; // Propiedad p\xfablica\n    this.edad = edad; // Propiedad p\xfablica\n    this._id = Math.random(); // Convenci\xf3n: _ indica "privada"\n    this.#secreto = "shh"; // Propiedad verdaderamente privada\n  }\n\n  // Getter: permite acceder a una propiedad como si fuera una variable\n  get informacion() {\n    return `${this.nombre}, ${this.edad} a\xf1os`;\n  }\n\n  // Setter: permite modificar una propiedad con validaci\xf3n\n  set edad(nuevaEdad) {\n    if (nuevaEdad >= 0 && nuevaEdad <= 120) {\n      this._edad = nuevaEdad;\n    } else {\n      console.log("Edad inv\xe1lida");\n    }\n  }\n\n  get edad() {\n    return this._edad;\n  }\n}\n\nconst persona = new Persona("Ana", 25);\nconsole.log(persona.informacion); // "Ana, 25 a\xf1os"\npersona.edad = 26; // Usa el setter\nconsole.log(persona.edad); // Usa el getter\n'})}),"\n",(0,s.jsx)(n.h3,{id:"m\xe9todos-est\xe1ticos",children:"M\xe9todos Est\xe1ticos"}),"\n",(0,s.jsx)(n.p,{children:"Un m\xe9todo est\xe1tico es un m\xe9todo de una clase que no necesita que crees un objeto (instancia) para poder usarlo. En lugar de pertenecer a los objetos, pertenece directamente a la clase."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class Matematicas {\n  static sumar(a, b) {\n    return a + b;\n  }\n\n  static PI = 3.14159;\n\n  static calcularAreaCirculo(radio) {\n    return this.PI * radio * radio;\n  }\n}\n\n// No necesitas crear una instancia\nconsole.log(Matematicas.sumar(5, 3)); // 8\nconsole.log(Matematicas.calcularAreaCirculo(5)); // 78.53975\n"})}),"\n",(0,s.jsx)(n.h2,{id:"los-cuatro-pilares-de-la-poo",children:"Los Cuatro Pilares de la POO"}),"\n",(0,s.jsx)(n.h3,{id:"1-encapsulamiento",children:"1. Encapsulamiento"}),"\n",(0,s.jsx)(n.p,{children:"Imagina que tienes un celular. Puedes hacer llamadas, enviar mensajes y tomar fotos, pero no necesitas saber c\xf3mo funciona internamente el procesador o la antena. El encapsulamiento funciona igual: oculta los detalles complicados y solo muestra lo que necesitas usar."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"En palabras simples:"}),' "Escondo lo complicado, muestro solo lo necesario"']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Celular {\n  #bateria = 100; // Privado: no puedes tocarlo directamente\n  #sistemaOperativo; // Privado: interno del celular\n\n  constructor(marca, modelo) {\n    this.marca = marca; // P\xfablico: puedes verlo\n    this.modelo = modelo; // P\xfablico: puedes verlo\n    this.#sistemaOperativo = "Android";\n  }\n\n  // M\xe9todos p\xfablicos: los botones que puedes presionar\n  hacerLlamada(numero) {\n    if (this.#bateria > 5) {\n      this.#bateria -= 5;\n      console.log(`Llamando a ${numero}...`);\n      this.#procesarLlamada(); // M\xe9todo privado\n    } else {\n      console.log("Bater\xeda muy baja");\n    }\n  }\n\n  verBateria() {\n    return `Bater\xeda: ${this.#bateria}%`;\n  }\n\n  // M\xe9todo privado: funciona internamente, no lo usas directamente\n  #procesarLlamada() {\n    console.log("Conectando con torres de se\xf1al...");\n  }\n}\n\nconst miCelular = new Celular("Samsung", "Galaxy");\nmiCelular.hacerLlamada("123-456-7890");\nconsole.log(miCelular.verBateria());\n// miCelular.#bateria = 100; // \xa1Error! No puedes cambiar esto directamente\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-herencia",children:"2. Herencia"}),"\n",(0,s.jsx)(n.p,{children:"Piensa en las redes sociales. Todas (Instagram, TikTok, Twitter) tienen cosas en com\xfan: puedes crear un perfil, subir contenido, seguir gente. Pero cada una tiene sus propias caracter\xedsticas especiales. La herencia funciona as\xed: tomas lo com\xfan y a\xf1ades lo espec\xedfico."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"En palabras simples:"}),' "Tomo lo que ya existe y le agrego mis propias caracter\xedsticas"']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// La "red social b\xe1sica" - lo que todas tienen en com\xfan\nclass RedSocial {\n  constructor(nombreUsuario) {\n    this.nombreUsuario = nombreUsuario;\n    this.seguidores = 0;\n    this.contenido = [];\n  }\n\n  seguir() {\n    this.seguidores++;\n    console.log(\n      `${this.nombreUsuario} ahora tiene ${this.seguidores} seguidores`\n    );\n  }\n\n  publicar(contenido) {\n    this.contenido.push(contenido);\n    console.log(`${this.nombreUsuario} public\xf3: ${contenido}`);\n  }\n}\n\n// Instagram hereda de RedSocial, pero a\xf1ade sus propias caracter\xedsticas\nclass Instagram extends RedSocial {\n  constructor(nombreUsuario) {\n    super(nombreUsuario); // Llama al constructor del "pap\xe1"\n    this.fotos = [];\n    this.stories = [];\n  }\n\n  // M\xe9todo espec\xedfico de Instagram\n  subirFoto(foto, filtro = "normal") {\n    const fotoConFiltro = `${foto} (filtro: ${filtro})`;\n    this.fotos.push(fotoConFiltro);\n    this.publicar(fotoConFiltro); // Usa el m\xe9todo del "pap\xe1"\n  }\n\n  crearStory(contenido) {\n    this.stories.push(contenido);\n    console.log(`Story publicado: ${contenido}`);\n  }\n}\n\n// TikTok tambi\xe9n hereda, pero tiene sus propias caracter\xedsticas\nclass TikTok extends RedSocial {\n  constructor(nombreUsuario) {\n    super(nombreUsuario);\n    this.videos = [];\n    this.bailes = 0;\n  }\n\n  subirVideo(descripcion, duracion) {\n    const video = `${descripcion} (${duracion}s)`;\n    this.videos.push(video);\n    this.publicar(video);\n  }\n\n  hacerBaile() {\n    this.bailes++;\n    console.log(`${this.nombreUsuario} hizo un baile! Total: ${this.bailes}`);\n  }\n}\n\n// Usar las clases\nconst miInstagram = new Instagram("@ana_fotografa");\nconst miTikTok = new TikTok("@carlos_baila");\n\nmiInstagram.subirFoto("Atardecer en la playa", "vintage");\nmiInstagram.seguir();\n\nmiTikTok.subirVideo("Baile viral", 15);\nmiTikTok.hacerBaile();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-polimorfismo",children:"3. Polimorfismo"}),"\n",(0,s.jsx)(n.p,{children:'Imagina que tienes diferentes apps de m\xfasica en tu celular: Spotify, Apple Music, YouTube Music. Todas tienen un bot\xf3n de "play", pero cada una reproduce m\xfasica de manera diferente. El polimorfismo es esto: mismo nombre de acci\xf3n, diferentes formas de hacerla.'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"En palabras simples:"}),' "Mismo bot\xf3n, diferente comportamiento seg\xfan qui\xe9n lo presione"']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class AppMusica {\n  constructor(nombre) {\n    this.nombre = nombre;\n    this.cancionActual = "";\n  }\n\n  reproducir(cancion) {\n    console.log("Reproduciendo m\xfasica...");\n  }\n}\n\nclass Spotify extends AppMusica {\n  reproducir(cancion) {\n    this.cancionActual = cancion;\n    console.log(\n      `\ud83c\udfb5 Spotify: Reproduciendo "${cancion}" con anuncios cada 3 canciones`\n    );\n  }\n}\n\nclass AppleMusic extends AppMusica {\n  reproducir(cancion) {\n    this.cancionActual = cancion;\n    console.log(\n      `\ud83c\udf4e Apple Music: Reproduciendo "${cancion}" en calidad lossless`\n    );\n  }\n}\n\nclass YouTubeMusic extends AppMusica {\n  reproducir(cancion) {\n    this.cancionActual = cancion;\n    console.log(\n      `\ud83d\udcfa YouTube Music: Reproduciendo "${cancion}" - \xbfQuieres ver el video?`\n    );\n  }\n}\n\n// Polimorfismo en acci\xf3n: mismo m\xe9todo, diferentes comportamientos\nconst misApps = [\n  new Spotify("Mi Spotify"),\n  new AppleMusic("Mi Apple Music"),\n  new YouTubeMusic("Mi YouTube Music"),\n];\n\nconst cancionFavorita = "Shape of You - Ed Sheeran";\n\n// El MISMO comando para todas, pero cada una act\xfaa diferente\nmisApps.forEach((app) => {\n  app.reproducir(cancionFavorita); // \xa1Cada una lo hace a su manera!\n});\n\n// Tambi\xe9n funciona si no sabemos qu\xe9 tipo de app es\nfunction reproducirEnCualquierApp(app, cancion) {\n  app.reproducir(cancion); // No importa si es Spotify, Apple Music, etc.\n}\n\nreproducirEnCualquierApp(new Spotify("Spotify Premium"), "Blinding Lights");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-abstracci\xf3n",children:"4. Abstracci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:'Cuando subes una foto a Instagram, solo presionas "subir" y listo. No necesitas saber c\xf3mo se comprime la imagen, c\xf3mo se env\xeda al servidor, o c\xf3mo se guarda en la base de datos. La abstracci\xf3n esconde toda esa complejidad y te da botones simples.'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"En palabras simples:"}),' "Te doy botones f\xe1ciles, yo me encargo de lo complicado"']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Clase "abstracta" - define QU\xc9 se debe hacer, no C\xd3MO\nclass Dispositivo {\n  constructor(marca) {\n    if (this.constructor === Dispositivo) {\n      throw new Error("No puedes crear un \'Dispositivo\' gen\xe9rico");\n    }\n    this.marca = marca;\n    this.encendido = false;\n  }\n\n  // M\xe9todo abstracto: cada dispositivo DEBE implementarlo a su manera\n  encender() {\n    throw new Error("Cada dispositivo debe decir c\xf3mo se enciende");\n  }\n\n  // M\xe9todo concreto: todos los dispositivos pueden usarlo igual\n  obtenerEstado() {\n    return `${this.marca} est\xe1 ${this.encendido ? "encendido" : "apagado"}`;\n  }\n}\n\nclass Television extends Dispositivo {\n  constructor(marca, pulgadas) {\n    super(marca);\n    this.pulgadas = pulgadas;\n    this.canal = 1;\n  }\n\n  // Implementaci\xf3n espec\xedfica de c\xf3mo se enciende una TV\n  encender() {\n    this.encendido = true;\n    console.log(\n      `\ud83d\udcfa TV ${this.marca} encendida - Mostrando canal ${this.canal}`\n    );\n  }\n\n  cambiarCanal(nuevoCanal) {\n    if (this.encendido) {\n      this.canal = nuevoCanal;\n      console.log(`Cambiando a canal ${nuevoCanal}`);\n    }\n  }\n}\n\nclass Computadora extends Dispositivo {\n  constructor(marca, sistemaOperativo) {\n    super(marca);\n    this.sistemaOperativo = sistemaOperativo;\n  }\n\n  // Implementaci\xf3n espec\xedfica de c\xf3mo se enciende una computadora\n  encender() {\n    this.encendido = true;\n    console.log(\n      `\ud83d\udcbb Computadora ${this.marca} iniciando ${this.sistemaOperativo}...`\n    );\n    console.log("Cargando escritorio...");\n  }\n\n  abrirPrograma(programa) {\n    if (this.encendido) {\n      console.log(`Abriendo ${programa}`);\n    }\n  }\n}\n\n// Uso de la abstracci\xf3n\nconst tv = new Television("Samsung", 55);\nconst laptop = new Computadora("Dell", "Windows 11");\n\n// Mismo m\xe9todo "encender", pero cada uno lo hace diferente\ntv.encender(); // Se enciende como TV\nlaptop.encender(); // Se enciende como computadora\n\nconsole.log(tv.obtenerEstado());\nconsole.log(laptop.obtenerEstado());\n\n// const dispositivo = new Dispositivo("Gen\xe9rico"); // \xa1Error! No se puede\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-pr\xe1ctico-sistema-de-videojuegos",children:"Ejemplo Pr\xe1ctico: Sistema de Videojuegos"}),"\n",(0,s.jsx)(n.p,{children:"Vamos a crear un sistema simple de videojuegos que combine todos los conceptos:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Clase base para todos los personajes del juego\nclass Personaje {\n  #vida = 100; // Privado: no se puede modificar directamente\n\n  constructor(nombre, tipo) {\n    this.nombre = nombre;\n    this.tipo = tipo;\n    this.nivel = 1;\n    this.experiencia = 0;\n  }\n\n  // Encapsulamiento: m\xe9todo controlado para acceder a la vida\n  obtenerVida() {\n    return this.#vida;\n  }\n\n  // M\xe9todo abstracto: cada tipo de personaje ataca diferente\n  atacar() {\n    throw new Error("Cada personaje debe implementar su propio ataque");\n  }\n\n  // M\xe9todo com\xfan para todos los personajes\n  recibirDanio(cantidad) {\n    this.#vida = Math.max(0, this.#vida - cantidad);\n    console.log(\n      `${this.nombre} recibi\xf3 ${cantidad} de da\xf1o. Vida: ${this.#vida}`\n    );\n\n    if (this.#vida === 0) {\n      console.log(`\ud83d\udc80 ${this.nombre} ha sido derrotado!`);\n    }\n  }\n\n  ganarExperiencia(puntos) {\n    this.experiencia += puntos;\n    if (this.experiencia >= this.nivel * 100) {\n      this.nivel++;\n      this.experiencia = 0;\n      this.#vida = 100; // Se recupera al subir de nivel\n      console.log(`\ud83c\udd99 ${this.nombre} subi\xf3 al nivel ${this.nivel}!`);\n    }\n  }\n}\n\n// Herencia: diferentes tipos de personajes\nclass Guerrero extends Personaje {\n  constructor(nombre) {\n    super(nombre, "Guerrero");\n    this.fuerza = 20;\n    this.armadura = 10;\n  }\n\n  // Polimorfismo: implementaci\xf3n espec\xedfica del ataque\n  atacar(objetivo) {\n    const da\xf1o = this.fuerza + this.nivel * 5;\n    console.log(`\u2694\ufe0f ${this.nombre} ataca con espada!`);\n    objetivo.recibirDanio(da\xf1o);\n    return da\xf1o;\n  }\n\n  // Habilidad especial del guerrero\n  defenderse() {\n    console.log(`\ud83d\udee1\ufe0f ${this.nombre} se defiende, reduciendo el pr\xf3ximo da\xf1o`);\n    this.armadura += 5;\n  }\n}\n\nclass Mago extends Personaje {\n  constructor(nombre) {\n    super(nombre, "Mago");\n    this.mana = 50;\n    this.inteligencia = 25;\n  }\n\n  // Polimorfismo: el mago ataca de forma diferente\n  atacar(objetivo) {\n    if (this.mana >= 10) {\n      const da\xf1o = this.inteligencia + this.nivel * 3;\n      this.mana -= 10;\n      console.log(`\ud83d\udd25 ${this.nombre} lanza una bola de fuego!`);\n      objetivo.recibirDanio(da\xf1o);\n      return da\xf1o;\n    } else {\n      console.log(`${this.nombre} no tiene suficiente mana`);\n      return 0;\n    }\n  }\n\n  curar(objetivo) {\n    if (this.mana >= 15) {\n      this.mana -= 15;\n      const curacion = 20 + this.nivel * 2;\n      console.log(`\u2728 ${this.nombre} cura a ${objetivo.nombre}`);\n      // Aqu\xed simplificaremos y no implementaremos la curaci\xf3n completa\n    }\n  }\n}\n\nclass Arquero extends Personaje {\n  constructor(nombre) {\n    super(nombre, "Arquero");\n    this.precision = 18;\n    this.flechas = 30;\n  }\n\n  // Polimorfismo: ataque a distancia\n  atacar(objetivo) {\n    if (this.flechas > 0) {\n      this.flechas--;\n      const da\xf1o = this.precision + this.nivel * 4;\n      console.log(`\ud83c\udff9 ${this.nombre} dispara una flecha!`);\n      objetivo.recibirDanio(da\xf1o);\n      return da\xf1o;\n    } else {\n      console.log(`${this.nombre} no tiene flechas`);\n      return 0;\n    }\n  }\n\n  recargar() {\n    this.flechas += 10;\n    console.log(`${this.nombre} recarga flechas. Total: ${this.flechas}`);\n  }\n}\n\n// Sistema de combate que usa polimorfismo\nclass Arena {\n  constructor() {\n    this.peleadores = [];\n  }\n\n  agregarPeleador(personaje) {\n    this.peleadores.push(personaje);\n    console.log(`${personaje.nombre} el ${personaje.tipo} entra a la arena!`);\n  }\n\n  // Polimorfismo en acci\xf3n: no importa qu\xe9 tipo de personaje sea\n  iniciarCombate(peleador1, peleador2) {\n    console.log(`\\n\ud83e\udd4a \xa1COMBATE: ${peleador1.nombre} vs ${peleador2.nombre}! \ud83e\udd4a\\n`);\n\n    let turno = 1;\n    while (peleador1.obtenerVida() > 0 && peleador2.obtenerVida() > 0) {\n      console.log(`--- Turno ${turno} ---`);\n\n      // El atacante y defensor alternan\n      const atacante = turno % 2 === 1 ? peleador1 : peleador2;\n      const defensor = turno % 2 === 1 ? peleador2 : peleador1;\n\n      // Polimorfismo: cada personaje ataca de forma diferente\n      const da\xf1oRealizado = atacante.atacar(defensor);\n\n      if (da\xf1oRealizado > 0) {\n        atacante.ganarExperiencia(10);\n      }\n\n      turno++;\n\n      // Pausa dram\xe1tica entre turnos\n      if (defensor.obtenerVida() > 0) {\n        console.log(`${defensor.nombre} contraatacar\xe1...\\n`);\n      }\n    }\n\n    // Determinar ganador\n    const ganador = peleador1.obtenerVida() > 0 ? peleador1 : peleador2;\n    console.log(`\ud83c\udfc6 \xa1${ganador.nombre} gana el combate!`);\n    ganador.ganarExperiencia(50);\n  }\n}\n\n// \xa1Vamos a jugar!\nconst arena = new Arena();\n\n// Crear diferentes personajes (cada uno se comporta diferente)\nconst conan = new Guerrero("Conan");\nconst gandalf = new Mago("Gandalf");\nconst legolas = new Arquero("Legolas");\n\narena.agregarPeleador(conan);\narena.agregarPeleador(gandalf);\narena.agregarPeleador(legolas);\n\n// Algunos combates de ejemplo\narena.iniciarCombate(conan, gandalf);\n\n// Preparar para otro combate\nconsole.log("\\n" + "=".repeat(50));\nconsole.log("SEGUNDO COMBATE");\nconsole.log("=".repeat(50));\n\nlegolas.recargar(); // El arquero se prepara\narena.iniciarCombate(legolas, conan);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\xbfQu\xe9 demuestra este ejemplo?"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Encapsulamiento"}),": La vida (",(0,s.jsx)(n.code,{children:"#vida"}),") est\xe1 protegida y solo se puede modificar a trav\xe9s de m\xe9todos controlados como ",(0,s.jsx)(n.code,{children:"recibirDanio()"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Herencia"}),": ",(0,s.jsx)(n.code,{children:"Guerrero"}),", ",(0,s.jsx)(n.code,{children:"Mago"})," y ",(0,s.jsx)(n.code,{children:"Arquero"})," heredan de ",(0,s.jsx)(n.code,{children:"Personaje"}),", compartiendo caracter\xedsticas b\xe1sicas pero a\xf1adiendo sus propias habilidades."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Polimorfismo"}),": Todos tienen un m\xe9todo ",(0,s.jsx)(n.code,{children:"atacar()"}),", pero cada uno lo hace diferente. La ",(0,s.jsx)(n.code,{children:"Arena"})," puede usar cualquier personaje sin saber exactamente qu\xe9 tipo es."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Abstracci\xf3n"}),": La clase ",(0,s.jsx)(n.code,{children:"Personaje"})," define QU\xc9 debe hacer cada personaje (como atacar), pero no especifica C\xd3MO debe hacerlo - eso lo decide cada subclase."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Salida de ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Conan el Guerrero entra a la arena!\nGandalf el Mago entra a la arena!\nLegolas el Arquero entra a la arena!\n\n\ud83e\udd4a \xa1COMBATE: Conan vs Gandalf! \ud83e\udd4a\n\n--- Turno 1 ---\n\u2694\ufe0f Conan ataca con espada!\nGandalf recibi\xf3 25 de da\xf1o. Vida: 75\nGandalf contraatacar\xe1...\n\n--- Turno 2 ---\n\ud83d\udd25 Gandalf lanza una bola de fuego!\nConan recibi\xf3 28 de da\xf1o. Vida: 72\nConan contraatacar\xe1...\n\n... y as\xed contin\xfaa hasta que uno gane!\n"})}),"\n",(0,s.jsx)(n.p,{children:"Este ejemplo muestra c\xf3mo la POO te permite crear sistemas complejos de manera organizada, donde cada clase tiene una responsabilidad clara y todas trabajan juntas de forma natural."}),"\n",(0,s.jsx)(n.h2,{id:"consejos-para-tener-buenas-pr\xe1cticas",children:"Consejos para tener buenas pr\xe1cticas"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Empieza simple"}),": No trates de crear jerarqu\xedas complejas desde el principio. Comienza con clases simples y ve a\xf1adiendo complejidad gradualmente."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Piensa en la vida real"}),': La POO trata de modelar cosas del mundo real. Si puedes explicar tu clase como "una cosa que tiene X propiedades y puede hacer Y", vas por buen camino.']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"No abuses de la herencia"}),": No todo necesita heredar de algo. A veces es mejor usar composici\xf3n (tener objetos dentro de otros objetos) que herencia."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Usa nombres descriptivos"}),": ",(0,s.jsx)(n.code,{children:"Vehiculo"})," es mejor que ",(0,s.jsx)(n.code,{children:"V"}),", ",(0,s.jsx)(n.code,{children:"calcularSalario()"})," es mejor que ",(0,s.jsx)(n.code,{children:"calc()"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Practica"}),": La mejor manera de entender POO es escribiendo c\xf3digo, puedes empezar pr\xe1cticando con cosas que conoces."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusi\xf3n",children:"Conclusi\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"La Programaci\xf3n Orientada a Objetos en JavaScript te permite escribir c\xf3digo m\xe1s organizado, reutilizable y f\xe1cil de mantener. Los cuatro pilares (encapsulamiento, herencia, polimorfismo y abstracci\xf3n) trabajan juntos para ayudarte a crear sistemas complejos de manera estructurada."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Recuerda: Dominar POO lleva tiempo y pr\xe1ctica. No te preocupes si al principio parece abrumador. Con cada proyecto, laboratorio, o ejercicio que hagas, estos conceptos se volver\xe1n m\xe1s naturales."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>t});var o=a(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);