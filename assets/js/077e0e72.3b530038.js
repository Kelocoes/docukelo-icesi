"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5490],{5064:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"computacion-2/semana-3/spring-concepts","title":"Spring Framework","description":"Conceptos generales de Spring","source":"@site/docs/computacion-2/semana-3/spring-concepts.md","sourceDirName":"computacion-2/semana-3","slug":"/computacion-2/semana-3/spring-concepts","permalink":"/docs/computacion-2/semana-3/spring-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-2/semana-3/spring-concepts.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"S3 - Conceptos de Spring","permalink":"/docs/category/s3---conceptos-de-spring"},"next":{"title":"Spring Utils","permalink":"/docs/computacion-2/semana-3/spring-value-qualifier-spel"}}');var s=o(4848),c=o(8453);const i={sidebar_position:1},a="Spring Framework",l={},t=[{value:"Funcionamiento de proyectos antes de Spring",id:"funcionamiento-de-proyectos-antes-de-spring",level:2},{value:"IoC container",id:"ioc-container",level:2},{value:"Beans",id:"beans",level:2},{value:"Dependency Injection - XML",id:"dependency-injection---xml",level:2},{value:"Constructor Injector",id:"constructor-injector",level:3},{value:"Setter Injector",id:"setter-injector",level:3},{value:"Bean Scopes",id:"bean-scopes",level:2},{value:"Singleton",id:"singleton",level:3},{value:"Prototype",id:"prototype",level:3},{value:"Life Cycle Beans",id:"life-cycle-beans",level:2},{value:"PostConstruct",id:"postconstruct",level:3},{value:"PreDestroy",id:"predestroy",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spring-framework",children:"Spring Framework"})}),"\n",(0,s.jsx)(n.p,{children:"Conceptos generales de Spring"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"funcionamiento-de-proyectos-antes-de-spring",children:"Funcionamiento de proyectos antes de Spring"}),"\n",(0,s.jsxs)(n.p,{children:["Antes de Spring, en aplicaciones Java tradicionales (Java SE o Java EE), el ",(0,s.jsx)(n.strong,{children:"desarrollador era responsable de crear y gestionar manualmente las dependencias"})," (objetos) que necesitaban las clases."]}),"\n",(0,s.jsx)(n.p,{children:"Esto implicaba:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Crear instancias con ",(0,s.jsx)(n.code,{children:"new"})," directamente en el c\xf3digo."]}),"\n",(0,s.jsx)(n.li,{children:"Configurar las relaciones (dependencias) manualmente."}),"\n",(0,s.jsx)(n.li,{children:"Dificultad para cambiar una implementaci\xf3n por otra (alto acoplamiento)."}),"\n",(0,s.jsxs)(n.li,{children:["Complicaciones en pruebas unitarias, ya que no era sencillo reemplazar dependencias por ",(0,s.jsx)(n.em,{children:"mocks"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo sin Spring:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Motor {\n    public void encender() {\n        System.out.println("Motor encendido");\n    }\n}\n\npublic class Coche {\n    private Motor motor;\n\n    public Coche() {\n        // Acoplamiento fuerte\n        this.motor = new Motor();\n    }\n\n    public void arrancar() {\n        motor.encender();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Coche coche = new Coche();\n        coche.arrancar();\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd34 Problema: si queremos cambiar ",(0,s.jsx)(n.code,{children:"Motor"})," por ",(0,s.jsx)(n.code,{children:"MotorElectrico"}),", hay que modificar la clase ",(0,s.jsx)(n.code,{children:"Coche"})," y recompilar el proyecto."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"ioc-container",children:"IoC container"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"IoC"})," (",(0,s.jsx)(n.em,{children:"Inversion of Control"}),") significa que el control de la creaci\xf3n y gesti\xf3n de los objetos no lo tiene el desarrollador, sino un ",(0,s.jsx)(n.strong,{children:"contenedor"})," que se encarga de:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Crear los objetos (beans)."}),"\n",(0,s.jsx)(n.li,{children:"Inyectarles las dependencias."}),"\n",(0,s.jsx)(n.li,{children:"Gestionar su ciclo de vida."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["En Spring, este contenedor se llama ",(0,s.jsx)(n.strong,{children:"IoC Container"}),", y se implementa principalmente a trav\xe9s de las clases:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ApplicationContext"})," (m\xe1s usado)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"BeanFactory"})," (nivel m\xe1s bajo)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagrama ASCII:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[applicationContext.xml / Config Java]\n         \u2193\n   IoC Container (Spring)\n         \u2193\n   Beans creados e inyectados\n         \u2193\n   Usados por la aplicaci\xf3n\n"})}),"\n",(0,s.jsx)(n.p,{children:"A continuaci\xf3n se presenta un diagrama que ilustra el concepto de IoC Container en Spring y su relaci\xf3n con los beans y la inyecci\xf3n de dependencias:"}),"\n",(0,s.jsx)("img",{src:"/img/ioc-container.png",alt:"IoC Container"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"beans",children:"Beans"}),"\n",(0,s.jsxs)(n.p,{children:["En Spring, un ",(0,s.jsx)(n.strong,{children:"Bean"})," es cualquier objeto gestionado por el IoC Container."]}),"\n",(0,s.jsx)(n.p,{children:"Caracter\xedsticas:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Puede ser definido mediante XML, anotaciones o configuraci\xf3n Java."}),"\n",(0,s.jsx)(n.li,{children:"El contenedor los crea, configura e inyecta autom\xe1ticamente."}),"\n",(0,s.jsx)(n.li,{children:"Tienen un ciclo de vida controlado por Spring."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo (definici\xf3n en XML):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="motor" class="com.ejemplo.Motor" />\n<bean id="coche" class="com.ejemplo.Coche">\n    <constructor-arg ref="motor" />\n</bean>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"dependency-injection---xml",children:"Dependency Injection - XML"}),"\n",(0,s.jsxs)(n.p,{children:["La ",(0,s.jsx)(n.strong,{children:"Inyecci\xf3n de Dependencias (DI)"})," es el proceso mediante el cual el IoC Container ",(0,s.jsx)(n.strong,{children:"proporciona"})," las dependencias que necesita un objeto, en lugar de que el objeto las cree por s\xed mismo."]}),"\n",(0,s.jsx)(n.p,{children:"En XML se puede hacer principalmente de dos formas:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"constructor-injector",children:"Constructor Injector"}),"\n",(0,s.jsxs)(n.p,{children:["Se inyectan las dependencias a trav\xe9s del ",(0,s.jsx)(n.strong,{children:"constructor"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Coche {\n    private Motor motor;\n\n    public Coche(Motor motor) {\n        this.motor = motor;\n    }\n\n    public void arrancar() {\n        motor.encender();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Definici\xf3n en XML:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="motor" class="com.ejemplo.Motor" />\n<bean id="coche" class="com.ejemplo.Coche">\n    <constructor-arg ref="motor" />\n</bean>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"setter-injector",children:"Setter Injector"}),"\n",(0,s.jsxs)(n.p,{children:["Se inyectan las dependencias a trav\xe9s de ",(0,s.jsx)(n.strong,{children:"m\xe9todos setter"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Coche {\n    private Motor motor;\n\n    public void setMotor(Motor motor) {\n        this.motor = motor;\n    }\n\n    public void arrancar() {\n        motor.encender();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Definici\xf3n en XML:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="motor" class="com.ejemplo.Motor" />\n<bean id="coche" class="com.ejemplo.Coche">\n    <property name="motor" ref="motor" />\n</bean>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"bean-scopes",children:"Bean Scopes"}),"\n",(0,s.jsxs)(n.p,{children:["El ",(0,s.jsx)(n.strong,{children:"scope"})," define cu\xe1ntas instancias de un bean crea Spring y c\xf3mo se comparten."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"singleton",children:"Singleton"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Por defecto"})," en Spring."]}),"\n",(0,s.jsx)(n.li,{children:"Solo una instancia del bean para todo el contenedor."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="motor" class="com.ejemplo.Motor" scope="singleton" />\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo visual:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[IoC Container]\n   motor \u2192 instancia \xfanica (usada en toda la app)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"prototype",children:"Prototype"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Una nueva instancia ",(0,s.jsx)(n.strong,{children:"cada vez"})," que se solicita el bean."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="motor" class="com.ejemplo.Motor" scope="prototype" />\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo visual:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[IoC Container]\n   motor \u2192 nueva instancia en cada petici\xf3n\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"life-cycle-beans",children:"Life Cycle Beans"}),"\n",(0,s.jsx)(n.p,{children:"El ciclo de vida de un bean involucra:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Creaci\xf3n de la instancia."}),"\n",(0,s.jsx)(n.li,{children:"Inyecci\xf3n de dependencias."}),"\n",(0,s.jsxs)(n.li,{children:["Inicializaci\xf3n (m\xe9todos ",(0,s.jsx)(n.code,{children:"@PostConstruct"})," y ",(0,s.jsx)(n.code,{children:"init-method"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Uso en la aplicaci\xf3n."}),"\n",(0,s.jsxs)(n.li,{children:["Destrucci\xf3n (",(0,s.jsx)(n.code,{children:"@PreDestroy"})," y ",(0,s.jsx)(n.code,{children:"destroy-method"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"postconstruct",children:"PostConstruct"}),"\n",(0,s.jsxs)(n.p,{children:["M\xe9todo ejecutado ",(0,s.jsx)(n.strong,{children:"despu\xe9s"})," de la inyecci\xf3n de dependencias, para inicializar recursos."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Definici\xf3n en XML:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="coche" class="com.ejemplo.Coche" init-method="init">\n    <property name="motor" ref="motor" />\n</bean>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"predestroy",children:"PreDestroy"}),"\n",(0,s.jsxs)(n.p,{children:["M\xe9todo ejecutado ",(0,s.jsx)(n.strong,{children:"antes"})," de destruir el bean, para liberar recursos."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Definici\xf3n en XML:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<bean id="coche" class="com.ejemplo.Coche" destroy-method="cleanup">\n    <property name="motor" ref="motor" />\n</bean>\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Diagrama ciclo de vida:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Bean creado \u2192 Dependencias inyectadas \u2192 init-method \u2192 (uso) \u2192 destroy-method \u2192 destrucci\xf3n\n"})}),"\n",(0,s.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var r=o(6540);const s={},c=r.createContext(s);function i(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);