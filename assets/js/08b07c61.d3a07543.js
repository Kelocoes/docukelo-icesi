"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9588],{7981:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>t,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"computacion-3/semana-4/intro-express-pt2","title":"Express | Typescript | Mongodb | Docker. Parte 2","description":"En esta segunda parte de la introducci\xf3n a Express, Typescript, Mongodb y Docker, vamos a continuar con la creaci\xf3n de una API RESTful utilizando estas tecnolog\xedas. En la primera parte, configuramos el entorno y creamos un servidor b\xe1sico. Ahora, vamos a a\xf1adir m\xe1s funcionalidades y mejorar nuestra aplicaci\xf3n.","source":"@site/docs/computacion-3/semana-4/intro-express-pt2.md","sourceDirName":"computacion-3/semana-4","slug":"/computacion-3/semana-4/intro-express-pt2","permalink":"/docs/computacion-3/semana-4/intro-express-pt2","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-3/semana-4/intro-express-pt2.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"S4 - Express","permalink":"/docs/category/s4---express"},"next":{"title":"Express | Typescript | Mongodb | Docker. Parte 3","permalink":"/docs/computacion-3/semana-4/intro-express-pt3"}}');var n=s(4848),o=s(8453);const i={sidebar_position:1},d="Express | Typescript | Mongodb | Docker. Parte 2",t={},l=[{value:"Aspectos a mejorar",id:"aspectos-a-mejorar",level:2},{value:"Validaci\xf3n de datos",id:"validaci\xf3n-de-datos",level:2},{value:"Middlewares",id:"middlewares",level:2},{value:"Excepciones",id:"excepciones",level:2}];function c(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"express--typescript--mongodb--docker-parte-2",children:"Express | Typescript | Mongodb | Docker. Parte 2"})}),"\n",(0,n.jsx)(r.p,{children:"En esta segunda parte de la introducci\xf3n a Express, Typescript, Mongodb y Docker, vamos a continuar con la creaci\xf3n de una API RESTful utilizando estas tecnolog\xedas. En la primera parte, configuramos el entorno y creamos un servidor b\xe1sico. Ahora, vamos a a\xf1adir m\xe1s funcionalidades y mejorar nuestra aplicaci\xf3n."}),"\n",(0,n.jsx)(r.h2,{id:"aspectos-a-mejorar",children:"Aspectos a mejorar"}),"\n",(0,n.jsx)(r.p,{children:"Hasta el momento nuestro sistema debe tener un CRUD b\xe1sico de una a dos entidades, pero hacen falta algunos retoques para que sea m\xe1s robusto y funcional. Aqu\xed hay algunas sugerencias:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Validaci\xf3n de datos"}),": Aseg\xfarate de validar los datos entrantes en tus rutas. Puedes usar bibliotecas como ",(0,n.jsx)(r.code,{children:"Joi"})," o ",(0,n.jsx)(r.code,{children:"express-validator"})," para esto."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Manejo de errores"}),": Implementa un middleware de manejo de errores para capturar y responder adecuadamente a los errores que puedan ocurrir en tu aplicaci\xf3n."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Middlewares de autenticaci\xf3n"}),": Si tu API requiere autenticaci\xf3n, implementa middlewares para verificar tokens JWT o sesiones de usuario."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Middlewares de login"}),": Implementa un middleware que registre las solicitudes entrantes, incluyendo la hora, la ruta y el m\xe9todo HTTP. Esto te ayudar\xe1 a depurar y monitorear tu aplicaci\xf3n."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Documentaci\xf3n de la API"}),": Considera usar herramientas como Swagger para documentar tu API. Esto facilitar\xe1 a otros desarrolladores entender c\xf3mo interactuar con tu servicio."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"validaci\xf3n-de-datos",children:"Validaci\xf3n de datos"}),"\n",(0,n.jsxs)(r.p,{children:["Como habr\xe1s podido observar hasta el momento, frameworks como express se construyen sobre peque\xf1os m\xf3dulos que se pueden a\xf1adir a tu aplicaci\xf3n. Uno de estos m\xf3dulos es ",(0,n.jsx)(r.code,{children:"express-validator"}),", que permite validar los datos entrantes en tus rutas de manera sencilla."]}),"\n",(0,n.jsxs)(r.p,{children:["Para instalar ",(0,n.jsx)(r.code,{children:"express-validator"}),", ejecuta el siguiente comando:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"npm install express-validator\nnpm install @types/express-validator --save-dev\n"})}),"\n",(0,n.jsx)(r.p,{children:"A partir de esto, crearemos un middleware que valide los datos de entrada en nuestras rutas. Este middleware se encontrar\xe1 antes de llegar a los controladores y se encargar\xe1 de verificar que los datos cumplan con las reglas definidas."}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Recuerda crear un archivo index.ts en la carpeta ",(0,n.jsx)(r.code,{children:"middlewares"})," y exportar el middleware de validaci\xf3n desde all\xed."]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"import { Request, Response, NextFunction } from 'express';\nimport { validationResult } from 'express-validator';\n\nexport const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {\n    const errors = validationResult(req); // Obtenemos los errores de validaci\xf3n\n    if (!errors.isEmpty()) {\n        // Si hay errores de validaci\xf3n, respondemos con un error 400\n    }\n    next();\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Como puedes observar, los middlewares son funciones que reciben tres par\xe1metros: ",(0,n.jsx)(r.code,{children:"req"}),", ",(0,n.jsx)(r.code,{children:"res"})," y ",(0,n.jsx)(r.code,{children:"next"}),". En este caso, estamos utilizando ",(0,n.jsx)(r.code,{children:"validationResult"})," de ",(0,n.jsx)(r.code,{children:"express-validator"})," para obtener los errores de validaci\xf3n. Si hay errores, respondemos con un error 400 y no llamamos a ",(0,n.jsx)(r.code,{children:"next()"}),", lo que detiene la ejecuci\xf3n del middleware. Si ejecutaramos ",(0,n.jsx)(r.code,{children:"next()"})," sin errores, la ejecuci\xf3n continuar\xeda hacia el siguiente middleware o controlador y es que s\xed, uno puede encadenar middlewares para que se ejecuten en orden."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"export const handleValidationErrors = (req: Request, res: Response, next: NextFunction) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n            message: 'Validation errors',\n            errors: errors.array().map(error => ({\n                field: error.type === 'field' ? error.path : 'unknown',\n                message: error.msg,\n                value: error.type === 'field' ? error.value : undefined\n            }))\n        });\n    }\n    next();\n};\n"})}),"\n",(0,n.jsx)(r.p,{children:"Un c\xf3digo base que para el middleware podr\xeda verse as\xed, donde si hay alg\xfan tipo de error que haya sido encontrado (representado por un array de errores) se responde con un error 400 y un mensaje que indica que hubo errores de validaci\xf3n. Adem\xe1s, se incluye un array de errores con informaci\xf3n sobre cada uno de ellos, como el campo afectado, el mensaje de error y el valor que caus\xf3 el error."}),"\n",(0,n.jsxs)(r.p,{children:["Ahora crearemos con ayuda de ",(0,n.jsx)(r.code,{children:"express-validator"})," los esquemas de validaci\xf3n para las rutas que hemos creado. Por ejemplo, si tenemos una ruta para crear un usuario, podemos definir un esquema de validaci\xf3n como este:"]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["Crea una carpeta llamada ",(0,n.jsx)(r.code,{children:"validators"})," y dentro de ella crea un archivo ",(0,n.jsx)(r.code,{children:"userValidator.ts"})," donde definiremos las validaciones para el usuario. Recuerda crear el archivo ",(0,n.jsx)(r.code,{children:"index.ts"})," en la carpeta ",(0,n.jsx)(r.code,{children:"validators"})," para exportar los validadores."]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"import { body, param } from 'express-validator';\nimport { handleValidationErrors } from '../middlewares';\n\nexport const userValidations = {\n};\n"})}),"\n",(0,n.jsx)(r.p,{children:"Dentro de este objeto tu puedes definir las validaciones que necesites. Por ejemplo, si quieres validar que el nombre de usuario sea una cadena de texto y tenga una longitud m\xednima, puedes hacer lo siguiente:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"export const userValidations = {\n    create : [\n        body('name')\n            .trim()\n            .isLength({ min: 1, max: 100 })\n            .withMessage('Name must be between 1 and 100 characters'),\n\n        body('email')\n            .trim()\n            .isEmail()\n            .withMessage('Invalid email address'),\n\n        body('password')\n            .trim()\n            .isLength({ min: 8 })\n            .withMessage('Password must be at least 8 characters long'),\n\n        handleValidationErrors\n    ]\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["En este ejemplo, estamos validando que el campo ",(0,n.jsx)(r.code,{children:"name"})," sea una cadena de texto con una longitud m\xednima de 1 y m\xe1xima de 100 caracteres, que el campo ",(0,n.jsx)(r.code,{children:"email"})," sea un correo electr\xf3nico v\xe1lido y que el campo ",(0,n.jsx)(r.code,{children:"password"})," tenga al menos 8 caracteres. Si alguna de estas validaciones falla, se enviar\xe1 un error 400 con un mensaje descriptivo.\nPara usar estas validaciones en tus rutas, simplemente importa el validador y agr\xe9galo a la ruta correspondiente. Por ejemplo:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:'import express, { Request, Response } from "express";\nimport { userController } from "../controllers";\nimport { userValidations } from "../validators";\n\nexport const router = express.Router();\n\nrouter.get("/", userController.getAll);\n\nrouter.get("/:id", userController.getOne);\n\nrouter.put("/:id", userController.update);\n\nrouter.post("/", userValidations.create, userController.create);\n\nrouter.delete("/:id", userController.delete);\n'})}),"\n",(0,n.jsx)(r.p,{children:"Ahora es tu turno de implementar las validaciones para las dem\xe1s rutas que hayas creado. Recuerda que puedes definir diferentes validaciones para cada ruta seg\xfan sea necesario."}),"\n",(0,n.jsxs)(r.p,{children:["Te adjunto alguna lista de m\xe9todos que existen en ",(0,n.jsx)(r.code,{children:"express-validator"})," para que puedas utilizarlos en tus validaciones:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"M\xe9todo"}),(0,n.jsx)(r.th,{children:"Descripci\xf3n"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"body(field)"})}),(0,n.jsx)(r.td,{children:"Valida el cuerpo de la solicitud para el campo especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"query(field)"})}),(0,n.jsx)(r.td,{children:"Valida los par\xe1metros de consulta para el campo especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"param(field)"})}),(0,n.jsx)(r.td,{children:"Valida los par\xe1metros de ruta para el campo especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"header(field)"})}),(0,n.jsx)(r.td,{children:"Valida los encabezados de la solicitud para el campo especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"cookie(field)"})}),(0,n.jsx)(r.td,{children:"Valida las cookies de la solicitud para el campo especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"check(field)"})}),(0,n.jsx)(r.td,{children:"Valida cualquier campo de la solicitud (cuerpo, consulta, ruta, encabezado o cookie)."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"exists()"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo existe en la solicitud."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isEmail()"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo es un correo electr\xf3nico v\xe1lido."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isLength({ min, max })"})}),(0,n.jsx)(r.td,{children:"Verifica si la longitud del campo est\xe1 dentro del rango especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isInt({ min, max })"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo es un n\xfamero entero dentro del rango especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isFloat({ min, max })"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo es un n\xfamero de punto flotante dentro del rango especificado."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isBoolean()"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo es un valor booleano."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"isIn(values)"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo est\xe1 dentro de un conjunto de valores permitidos."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"matches(regex)"})}),(0,n.jsx)(r.td,{children:"Verifica si el campo coincide con una expresi\xf3n regular."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"trim()"})}),(0,n.jsx)(r.td,{children:"Elimina los espacios en blanco al inicio y al final del campo."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"escape()"})}),(0,n.jsx)(r.td,{children:"Escapa caracteres especiales en el campo para prevenir inyecciones de c\xf3digo."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"toLowerCase()"})}),(0,n.jsx)(r.td,{children:"Convierte el campo a min\xfasculas."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"toUpperCase()"})}),(0,n.jsx)(r.td,{children:"Convierte el campo a may\xfasculas."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"custom(callback)"})}),(0,n.jsx)(r.td,{children:"Permite definir una validaci\xf3n personalizada mediante una funci\xf3n de callback."})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"middlewares",children:"Middlewares"}),"\n",(0,n.jsx)(r.p,{children:"Los middlewares son funciones que se ejecutan durante el ciclo de vida de una solicitud HTTP en Express. Se pueden utilizar para realizar tareas como la validaci\xf3n de datos, el manejo de errores, la autenticaci\xf3n, entre otras."}),"\n",(0,n.jsx)(r.p,{children:"De momento ya hemos creado un middleware de validaci\xf3n de datos, pero tambi\xe9n podemos crear un middleware de loggeo que registre las solicitudes entrantes. Este middleware puede ser \xfatil para depurar y monitorear la actividad de tu aplicaci\xf3n."}),"\n",(0,n.jsx)(r.p,{children:"Para crear un middleware de loggeo, puedes seguir estos pasos:"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Crea un archivo ",(0,n.jsx)(r.code,{children:"logger.ts"})," en la carpeta ",(0,n.jsx)(r.code,{children:"middlewares"}),"."]}),"\n",(0,n.jsx)(r.li,{children:"Define una funci\xf3n middleware que registre la hora, la ruta y el m\xe9todo HTTP de cada solicitud entrante."}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"export const logger = (req: Request, res: Response, next: NextFunction) => {\n    const timestamp = new Date().toISOString(); // Formato de fecha ISO 8601 ej: 2023-10-01T12:34:56.789Z\n    const startTime = Date.now(); // Marca de tiempo de inicio de la solicitud\n\n    const originalSend = res.send; // Guardamos la funci\xf3n original de env\xedo de respuesta\n    res.send = function (body) { // Sobrescribimos la funci\xf3n de env\xedo de respuesta\n        // Operaci\xf3n que se ejecuta al finalizar la solicitud\n        const endTime = Date.now();\n        const responseTime = endTime - startTime;\n\n        const logEntry = `[${timestamp}] ${req.method} ${req.baseUrl} ${req.path} | Status: ${res.statusCode} | Time: ${responseTime}ms\\n`;\n\n        const logDir = path.join(process.cwd(), 'logs');\n        if (!fs.existsSync(logDir)) {\n            fs.mkdirSync(logDir, { recursive: true });\n        }\n\n        const date = new Date().toISOString().split('T')[0];\n        const fileName = `api-${date}.log`;\n        const filePath = path.join(logDir, fileName);\n\n        fs.appendFileSync(filePath, logEntry, 'utf8');\n\n        // Llamamos a la funci\xf3n original de env\xedo de respuesta\n        return originalSend.call(this, body);\n    };\n\n    next();\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Puede resultar un poco raro esta forma de sobrescribir la funci\xf3n ",(0,n.jsx)(r.code,{children:"res.send"}),", pero es una t\xe9cnica com\xfan para agregar funcionalidad adicional a las respuestas sin perder la funcionalidad original. En palabras simples, lo que buscamos es guardar el m\xe9todo ",(0,n.jsx)(r.code,{children:"res.send"})," original en una variable ",(0,n.jsx)(r.code,{children:"originalSend"}),", luego sobrescribir ",(0,n.jsx)(r.code,{children:"res.send"})," con una nueva funci\xf3n que registre la solicitud y finalmente llamar a ",(0,n.jsx)(r.code,{children:"originalSend"})," para enviar la respuesta. De esta manera podemos registrar la solicitud y a\xfan as\xed enviar la respuesta al cliente."]}),"\n",(0,n.jsxs)(r.p,{children:["Este middleware lo registraremos en el archivo ",(0,n.jsx)(r.code,{children:"index.ts"}),"  general del proyecto, justo antes de definir las rutas. De esta manera, todas las solicitudes entrantes pasar\xe1n por este middleware y se registrar\xe1n en un archivo de log."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"app.use(logger);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true })); // Lo a\xf1adimos para poder recibir datos de formularios HTML si se da el caso\n\napp.use(logger);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n"})}),"\n",(0,n.jsx)(r.p,{children:"Hemos observado dos lugares donde podemos a\xf1adir middlewares, uno es antes de definir las rutas y otro es despu\xe9s de definir las rutas. La diferencia entre estos dos lugares es que si lo a\xf1adimos antes de las rutas, el middleware se ejecutar\xe1 para todas las solicitudes entrantes, mientras que si lo a\xf1adimos despu\xe9s de las rutas, el middleware solo se ejecutar\xe1 para las solicitudes que no coincidan con ninguna ruta definida."}),"\n",(0,n.jsx)(r.p,{children:"\xbfQu\xe9 suceder\xeda si quiero multiples middlewares ejecutados en un orden para una ruta en espec\xedfico? Puedes encadenar middlewares en la definici\xf3n de la ruta. Por ejemplo:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:'router.post(\n    "/",\n    userValidations.create, // Middleware de validaci\xf3n\n    logger, // Middleware de loggeo\n    userController.create // Controlador para manejar la creaci\xf3n del usuario\n);\n'})}),"\n",(0,n.jsx)(r.h2,{id:"excepciones",children:"Excepciones"}),"\n",(0,n.jsx)(r.p,{children:"Respecto a las excepciones, podemos crear un middleware de manejo de errores que capture cualquier error que ocurra en la aplicaci\xf3n y responda adecuadamente. Este middleware se ejecutar\xe1 despu\xe9s de todos los dem\xe1s middlewares y rutas, y se encargar\xe1 de enviar una respuesta al cliente con el error."}),"\n",(0,n.jsx)(r.p,{children:"Para crear un middleware de manejo de errores, sigue estos pasos:"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Crea un archivo ",(0,n.jsx)(r.code,{children:"errorHandler.ts"})," en la carpeta ",(0,n.jsx)(r.code,{children:"middlewares"}),"."]}),"\n",(0,n.jsx)(r.li,{children:"Define una funci\xf3n middleware que capture los errores y env\xede una respuesta adecuada."}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"import { Request, Response, NextFunction } from 'express';\n\n// Interfaz para errores personalizados\ninterface CustomError extends Error {\n    statusCode?: number;\n    isOperational?: boolean;\n}\n\n// Clase para crear errores personalizados\nexport class AppError extends Error {\n    public statusCode: number;\n    public isOperational: boolean;\n\n    constructor(message: string, statusCode: number = 500) {\n        super(message);\n        this.statusCode = statusCode;\n        this.isOperational = true;\n\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n\n// Middleware para manejar errores\nexport const errorHandler = (error: CustomError, req: Request, res: Response, next: NextFunction) => {\n    console.log('\ud83d\udea8 Error Handler ejecutado!');\n    console.log('Error:', error.message);\n    console.log('Status Code:', error.statusCode || 500);\n    console.log('URL:', req.url);\n    console.log('M\xe9todo:', req.method);\n\n    // Si es un error personalizado (AppError)\n    if (error.isOperational) {\n        return res.status(error.statusCode || 500).json({\n            success: false,\n            message: error.message\n        });\n    }\n\n    // Error gen\xe9rico (no operacional)\n    return res.status(500).json({\n        success: false,\n        message: 'Error interno del servidor',\n        error: process.env.NODE_ENV === 'dev' ? error.message : 'Algo sali\xf3 mal'\n    });\n};\n\n// Funci\xf3n helper para crear errores\nexport const createError = (message: string, statusCode: number = 500) => {\n    return new AppError(message, statusCode);\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Este middleware captura cualquier error que ocurra en la aplicaci\xf3n y verifica si es un error personalizado (de tipo ",(0,n.jsx)(r.code,{children:"AppError"}),"). Si es as\xed, responde con el c\xf3digo de estado y el mensaje del error. Si no, responde con un error gen\xe9rico 500.\nPara usar este middleware, simplemente imp\xf3rtalo y reg\xedstralo en tu archivo ",(0,n.jsx)(r.code,{children:"index.ts"})," general del proyecto, justo despu\xe9s de definir las rutas. De esta manera, cualquier error que ocurra en las rutas ser\xe1 capturado por este middleware."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"app.use('/api/users', userRoutes);\napp.use(errorHandler); // Middleware de manejo de errores\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>d});var a=s(6540);const n={},o=a.createContext(n);function i(e){const r=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);