"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5883],{1517:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"disenando-con-algoritmos/semana-6/ts-exercises","title":"Ejercicios de Typescript","description":"Este archivo contiene 30 ejercicios pensados para practicar TypeScript. Cada ejercicio tiene:","source":"@site/docs/disenando-con-algoritmos/semana-6/ts-exercises.md","sourceDirName":"disenando-con-algoritmos/semana-6","slug":"/disenando-con-algoritmos/semana-6/ts-exercises","permalink":"/docs/disenando-con-algoritmos/semana-6/ts-exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/disenando-con-algoritmos/semana-6/ts-exercises.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Typescript","permalink":"/docs/disenando-con-algoritmos/semana-6/intro-ts"},"next":{"title":"Vite","permalink":"/docs/disenando-con-algoritmos/semana-6/vite"}}');var s=r(4848),c=r(8453);const a={sidebar_position:2},o="Ejercicios de Typescript",t={},l=[{value:"Ejercicio 1: Suma simple (tipos b\xe1sicos)",id:"ejercicio-1-suma-simple-tipos-b\xe1sicos",level:3},{value:"Ejercicio 2: Par\xe1metro opcional y por defecto",id:"ejercicio-2-par\xe1metro-opcional-y-por-defecto",level:3},{value:"Ejercicio 3: Definir un objeto con interfaz",id:"ejercicio-3-definir-un-objeto-con-interfaz",level:3},{value:"Ejercicio 4: Readonly y tipos literales",id:"ejercicio-4-readonly-y-tipos-literales",level:3},{value:"Ejercicio 5: Tuplas",id:"ejercicio-5-tuplas",level:3},{value:"Ejercicio 6: Enums para estados",id:"ejercicio-6-enums-para-estados",level:3},{value:"Ejercicio 7: Gen\xe9ricos: identidad",id:"ejercicio-7-gen\xe9ricos-identidad",level:3},{value:"Ejercicio 8: Gen\xe9ricos con restricci\xf3n (length)",id:"ejercicio-8-gen\xe9ricos-con-restricci\xf3n-length",level:3},{value:"Ejercicio 9: Uni\xf3n de tipos y narrowing",id:"ejercicio-9-uni\xf3n-de-tipos-y-narrowing",level:3},{value:"Ejercicio 10: Type guard con <code>in</code>",id:"ejercicio-10-type-guard-con-in",level:3},{value:"Ejercicio 11: Narrowing con <code>instanceof</code>",id:"ejercicio-11-narrowing-con-instanceof",level:3},{value:"Ejercicio 12: Uniones discriminadas (formas geom\xe9tricas)",id:"ejercicio-12-uniones-discriminadas-formas-geom\xe9tricas",level:3},{value:"Ejercicio 13: keyof y pluck",id:"ejercicio-13-keyof-y-pluck",level:3},{value:"Ejercicio 14: Utility type: Pick",id:"ejercicio-14-utility-type-pick",level:3},{value:"Ejercicio 15: Utility type: Omit",id:"ejercicio-15-utility-type-omit",level:3},{value:"Ejercicio 16: Partial y Required",id:"ejercicio-16-partial-y-required",level:3},{value:"Ejercicio 17: ReadonlyArray y readonly",id:"ejercicio-17-readonlyarray-y-readonly",level:3},{value:"Ejercicio 18: Sobrecarga de funciones",id:"ejercicio-18-sobrecarga-de-funciones",level:3},{value:"Ejercicio 19: Mapped types: crear Optionalize",id:"ejercicio-19-mapped-types-crear-optionalize",level:3},{value:"Ejercicio 20: Tipos condicionales simples",id:"ejercicio-20-tipos-condicionales-simples",level:3},{value:"Ejercicio 21: unknown vs any",id:"ejercicio-21-unknown-vs-any",level:3},{value:"Ejercicio 22: never y chequeo exhaustivo",id:"ejercicio-22-never-y-chequeo-exhaustivo",level:3},{value:"Ejercicio 23: Index signatures / Record",id:"ejercicio-23-index-signatures--record",level:3},{value:"Ejercicio 24: M\xf3dulos: export / import",id:"ejercicio-24-m\xf3dulos-export--import",level:3},{value:"Ejercicio 25: &#39;as const&#39; para inferencia literal",id:"ejercicio-25-as-const-para-inferencia-literal",level:3},{value:"Ejercicio 26: Tuplas con elementos rest",id:"ejercicio-26-tuplas-con-elementos-rest",level:3},{value:"Ejercicio 27: Promises y async/await",id:"ejercicio-27-promises-y-asyncawait",level:3},{value:"Ejercicio 28: Type assertion y non-null assertion",id:"ejercicio-28-type-assertion-y-non-null-assertion",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ejercicios-de-typescript",children:"Ejercicios de Typescript"})}),"\n",(0,s.jsx)(n.p,{children:"Este archivo contiene 30 ejercicios pensados para practicar TypeScript. Cada ejercicio tiene:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["C\xf3digo en ",(0,s.jsx)(n.strong,{children:"JavaScript"})," (punto de partida)."]}),"\n",(0,s.jsxs)(n.li,{children:["Una ",(0,s.jsx)(n.strong,{children:"pista"})," que indica la caracter\xedstica de TypeScript a utilizar y para qu\xe9 sirve."]}),"\n",(0,s.jsxs)(n.li,{children:["La ",(0,s.jsx)(n.strong,{children:"soluci\xf3n oculta"})," usando ",(0,s.jsx)(n.code,{children:"<details>"})," para que los estudiantes puedan intentar primero."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"No est\xe1n separados por niveles; la dificultad aumenta de forma gradual."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-1-suma-simple-tipos-b\xe1sicos",children:"Ejercicio 1: Suma simple (tipos b\xe1sicos)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction sumar(a, b) {\n  return a + b;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa tipos ",(0,s.jsx)(n.code,{children:"number"})," en los par\xe1metros y en el tipo de retorno. ",(0,s.jsx)(n.code,{children:"number"})," sirve para representar valores num\xe9ricos y ayuda a evitar pasar strings por error."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function sumar(a: number, b: number): number {\n  return a + b;\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-2-par\xe1metro-opcional-y-por-defecto",children:"Ejercicio 2: Par\xe1metro opcional y por defecto"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Convierte a TypeScript\nfunction saludar(nombre, saludo) {\n  saludo = saludo || "Hola";\n  return `${saludo}, ${nombre}`;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"?"})," para par\xe1metros opcionales y valores por defecto. ",(0,s.jsx)(n.code,{children:"param?: T"})," indica que puede omitirse y ",(0,s.jsx)(n.code,{children:"= valor"})," da un valor por defecto."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function saludar(nombre: string, saludo: string = "Hola"): string {\n  return `${saludo}, ${nombre}`;\n}\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-3-definir-un-objeto-con-interfaz",children:"Ejercicio 3: Definir un objeto con interfaz"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst crearUsuario = (u) => {\n  return `Usuario ${u.nombre} creado con id ${u.id}`;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"interface"})," para declarar la forma del objeto ",(0,s.jsx)(n.code,{children:"Usuario"}),". ",(0,s.jsx)(n.code,{children:"interface"})," sirve para definir contratos de forma clara entre partes del c\xf3digo."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Usuario {\n  id: number;\n  nombre: string;\n  email?: string; // opcional\n}\n\nconst crearUsuario = (u: Usuario): string => {\n  return `Usuario ${u.nombre} creado con id ${u.id}`;\n};\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-4-readonly-y-tipos-literales",children:"Ejercicio 4: Readonly y tipos literales"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Convierte a TypeScript\nconst config = {\n  mode: "production",\n  version: "1.0.0"\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"readonly"})," para propiedades inmutables y un ",(0,s.jsx)(n.em,{children:"union type"})," literal (por ejemplo ",(0,s.jsx)(n.code,{children:'"dev" | "prod"'}),"). ",(0,s.jsx)(n.code,{children:"readonly"})," evita reasignaciones accidentales."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'type Mode = "development" | "production" | "test";\n\ninterface Config {\n  readonly mode: Mode;\n  readonly version: string;\n}\n\nconst config: Config = {\n  mode: "production",\n  version: "1.0.0"\n};\n\n// config.version = \'1.0.1\' // Error: no se puede asignar a \'version\' porque es readonly\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-5-tuplas",children:"Ejercicio 5: Tuplas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction crearPar(nombre, edad) {\n  return [nombre, edad];\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa una tupla ",(0,s.jsx)(n.code,{children:"[string, number]"})," para representar ",(0,s.jsx)(n.code,{children:"(nombre, edad)"}),". Las tuplas permiten tipos fijos en posiciones concretas."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function crearPar(nombre: string, edad: number): [string, number] {\n  return [nombre, edad];\n}\n\nconst p = crearPar("Ana", 30);\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-6-enums-para-estados",children:"Ejercicio 6: Enums para estados"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst estado = \"Activo\"; // puede ser 'Activo' o 'Inactivo'\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"enum"})," para representar un conjunto de valores nombrados. ",(0,s.jsx)(n.code,{children:"enum"})," ayuda a mantener valores constantes legibles y seguros."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'enum Estado {\n  Activo = "Activo",\n  Inactivo = "Inactivo"\n}\n\nconst estado: Estado = Estado.Activo;\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-7-gen\xe9ricos-identidad",children:"Ejercicio 7: Gen\xe9ricos: identidad"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction identidad(x) {\n  return x;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"generics"})," (",(0,s.jsx)(n.code,{children:"<T>"}),") para que la funci\xf3n preserve y acepte cualquier tipo. Los gen\xe9ricos permiten escribir funciones y tipos reutilizables y tipados."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function identidad<T>(x: T): T {\n  return x;\n}\n\nconst a = identidad<number>(123);\nconst b = identidad("hola");\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-8-gen\xe9ricos-con-restricci\xf3n-length",children:"Ejercicio 8: Gen\xe9ricos con restricci\xf3n (length)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction cuentaLongitud(x) {\n  return x.length;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"T extends { length: number }"})," para restringir a tipos que tengan ",(0,s.jsx)(n.code,{children:"length"}),". Esto garantiza que ",(0,s.jsx)(n.code,{children:"x.length"})," existe."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function cuentaLongitud<T extends { length: number }>(x: T): number {\n  return x.length;\n}\n\nconsole.log(cuentaLongitud('hola')); // 4\nconsole.log(cuentaLongitud([1,2,3])); // 3\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-9-uni\xf3n-de-tipos-y-narrowing",children:"Ejercicio 9: Uni\xf3n de tipos y narrowing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction formatear(x) {\n  if (typeof x === 'number') {\n    return x.toFixed(2);\n  }\n  return x.trim();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"string | number"})," y ",(0,s.jsx)(n.code,{children:"typeof"})," para hacer ",(0,s.jsx)(n.em,{children:"narrowing"}),". ",(0,s.jsx)(n.code,{children:"typeof"})," permite distinguir tipos primitivos en tiempo de ejecuci\xf3n."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function formatear(x: string | number): string {\n  if (typeof x === 'number') {\n    return x.toFixed(2);\n  }\n  return x.trim();\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"ejercicio-10-type-guard-con-in",children:["Ejercicio 10: Type guard con ",(0,s.jsx)(n.code,{children:"in"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction descripcion(animal) {\n  if (animal.nombre) {\n    return `Animal: ${animal.nombre}`;\n  }\n  return 'An\xf3nimo';\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"in"})," para comprobar presencia de una propiedad (p.ej. ",(0,s.jsx)(n.code,{children:"if ('nombre' in animal)"}),"). Esto sirve como ",(0,s.jsx)(n.em,{children:"type guard"})," para objetos con distintas formas."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Gato = { nombre: string; ronronea: boolean };\ntype Pez = { tipo: string; nada: boolean };\n\nfunction descripcion(animal: Gato | Pez): string {\n  if ('nombre' in animal) {\n    return `Animal: ${animal.nombre}`;\n  }\n  return 'An\xf3nimo';\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"ejercicio-11-narrowing-con-instanceof",children:["Ejercicio 11: Narrowing con ",(0,s.jsx)(n.code,{children:"instanceof"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nclass A { constructor() {} }\nclass B { constructor() {} }\n\nfunction esA(x) {\n  if (x instanceof A) return true;\n  return false;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa clases y ",(0,s.jsx)(n.code,{children:"instanceof"})," para distinguir instancias en tiempo de ejecuci\xf3n. ",(0,s.jsx)(n.code,{children:"instanceof"})," es \xfatil con clases y permite inferir el tipo dentro del bloque."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class A { a = 1 }\nclass B { b = 2 }\n\nfunction esA(x: A | B): boolean {\n  if (x instanceof A) return true;\n  return false;\n}\n\nconst a = new A();\nconsole.log(esA(a));\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-12-uniones-discriminadas-formas-geom\xe9tricas",children:"Ejercicio 12: Uniones discriminadas (formas geom\xe9tricas)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction area(shape) {\n  if (shape.kind === 'circle') {\n    return Math.PI * shape.radius * shape.radius;\n  }\n  return shape.size * shape.size;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"type"})," con una propiedad literal discriminante ",(0,s.jsx)(n.code,{children:"kind"}),". Las uniones discriminadas facilitan el ",(0,s.jsx)(n.em,{children:"narrowing"})," y la seguridad de tipos."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Circulo = { kind: 'circle'; radius: number };\ntype Cuadrado = { kind: 'square'; size: number };\ntype Shape = Circulo | Cuadrado;\n\nfunction area(shape: Shape): number {\n  if (shape.kind === 'circle') {\n    return Math.PI * shape.radius * shape.radius;\n  }\n  return shape.size * shape.size;\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-13-keyof-y-pluck",children:"Ejercicio 13: keyof y pluck"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction pluck(obj, keys) {\n  return keys.map(k => obj[k]);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"keyof"})," y gen\xe9ricos ",(0,s.jsx)(n.code,{children:"K extends keyof T"})," para asegurar que las claves existen en ",(0,s.jsx)(n.code,{children:"obj"}),". ",(0,s.jsx)(n.code,{children:"keyof"})," obtiene las claves de un tipo."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function pluck<T, K extends keyof T>(obj: T, keys: K[]): T[K][] {\n  return keys.map(k => obj[k]);\n}\n\nconst persona = { nombre: 'Ana', edad: 28 };\nconst resultados = pluck(persona, ['nombre']); // tipo: string[]\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-14-utility-type-pick",children:"Ejercicio 14: Utility type: Pick"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst user = { id: 1, nombre: 'Ana', password: '123' };\n// Queremos un objeto p\xfablico sin password\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"Pick<T, K>"})," para construir un nuevo tipo con solo algunas propiedades. ",(0,s.jsx)(n.code,{children:"Pick"})," sirve para exponer solo un subconjunto del tipo original."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Usuario {\n  id: number;\n  nombre: string;\n  password: string;\n}\n\ntype UsuarioPublico = Pick<Usuario, 'id' | 'nombre'>;\n\nconst user: UsuarioPublico = { id: 1, nombre: 'Ana' };\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-15-utility-type-omit",children:"Ejercicio 15: Utility type: Omit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst user = { id: 1, nombre: 'Ana', password: '123' };\n// Queremos un usuario sin password\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"Omit<T, K>"})," para crear un tipo sin ciertas propiedades. ",(0,s.jsx)(n.code,{children:"Omit"})," es \xfatil para eliminar campos sensibles como contrase\xf1a."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Usuario {\n  id: number;\n  nombre: string;\n  password: string;\n}\n\ntype UsuarioSinPassword = Omit<Usuario, 'password'>;\n\nconst safeUser: UsuarioSinPassword = { id: 1, nombre: 'Ana' };\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-16-partial-y-required",children:"Ejercicio 16: Partial y Required"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction actualizar(usuario, cambios) {\n  return { ...usuario, ...cambios };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"Partial<T>"})," para permitir objetos con propiedades opcionales en ",(0,s.jsx)(n.code,{children:"cambios"}),". ",(0,s.jsx)(n.code,{children:"Partial"})," convierte todas las propiedades en opcionales; ",(0,s.jsx)(n.code,{children:"Required"})," hace lo contrario."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Usuario {\n  id: number;\n  nombre: string;\n  email?: string;\n}\n\nfunction actualizar(usuario: Usuario, cambios: Partial<Usuario>): Usuario {\n  return { ...usuario, ...cambios };\n}\n\nconst u: Usuario = { id: 1, nombre: 'Ana' };\nconst actualizado = actualizar(u, { email: 'a@b.com' });\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-17-readonlyarray-y-readonly",children:"Ejercicio 17: ReadonlyArray y readonly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst nums = [1,2,3];\nnums.push(4); // deber\xeda no permitirse si queremos inmutabilidad\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"readonly"})," o ",(0,s.jsx)(n.code,{children:"ReadonlyArray<T>"})," para arrays inmutables. ",(0,s.jsx)(n.code,{children:"readonly"})," evita m\xe9todos mutativos como ",(0,s.jsx)(n.code,{children:"push"})," o ",(0,s.jsx)(n.code,{children:"splice"})," en tiempo de compilaci\xf3n."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const nums: ReadonlyArray<number> = [1, 2, 3];\n// nums.push(4); // Error: Property 'push' does not exist on type 'readonly number[]'.\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-18-sobrecarga-de-funciones",children:"Ejercicio 18: Sobrecarga de funciones"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction combinar(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') return a + b;\n  return `${a}${b}`;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.em,{children:"overloads"})," (declaraciones de firma) para expresar que la funci\xf3n puede aceptar y devolver distintos tipos. Esto mejora la inferencia para quien la use."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function combinar(a: number, b: number): number;\nfunction combinar(a: string, b: string): string;\nfunction combinar(a: any, b: any): any {\n  if (typeof a === 'number' && typeof b === 'number') return a + b;\n  return `${a}${b}`;\n}\n\nconst n = combinar(1, 2); // number\nconst s = combinar('a', 'b'); // string\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-19-mapped-types-crear-optionalize",children:"Ejercicio 19: Mapped types: crear Optionalize"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\n// Queremos un tipo igual al original pero con todas las propiedades opcionales\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Crea un mapped type ",(0,s.jsx)(n.code,{children:"Optionalize<T>"})," con ",(0,s.jsx)(n.code,{children:"[P in keyof T]?: T[P]"}),". Los mapped types transforman propiedades de un tipo a trav\xe9s de ",(0,s.jsx)(n.code,{children:"keyof"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Optionalize<T> = { [P in keyof T]?: T[P] };\n\ninterface Persona {\n  id: number;\n  nombre: string;\n}\n\ntype PersonaOpcional = Optionalize<Persona>; // { id?: number; nombre?: string }\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-20-tipos-condicionales-simples",children:"Ejercicio 20: Tipos condicionales simples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\n// Queremos un tipo que sea 'yes' si T es string, y 'no' en caso contrario\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"T extends U ? X : Y"})," para crear tipos condicionales. Sirven para calcular tipos basados en otros."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type IsString<T> = T extends string ? 'yes' : 'no';\n\ntype A = IsString<string>; // 'yes'\ntype B = IsString<number>; // 'no'\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-21-unknown-vs-any",children:"Ejercicio 21: unknown vs any"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction parse(json) {\n  return JSON.parse(json);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"unknown"})," como tipo de retorno de parse y ",(0,s.jsx)(n.em,{children:"narrowing"})," antes de usarlo. ",(0,s.jsx)(n.code,{children:"unknown"})," obliga a comprobar el tipo antes de operar, a diferencia de ",(0,s.jsx)(n.code,{children:"any"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function parse(json: string): unknown {\n  return JSON.parse(json);\n}\n\nconst data = parse('{\"x\":1}');\nif (typeof data === 'object' && data !== null && 'x' in data) {\n  // ahora TypeScript permite acceso seguro\n  console.log((data as any).x);\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-22-never-y-chequeo-exhaustivo",children:"Ejercicio 22: never y chequeo exhaustivo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction procesar(valor) {\n  switch(valor) {\n    case 'a': return 1;\n    case 'b': return 2;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa un ",(0,s.jsx)(n.code,{children:"never"})," en la rama ",(0,s.jsx)(n.code,{children:"default"})," para forzar exhaustividad (",(0,s.jsx)(n.code,{children:"assertNever"}),"). ",(0,s.jsx)(n.code,{children:"never"})," representa valores que nunca ocurren y ayuda a detectar casos no manejados."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type T = 'a' | 'b';\n\nfunction assertNever(x: never): never {\n  throw new Error('Valor inesperado: ' + x);\n}\n\nfunction procesar(valor: T): number {\n  switch (valor) {\n    case 'a': return 1;\n    case 'b': return 2;\n    default: return assertNever(valor as never);\n  }\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-23-index-signatures--record",children:"Ejercicio 23: Index signatures / Record"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst puntuaciones = {};\npuntuaciones['ana'] = 10;\npuntuaciones['juan'] = 8;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"Record<string, number>"})," o ",(0,s.jsx)(n.code,{children:"interface"})," con index signature ",(0,s.jsx)(n.code,{children:"[k: string]: number"})," para tipar objetos con claves din\xe1micas."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const puntuaciones: Record<string, number> = {};\npuntuaciones['ana'] = 10;\npuntuaciones['juan'] = 8;\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-24-m\xf3dulos-export--import",children:"Ejercicio 24: M\xf3dulos: export / import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript (dos archivos)\n// utils.js\nfunction doble(x) { return x * 2; }\nmodule.exports = { doble };\n\n// index.js\nconst { doble } = require('./utils');\nconsole.log(doble(3));\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"export"})," y ",(0,s.jsx)(n.code,{children:"import"})," con tipos. ",(0,s.jsx)(n.code,{children:"export"})," declara lo que se comparte desde un m\xf3dulo y ",(0,s.jsx)(n.code,{children:"import"})," lo consume."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// utils.ts\nexport function doble(x: number): number { return x * 2; }\n\n// index.ts\nimport { doble } from './utils';\nconsole.log(doble(3));\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-25-as-const-para-inferencia-literal",children:"Ejercicio 25: 'as const' para inferencia literal"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst opciones = { modo: 'auto', retry: 3 };\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"as const"})," para fijar valores como literales (readonly). ",(0,s.jsx)(n.code,{children:"as const"})," convierte propiedades en ",(0,s.jsx)(n.code,{children:"readonly"})," y sus valores en tipos literales."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const opciones = { modo: 'auto', retry: 3 } as const;\n// tipo de opciones.modo es 'auto' (literal), no string\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-26-tuplas-con-elementos-rest",children:"Ejercicio 26: Tuplas con elementos rest"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nfunction makeTuple(first, ...rest) {\n  return [first, ...rest];\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Declara la tupla como ",(0,s.jsx)(n.code,{children:"[string, ...number[]]"})," por ejemplo. Los rest elements en tuplas permiten mezclar longitud fija con repetici\xf3n tipada."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function makeTuple(first: string, ...rest: number[]): [string, ...number[]] {\n  return [first, ...rest];\n}\n\nconst t = makeTuple('x', 1, 2, 3); // tipo: [string, ...number[]]\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-27-promises-y-asyncawait",children:"Ejercicio 27: Promises y async/await"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nasync function fetchUser() {\n  const r = await fetch('/user');\n  return r.json();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Tipa la funci\xf3n con ",(0,s.jsx)(n.code,{children:"Promise<Usuario>"})," y el m\xe9todo ",(0,s.jsx)(n.code,{children:"json()"})," con el tipo correcto. Las promesas en TS se declaran como ",(0,s.jsx)(n.code,{children:"Promise<T>"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Usuario { id: number; nombre: string; }\n\nasync function fetchUser(): Promise<Usuario> {\n  const r = await fetch('/user');\n  const data = await r.json() as Usuario;\n  return data;\n}\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ejercicio-28-type-assertion-y-non-null-assertion",children:"Ejercicio 28: Type assertion y non-null assertion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Convierte a TypeScript\nconst el = document.getElementById('app');\nel.innerHTML = 'Hola';\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pista:"})," Usa ",(0,s.jsx)(n.code,{children:"as HTMLElement"})," o ",(0,s.jsx)(n.code,{children:"!"})," para indicar a TypeScript que conoces el tipo o que no es null. ",(0,s.jsx)(n.code,{children:"!"})," (non-null assertion) asume que el valor no es null/undefined."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const el = document.getElementById('app') as HTMLElement | null;\nif (el) {\n  el.innerHTML = 'Hola';\n}\n\n// o usando non-null assertion (con precauci\xf3n)\nconst el2 = document.getElementById('app')!;\nel2.innerHTML = 'Hola';\n"})})]}),"\n",(0,s.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const s={},c=i.createContext(s);function a(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);