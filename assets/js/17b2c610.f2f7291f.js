"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2347],{5595:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"computacion-2/semana-7/test-spring","title":"Pruebas en Spring Boot","description":"Esta gu\xeda est\xe1 dise\xf1ada para que puedan comprender c\xf3mo funcionan las pruebas en Spring Boot usando JUnit y Mockito, incluyendo pruebas de integraci\xf3n y unitarias, as\xed como el uso de un application.properties separado para pruebas.","source":"@site/docs/computacion-2/semana-7/test-spring.md","sourceDirName":"computacion-2/semana-7","slug":"/computacion-2/semana-7/test-spring","permalink":"/docs/computacion-2/semana-7/test-spring","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-2/semana-7/test-spring.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"S7 - Tests","permalink":"/docs/category/s7---tests"},"next":{"title":"S8","permalink":"/docs/category/s8"}}');var i=s(4848),a=s(8453);const t={sidebar_position:1},c="Pruebas en Spring Boot",o={},l=[{value:"Diferencias entre pruebas unitarias e integraci\xf3n",id:"diferencias-entre-pruebas-unitarias-e-integraci\xf3n",level:2},{value:"Pruebas unitarias",id:"pruebas-unitarias",level:3},{value:"Pruebas de integraci\xf3n",id:"pruebas-de-integraci\xf3n",level:3},{value:"\xbfPor qu\xe9 es \xfatil el sistema de capas en Spring?",id:"por-qu\xe9-es-\xfatil-el-sistema-de-capas-en-spring",level:3},{value:"1. Pruebas con JUnit en Spring Boot",id:"1-pruebas-con-junit-en-spring-boot",level:2},{value:"1.1 Configuraci\xf3n b\xe1sica",id:"11-configuraci\xf3n-b\xe1sica",level:3},{value:"1.2 Ejemplo de prueba unitaria",id:"12-ejemplo-de-prueba-unitaria",level:3},{value:"Ejemplo m\xe1s realista: Servicio de transferencia bancaria",id:"ejemplo-m\xe1s-realista-servicio-de-transferencia-bancaria",level:3},{value:"1.3 Assert m\xe1s comunes en JUnit",id:"13-assert-m\xe1s-comunes-en-junit",level:3},{value:"1.4 Pruebas de integraci\xf3n",id:"14-pruebas-de-integraci\xf3n",level:3},{value:"1.5 Application.properties separado para pruebas",id:"15-applicationproperties-separado-para-pruebas",level:3},{value:"2. Pruebas con Mockito",id:"2-pruebas-con-mockito",level:2},{value:"2.1 Dependencias necesarias",id:"21-dependencias-necesarias",level:3},{value:"2.2 Ejemplo de uso de Mockito",id:"22-ejemplo-de-uso-de-mockito",level:3},{value:"3. Explicaci\xf3n de anotaciones y funciones clave",id:"3-explicaci\xf3n-de-anotaciones-y-funciones-clave",level:2},{value:"@SpringBootTest",id:"springboottest",level:3},{value:"@ExtendWith(MockitoExtension.class)",id:"extendwithmockitoextensionclass",level:3},{value:"@Mock",id:"mock",level:3},{value:"@InjectMocks",id:"injectmocks",level:3},{value:"@ActiveProfiles(&quot;test&quot;)",id:"activeprofilestest",level:3},{value:"Mockito.when(...).thenReturn(...)",id:"mockitowhenthenreturn",level:3},{value:"Mockito.verify(...)",id:"mockitoverify",level:3},{value:"4. Cheatsheet ampliado de asserts y Mockito",id:"4-cheatsheet-ampliado-de-asserts-y-mockito",level:2},{value:"Asserts de JUnit",id:"asserts-de-junit",level:3},{value:"Mockito",id:"mockito",level:3},{value:"5. Buenas pr\xe1cticas",id:"5-buenas-pr\xe1cticas",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pruebas-en-spring-boot",children:"Pruebas en Spring Boot"})}),"\n",(0,i.jsxs)(n.p,{children:["Esta gu\xeda est\xe1 dise\xf1ada para que puedan comprender c\xf3mo funcionan las pruebas en ",(0,i.jsx)(n.strong,{children:"Spring Boot"})," usando ",(0,i.jsx)(n.strong,{children:"JUnit"})," y ",(0,i.jsx)(n.strong,{children:"Mockito"}),", incluyendo pruebas de integraci\xf3n y unitarias, as\xed como el uso de un ",(0,i.jsx)(n.code,{children:"application.properties"})," separado para pruebas."]}),"\n",(0,i.jsx)(n.h2,{id:"diferencias-entre-pruebas-unitarias-e-integraci\xf3n",children:"Diferencias entre pruebas unitarias e integraci\xf3n"}),"\n",(0,i.jsx)(n.h3,{id:"pruebas-unitarias",children:"Pruebas unitarias"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Definici\xf3n:"})," Eval\xfaan el funcionamiento de una unidad de c\xf3digo aislada (por ejemplo, un m\xe9todo de una clase de servicio o utiler\xeda), sin depender de otros componentes del sistema ni de recursos externos (como bases de datos)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ventajas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Son r\xe1pidas de ejecutar."}),"\n",(0,i.jsx)(n.li,{children:"Permiten detectar errores en l\xf3gica interna de manera precisa."}),"\n",(0,i.jsx)(n.li,{children:"F\xe1ciles de mantener y refactorizar."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desventajas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No detectan problemas de integraci\xf3n entre componentes."}),"\n",(0,i.jsx)(n.li,{children:"Pueden requerir mocks para simular dependencias."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pruebas-de-integraci\xf3n",children:"Pruebas de integraci\xf3n"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Definici\xf3n:"})," Eval\xfaan c\xf3mo interact\xfaan varios componentes del sistema entre s\xed y con recursos externos (por ejemplo, servicios, repositorios, bases de datos, etc.)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ventajas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Detectan errores en la interacci\xf3n entre capas o m\xf3dulos."}),"\n",(0,i.jsx)(n.li,{children:"Permiten validar la configuraci\xf3n y el wiring de Spring."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desventajas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Son m\xe1s lentas que las unitarias."}),"\n",(0,i.jsx)(n.li,{children:"Pueden ser m\xe1s dif\xedciles de depurar si fallan."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"por-qu\xe9-es-\xfatil-el-sistema-de-capas-en-spring",children:"\xbfPor qu\xe9 es \xfatil el sistema de capas en Spring?"}),"\n",(0,i.jsx)(n.p,{children:"Spring promueve una arquitectura en capas (modelo, repositorio, servicio, controlador), lo que permite:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Probar cada capa de forma independiente (por ejemplo, probar la l\xf3gica de negocio sin depender de la base de datos real)."}),"\n",(0,i.jsx)(n.li,{children:"Reemplazar dependencias por mocks o stubs en pruebas unitarias."}),"\n",(0,i.jsx)(n.li,{children:"Facilitar el mantenimiento y la escalabilidad del c\xf3digo."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ejemplo de capas:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modelo:"})," Representa los datos (clases Java simples, entidades JPA)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repositorio:"})," Acceso a datos (interfaces que extienden JpaRepository, etc.)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Servicio:"})," L\xf3gica de negocio (clases con @Service)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Controlador:"})," Manejo de peticiones HTTP (clases con @RestController)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-pruebas-con-junit-en-spring-boot",children:"1. Pruebas con JUnit en Spring Boot"}),"\n",(0,i.jsx)(n.h3,{id:"11-configuraci\xf3n-b\xe1sica",children:"1.1 Configuraci\xf3n b\xe1sica"}),"\n",(0,i.jsxs)(n.p,{children:["Para empezar a escribir pruebas en Spring Boot, necesitamos incluir las dependencias en ",(0,i.jsx)(n.code,{children:"pom.xml"}),", esto solamente es necesario si no est\xe1s usando el ",(0,i.jsx)(n.strong,{children:"Spring Boot Starter Parent"})," que por defecto se incluye al trabajar con el ",(0,i.jsx)(n.strong,{children:"Spring Initializr"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    \x3c!-- Spring Boot Starter Test --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"12-ejemplo-de-prueba-unitaria",children:"1.2 Ejemplo de prueba unitaria"}),"\n",(0,i.jsx)(n.p,{children:"Supongamos que tenemos un servicio que suma dos n\xfameros:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class CalculatorService {\n    public int sum(int a, int b) {\n        return a + b;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"La prueba unitaria ser\xeda (sin contexto de Spring, solo la clase):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CalculatorServiceTest {\n    @Test\n    void testSum() {\n        CalculatorService service = new CalculatorService();\n        assertEquals(5, service.sum(2, 3));\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-m\xe1s-realista-servicio-de-transferencia-bancaria",children:"Ejemplo m\xe1s realista: Servicio de transferencia bancaria"}),"\n",(0,i.jsx)(n.p,{children:"Sup\xf3n que tienes un servicio que transfiere dinero entre cuentas y depende de un repositorio:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class BankService {\n    @Autowired\n    private AccountRepository accountRepository;\n\n    public boolean transfer(Long fromId, Long toId, double amount) {\n        Account from = accountRepository.findById(fromId).orElseThrow();\n        Account to = accountRepository.findById(toId).orElseThrow();\n        if (from.getBalance() < amount) return false;\n        from.setBalance(from.getBalance() - amount);\n        to.setBalance(to.getBalance() + amount);\n        accountRepository.save(from);\n        accountRepository.save(to);\n        return true;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Prueba unitaria usando Mockito:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MockitoExtension.class)\npublic class BankServiceTest {\n    @Mock\n    private AccountRepository accountRepository;\n\n    @InjectMocks\n    private BankService bankService;\n\n    @Test\n    void testTransferSuccess() {\n        Account from = new Account(1L, 100.0);\n        Account to = new Account(2L, 50.0);\n        when(accountRepository.findById(1L)).thenReturn(Optional.of(from));\n        when(accountRepository.findById(2L)).thenReturn(Optional.of(to));\n\n        boolean result = bankService.transfer(1L, 2L, 30.0);\n\n        assertTrue(result);\n        assertEquals(70.0, from.getBalance());\n        assertEquals(80.0, to.getBalance());\n        verify(accountRepository).save(from);\n        verify(accountRepository).save(to);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"13-assert-m\xe1s-comunes-en-junit",children:"1.3 Assert m\xe1s comunes en JUnit"}),"\n",(0,i.jsxs)(n.p,{children:["Aqu\xed una tabla con los ",(0,i.jsx)(n.strong,{children:"asserts"})," m\xe1s usados en JUnit:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Assert"}),(0,i.jsx)(n.th,{children:"Descripci\xf3n"}),(0,i.jsx)(n.th,{children:"Ejemplo"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertEquals(expected, actual)"}),(0,i.jsx)(n.td,{children:"Verifica que los valores sean iguales"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertEquals(5, sum);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotEquals(expected, actual)"}),(0,i.jsx)(n.td,{children:"Verifica que los valores no sean iguales"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertNotEquals(4, sum);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertTrue(condition)"}),(0,i.jsx)(n.td,{children:"Verifica que la condici\xf3n sea verdadera"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertTrue(isActive);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertFalse(condition)"}),(0,i.jsx)(n.td,{children:"Verifica que la condici\xf3n sea falsa"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertFalse(isDeleted);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNull(object)"}),(0,i.jsx)(n.td,{children:"Verifica que el objeto sea null"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertNull(user);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotNull(object)"}),(0,i.jsx)(n.td,{children:"Verifica que el objeto no sea null"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertNotNull(user);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertArrayEquals(expected, actual)"}),(0,i.jsx)(n.td,{children:"Compara dos arrays"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertArrayEquals(new int[]{1,2}, arr);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertThrows(expectedType, executable)"}),(0,i.jsx)(n.td,{children:"Verifica que se lance una excepci\xf3n espec\xedfica"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertThrows(IllegalArgumentException.class, () -> service.doWork(null));"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertAll(executables...)"}),(0,i.jsx)(n.td,{children:"Agrupa varios asserts y ejecuta todos, mostrando todos los fallos"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertAll(() -> assertTrue(x), () -> assertEquals(2, y));"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertIterableEquals(expected, actual)"}),(0,i.jsx)(n.td,{children:"Compara dos iterables"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertIterableEquals(list1, list2);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertLinesMatch(expected, actual)"}),(0,i.jsx)(n.td,{children:"Compara listas de strings con patrones"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertLinesMatch(expectedLines, actualLines);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertTimeout(duration, executable)"}),(0,i.jsx)(n.td,{children:"Falla si el c\xf3digo tarda m\xe1s de lo esperado"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertTimeout(Duration.ofMillis(100), () -> foo());"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertSame(expected, actual)"}),(0,i.jsx)(n.td,{children:"Verifica que ambos objetos sean la misma instancia"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertSame(obj1, obj2);"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotSame(expected, actual)"}),(0,i.jsx)(n.td,{children:"Verifica que ambos objetos no sean la misma instancia"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"assertNotSame(obj1, obj2);"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"14-pruebas-de-integraci\xf3n",children:"1.4 Pruebas de integraci\xf3n"}),"\n",(0,i.jsx)(n.p,{children:"Para pruebas de integraci\xf3n, normalmente necesitamos levantar parte del contexto de Spring y, a veces, conectarnos a una base de datos de prueba."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@ActiveProfiles("test") // Utiliza application-test.properties\npublic class UserServiceIntegrationTest {\n\n    @Autowired\n    private UserService userService;\n\n    @Test\n    public void testCreateUser() {\n        User user = new User(null, "Juan", "juan@example.com");\n        User saved = userService.saveUser(user);\n        assertNotNull(saved.getId());\n        assertEquals("Juan", saved.getName());\n    }\n\n    @Test\n    public void testFindUserByEmail() {\n        userService.saveUser(new User(null, "Ana", "ana@example.com"));\n        User found = userService.findUserByEmail("ana@example.com");\n        assertNotNull(found);\n        assertEquals("Ana", found.getName());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ejemplo de integraci\xf3n con base de datos en memoria:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")\npublic class AccountRepositoryIntegrationTest {\n    @Autowired\n    private AccountRepository accountRepository;\n\n    @Test\n    void testSaveAndFind() {\n        Account acc = new Account(null, 200.0);\n        Account saved = accountRepository.save(acc);\n        assertNotNull(saved.getId());\n        Account found = accountRepository.findById(saved.getId()).orElse(null);\n        assertNotNull(found);\n        assertEquals(200.0, found.getBalance());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"15-applicationproperties-separado-para-pruebas",children:"1.5 Application.properties separado para pruebas"}),"\n",(0,i.jsxs)(n.p,{children:["Puedes crear un archivo ",(0,i.jsx)(n.code,{children:"application-test.properties"})," en ",(0,i.jsx)(n.code,{children:"src/test/resources"})," y a\xf1adir propiedades espec\xedficas para pruebas, como base de datos en memoria:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.username=sa\nspring.datasource.password=\nspring.jpa.hibernate.ddl-auto=create-drop\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Para indicarle a Spring que use este archivo durante las pruebas, usa la anotaci\xf3n ",(0,i.jsx)(n.code,{children:'@ActiveProfiles("test")'})," en tu clase de prueba."]}),"\n",(0,i.jsx)(n.h2,{id:"2-pruebas-con-mockito",children:"2. Pruebas con Mockito"}),"\n",(0,i.jsxs)(n.p,{children:["Mockito permite ",(0,i.jsx)(n.strong,{children:"mockear"})," dependencias, para que no se ejecuten m\xe9todos reales y podamos aislar la unidad que estamos probando. Usualmente tambi\xe9n viene incluido en el ",(0,i.jsx)(n.code,{children:"spring-boot-starter-test"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"21-dependencias-necesarias",children:"2.1 Dependencias necesarias"}),"\n",(0,i.jsx)(n.p,{children:"Si usas Spring Boot Starter Test, ya tienes Mockito incluido. Si no, agrega:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-core</artifactId>\n    <version>5.0.0</version>\n    <scope>test</scope>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"22-ejemplo-de-uso-de-mockito",children:"2.2 Ejemplo de uso de Mockito"}),"\n",(0,i.jsx)(n.p,{children:"Supongamos un servicio que depende de un repositorio:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    public User findUserByEmail(String email) {\n        return userRepository.findByEmail(email).orElse(null);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"La prueba con Mockito ser\xeda:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\npublic class UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    public void testFindUserByEmail() {\n        User mockUser = new User(1L, "Juan", "juan@example.com");\n        Mockito.when(userRepository.findByEmail("juan@example.com")).thenReturn(Optional.of(mockUser));\n\n        User user = userService.findUserByEmail("juan@example.com");\n\n        assertNotNull(user);\n        assertEquals("Juan", user.getName());\n        Mockito.verify(userRepository).findByEmail("juan@example.com");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-explicaci\xf3n-de-anotaciones-y-funciones-clave",children:"3. Explicaci\xf3n de anotaciones y funciones clave"}),"\n",(0,i.jsx)(n.h3,{id:"springboottest",children:"@SpringBootTest"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Levanta el contexto completo de Spring para pruebas de integraci\xf3n."}),"\n",(0,i.jsx)(n.li,{children:"Permite inyectar beans reales con @Autowired."}),"\n",(0,i.jsx)(n.li,{children:'\xdatil para probar la aplicaci\xf3n "como si estuviera corriendo".'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"extendwithmockitoextensionclass",children:"@ExtendWith(MockitoExtension.class)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Habilita el soporte de Mockito en JUnit 5."}),"\n",(0,i.jsx)(n.li,{children:"Permite usar @Mock y @InjectMocks."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mock",children:"@Mock"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Crea un mock (objeto simulado) de la clase o interfaz indicada."}),"\n",(0,i.jsx)(n.li,{children:"Se usa sobre campos de la clase de prueba."}),"\n",(0,i.jsxs)(n.li,{children:["Ejemplo: ",(0,i.jsx)(n.code,{children:"@Mock private UserRepository userRepository;"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"injectmocks",children:"@InjectMocks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Crea una instancia real de la clase y le inyecta los mocks declarados en la prueba."}),"\n",(0,i.jsxs)(n.li,{children:["Ejemplo: ",(0,i.jsx)(n.code,{children:"@InjectMocks private UserService userService;"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"activeprofilestest",children:'@ActiveProfiles("test")'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Indica a Spring qu\xe9 perfil de configuraci\xf3n usar (por ejemplo, para usar una base de datos en memoria en pruebas)."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mockitowhenthenreturn",children:"Mockito.when(...).thenReturn(...)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Permite definir el comportamiento de un mock: "cuando se llame a este m\xe9todo con estos par\xe1metros, devuelve este valor".'}),"\n",(0,i.jsxs)(n.li,{children:["Ejemplo: ",(0,i.jsx)(n.code,{children:'when(userRepository.findByEmail("juan@example.com")).thenReturn(Optional.of(user));'})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mockitoverify",children:"Mockito.verify(...)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Verifica que un m\xe9todo de un mock fue llamado (y cu\xe1ntas veces, con qu\xe9 argumentos, etc.)."}),"\n",(0,i.jsxs)(n.li,{children:["Ejemplo: ",(0,i.jsx)(n.code,{children:'verify(userRepository).findByEmail("juan@example.com");'})]}),"\n",(0,i.jsx)(n.li,{children:"\xdatil para asegurar que la l\xf3gica de negocio interact\xfaa correctamente con sus dependencias."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-cheatsheet-ampliado-de-asserts-y-mockito",children:"4. Cheatsheet ampliado de asserts y Mockito"}),"\n",(0,i.jsx)(n.h3,{id:"asserts-de-junit",children:"Asserts de JUnit"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"M\xe9todo"}),(0,i.jsx)(n.th,{children:"Descripci\xf3n"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertEquals(a, b)"}),(0,i.jsx)(n.td,{children:"Verifica igualdad"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotEquals(a, b)"}),(0,i.jsx)(n.td,{children:"Verifica desigualdad"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertTrue(cond)"}),(0,i.jsx)(n.td,{children:"Verifica que cond es true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertFalse(cond)"}),(0,i.jsx)(n.td,{children:"Verifica que cond es false"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNull(obj)"}),(0,i.jsx)(n.td,{children:"Verifica que obj es null"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotNull(obj)"}),(0,i.jsx)(n.td,{children:"Verifica que obj no es null"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertArrayEquals(a, b)"}),(0,i.jsx)(n.td,{children:"Compara arrays"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertIterableEquals(a, b)"}),(0,i.jsx)(n.td,{children:"Compara iterables"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertLinesMatch(a, b)"}),(0,i.jsx)(n.td,{children:"Compara listas de strings"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertTimeout(d, exec)"}),(0,i.jsx)(n.td,{children:"Falla si exec tarda m\xe1s de d"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertSame(a, b)"}),(0,i.jsx)(n.td,{children:"Verifica que son la misma instancia"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertNotSame(a, b)"}),(0,i.jsx)(n.td,{children:"Verifica que no son la misma instancia"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertAll(exec...)"}),(0,i.jsx)(n.td,{children:"Ejecuta varios asserts juntos"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"assertThrows(e, exec)"}),(0,i.jsx)(n.td,{children:"Verifica que exec lanza excepci\xf3n e"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"mockito",children:"Mockito"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"M\xe9todo"}),(0,i.jsx)(n.th,{children:"Descripci\xf3n"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"when(mock.metodo()).thenReturn(valor)"}),(0,i.jsx)(n.td,{children:"Define el valor de retorno de un mock"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"when(mock.metodo()).thenThrow(ex)"}),(0,i.jsx)(n.td,{children:"Hace que el mock lance una excepci\xf3n"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"verify(mock).metodo()"}),(0,i.jsx)(n.td,{children:"Verifica que se llam\xf3 al m\xe9todo"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"verify(mock, times(n)).metodo()"}),(0,i.jsx)(n.td,{children:"Verifica que se llam\xf3 n veces"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"verifyNoMoreInteractions(mock)"}),(0,i.jsx)(n.td,{children:"Verifica que no hubo m\xe1s interacciones"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doThrow(ex).when(mock).metodo()"}),(0,i.jsx)(n.td,{children:"Hace que el mock lance excepci\xf3n al llamar"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"doNothing().when(mock).metodo()"}),(0,i.jsx)(n.td,{children:"Hace que el mock no haga nada"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"reset(mock)"}),(0,i.jsx)(n.td,{children:"Resetea el mock"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"5-buenas-pr\xe1cticas",children:"5. Buenas pr\xe1cticas"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Escribe pruebas unitarias para l\xf3gica de negocio y pruebas de integraci\xf3n para flujos completos."}),"\n",(0,i.jsx)(n.li,{children:"Usa mocks para aislar dependencias externas."}),"\n",(0,i.jsx)(n.li,{children:"Mant\xe9n tus pruebas r\xe1pidas y f\xe1ciles de entender."}),"\n",(0,i.jsxs)(n.li,{children:["Nombra los m\xe9todos de prueba de forma descriptiva. Ejemplo: ",(0,i.jsx)(n.code,{children:"shouldReturnUserWhenEmailExists()"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);