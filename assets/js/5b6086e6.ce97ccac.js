"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5827],{6051:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"disenando-con-algoritmos/semana-4/dom-exercises","title":"Ejercicios de DOM y Eventos en JavaScript","description":"\xa1Hola! Aqu\xed tienes una serie de ejercicios progresivos para practicar DOM, eventos, manejo de estado y consumo de APIs.","source":"@site/docs/disenando-con-algoritmos/semana-4/dom-exercises.md","sourceDirName":"disenando-con-algoritmos/semana-4","slug":"/disenando-con-algoritmos/semana-4/dom-exercises","permalink":"/docs/disenando-con-algoritmos/semana-4/dom-exercises","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/disenando-con-algoritmos/semana-4/dom-exercises.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Manipulaci\xf3n del DOM, Eventos y Web Storage en JavaScript","permalink":"/docs/disenando-con-algoritmos/semana-4/dom"},"next":{"title":"Ejercicios de Web Storage en JavaScript","permalink":"/docs/disenando-con-algoritmos/semana-4/web-storage-exercises"}}');var s=a(4848),o=a(8453);const t={sidebar_position:2},i="Ejercicios de DOM y Eventos en JavaScript",c={},l=[{value:"1. Bot\xf3n cambio color \u2192 <em>Event listeners b\xe1sicos</em>",id:"1-bot\xf3n-cambio-color--event-listeners-b\xe1sicos",level:2},{value:"2. Contador +/- \u2192 <em>Manejo de estado simple</em>",id:"2-contador----manejo-de-estado-simple",level:2},{value:"3. Input + lista \u2192 <em>Forms y creaci\xf3n de elementos</em>",id:"3-input--lista--forms-y-creaci\xf3n-de-elementos",level:2},{value:"4. Buscador tiempo real \u2192 <em>Filtrado y eventos input</em>",id:"4-buscador-tiempo-real--filtrado-y-eventos-input",level:2},{value:"5. To-do list \u2192 <em>Delegaci\xf3n de eventos y estado complejo</em>",id:"5-to-do-list--delegaci\xf3n-de-eventos-y-estado-complejo",level:2},{value:"6. Tu primera API \u2192 <em>Rick y Morty personajes</em>",id:"6-tu-primera-api--rick-y-morty-personajes",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ejercicios-de-dom-y-eventos-en-javascript",children:"Ejercicios de DOM y Eventos en JavaScript"})}),"\n",(0,s.jsxs)(n.p,{children:["\xa1Hola! Aqu\xed tienes una serie de ejercicios progresivos para practicar ",(0,s.jsx)(n.strong,{children:"DOM"}),", ",(0,s.jsx)(n.strong,{children:"eventos"}),", ",(0,s.jsx)(n.strong,{children:"manejo de estado"})," y ",(0,s.jsx)(n.strong,{children:"consumo de APIs."})]}),"\n",(0,s.jsxs)(n.p,{children:["Puedes tomar como punto de partida el c\xf3digo que est\xe1 debajo de las instrucciones. Te recomiendo usar ",(0,s.jsx)(n.code,{children:'<script src="script.js">'})," en vez de la etiqueta ",(0,s.jsx)(n.code,{children:"<script>"})," tradicional, as\xed mantendr\xe1s tus archivos mejor organizados."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Estos ejercicios no tienen CSS, pero puedes a\xf1adirlos si gustas."})}),"\n",(0,s.jsxs)(n.h2,{id:"1-bot\xf3n-cambio-color--event-listeners-b\xe1sicos",children:["1. Bot\xf3n cambio color \u2192 ",(0,s.jsx)(n.em,{children:"Event listeners b\xe1sicos"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n","Crear un bot\xf3n que cambie el color de fondo de la p\xe1gina al hacer click."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Bot\xf3n cambio color</title>\n  </head>\n  <body>\n    <button id="btnColor">Cambiar color</button>\n\n    <script>\n      // Paso 1: Selecciona el bot\xf3n con document.getElementById\n      // Paso 2: Agrega un event listener al bot\xf3n para detectar el click\n      // Paso 3: Cambia el color de fondo de body din\xe1micamente\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"2-contador----manejo-de-estado-simple",children:["2. Contador +/- \u2192 ",(0,s.jsx)(n.em,{children:"Manejo de estado simple"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n","Crear un contador con botones ",(0,s.jsx)(n.code,{children:"+"})," y ",(0,s.jsx)(n.code,{children:"-"})," que muestre el valor en un ",(0,s.jsx)(n.code,{children:"<span>"})," (evitar n\xfameros negativos)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Contador</title>\n  </head>\n  <body>\n    <button id="decrementar">-</button>\n    <span id="valor">0</span>\n    <button id="incrementar">+</button>\n\n    <script>\n      // Paso 1: Inicializa una variable para el valor del contador\n      // Paso 2: Selecciona los botones y el span\n      // Paso 3: Agrega listeners a los botones para modificar el valor\n      // Paso 4: Aseg\xfarate de que el valor no sea negativo\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"3-input--lista--forms-y-creaci\xf3n-de-elementos",children:["3. Input + lista \u2192 ",(0,s.jsx)(n.em,{children:"Forms y creaci\xf3n de elementos"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n","Crear un input que, al escribir algo y presionar ",(0,s.jsx)(n.strong,{children:"Enter"}),", agregue un ",(0,s.jsx)(n.code,{children:"<li>"})," a una lista ",(0,s.jsx)(n.code,{children:"<ul>"})," (y vac\xede el input despu\xe9s)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Input y Lista</title>\n  </head>\n  <body>\n    <input\n      type="text"\n      id="entrada"\n      placeholder="Escribe algo y presiona Enter"\n    />\n    <ul id="lista"></ul>\n\n    <script>\n      // Paso 1: Selecciona el input y la lista\n      // Paso 2: Agrega un listener al input para detectar Enter (keyup o keydown)\n      // Paso 3: Crea un nuevo <li> con el valor del input y agr\xe9galo al ul\n      // Paso 4: Limpia el input despu\xe9s de agregar\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"4-buscador-tiempo-real--filtrado-y-eventos-input",children:["4. Buscador tiempo real \u2192 ",(0,s.jsx)(n.em,{children:"Filtrado y eventos input"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n","Crear un buscador que filtre una lista de nombres en tiempo real mientras escribes en un input."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Buscador</title>\n  </head>\n  <body>\n    <input type="text" id="buscador" placeholder="Buscar nombre" />\n    <ul id="nombres">\n      <li>Mar\xeda</li>\n      <li>Carlos</li>\n      <li>Luc\xeda</li>\n      <li>Juan</li>\n      <li>Fernanda</li>\n    </ul>\n\n    <script>\n      // Paso 1: Selecciona el input y los <li>\n      // Paso 2: Escucha el evento input\n      // Paso 3: Filtra los nombres mostrando solo los que coincidan con lo escrito\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"5-to-do-list--delegaci\xf3n-de-eventos-y-estado-complejo",children:["5. To-do list \u2192 ",(0,s.jsx)(n.em,{children:"Delegaci\xf3n de eventos y estado complejo"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n","Hacer una to-do list donde los \xedtems se puedan marcar como completados al hacer click y borrarlos con un bot\xf3n de eliminar (usando ",(0,s.jsx)(n.strong,{children:"delegaci\xf3n de eventos"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <title>To-do list</title>\n  </head>\n  <body>\n    <input\n      type="text"\n      id="tarea"\n      placeholder="Escribe una tarea y presiona Enter"\n    />\n    <ul id="listaTareas"></ul>\n\n    <script>\n      // Paso 1: Selecciona el input y la lista\n      // Paso 2: Escucha Enter en el input y agrega <li> con el texto + un bot\xf3n "Eliminar"\n      // Paso 3: Usa delegaci\xf3n de eventos en el ul para detectar clicks en tareas o botones\n      // Paso 4: Si es tarea \u2192 alternar completado; si es bot\xf3n \u2192 eliminar la tarea\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"6-tu-primera-api--rick-y-morty-personajes",children:["6. Tu primera API \u2192 ",(0,s.jsx)(n.em,{children:"Rick y Morty personajes"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\xbfQu\xe9 es una API?"}),(0,s.jsx)(n.br,{}),"\n",'Una API es como un "camarero digital" que te permite pedir informaci\xf3n a otros sitios web. En este caso, vamos a pedirle a la ',(0,s.jsx)(n.a,{href:"https://rickandmortyapi.com/api/character",children:"Rick and Morty API"})," que nos traiga informaci\xf3n de los personajes del multiverso."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consigna:"}),(0,s.jsx)(n.br,{}),"\n",'Cuando hagas clic en "Cargar Personajes", tu p\xe1gina ir\xe1 a buscar personajes de Rick y Morty y los mostrar\xe1 con sus fotos y datos.']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pasos a seguir:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'Conecta el bot\xf3n para que "escuche" cuando le hagas clic'}),"\n",(0,s.jsxs)(n.li,{children:["Usa ",(0,s.jsx)(n.code,{children:"fetch()"})," para pedirle datos a la API (como hacer un pedido por tel\xe9fono)"]}),"\n",(0,s.jsxs)(n.li,{children:["Convierte la respuesta en algo que JavaScript entienda con ",(0,s.jsx)(n.code,{children:".json()"})]}),"\n",(0,s.jsxs)(n.li,{children:["Accede al array de personajes con ",(0,s.jsx)(n.code,{children:"data.results"})," y toma los primeros 6"]}),"\n",(0,s.jsx)(n.li,{children:"Por cada personaje, crea una tarjeta con su foto, nombre y estado"}),"\n",(0,s.jsx)(n.li,{children:'Agrega un mensaje de "Cargando..." y maneja si algo sale mal'}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udca1 Pista:"})," ",(0,s.jsx)(n.code,{children:"fetch()"})," siempre necesita ",(0,s.jsx)(n.code,{children:"await"})," porque toma tiempo traer datos de internet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Rick y Morty API - Ejercicio</title>\n  </head>\n  <body>\n    <h1>Personajes de Rick y Morty</h1>\n    <button id="btnCargar">Cargar Personajes</button>\n    <div id="contenedor"></div>\n\n    <script>\n      // INSTRUCCIONES:\n      // Paso 1: Selecciona el bot\xf3n (#btnCargar) y el contenedor (#contenedor)\n      // Paso 2: Crea una funci\xf3n async que:\n      //   - Muestre "Cargando personajes..." en el contenedor\n      //   - Use fetch() con await para traer: https://rickandmortyapi.com/api/character\n      //   - Convierta la respuesta a JSON con .json()\n      // Paso 3: Accede a los personajes con data.results y toma los primeros 6 (usa .slice(0, 6))\n      //   - Por cada personaje, crea un div con clase \'character-card\'\n      //   - Dentro del div incluye:\n      //     * Una imagen: <img src="${personaje.image}" alt="${personaje.name}">\n      //     * El nombre: <div class="character-name">${personaje.name}</div>\n      //     * El estado: <div class="character-status">Estado: ${personaje.status}</div>\n      //   - Agrega cada tarjeta a un contenedor con clase \'characters-grid\'\n      // Paso 4: Conecta la funci\xf3n al evento click del bot\xf3n\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'<!DOCTYPE html>\n<html lang="es">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Rick y Morty API - Ejercicio</title>\n  </head>\n  <body>\n    <h1>Personajes de Rick y Morty</h1>\n    <button id="btnCargar">Cargar Personajes</button>\n    <div id="contenedor"></div>\n\n    <script>\n      // Paso 1: Selecciona el bot\xf3n (#btnCargar) y el contenedor (#contenedor)\n      const btnCargar = document.getElementById(\'btnCargar\');\n      const contenedor = document.getElementById(\'contenedor\');\n\n      // Paso 2: Crea una funci\xf3n async\n      async function cargarPersonajes() {\n        // Muestre "Cargando personajes..." en el contenedor\n        contenedor.innerHTML = \'Cargando personajes...\';\n\n        try {\n          // Use fetch() con await para traer: https://rickandmortyapi.com/api/character\n          const respuesta = await fetch(\'https://rickandmortyapi.com/api/character\');\n\n          // Convierta la respuesta a JSON con .json()\n          const data = await respuesta.json();\n\n          // Paso 3: Accede a los personajes con data.results y toma los primeros 6 (usa .slice(0, 6))\n          const personajes = data.results.slice(0, 6);\n\n          // Crea el contenedor con clase \'characters-grid\'\n          let gridHTML = \'<div class="characters-grid">\';\n\n          // Por cada personaje, crea un div con clase \'character-card\'\n          personajes.forEach(personaje => {\n            gridHTML += `\n              <div class="character-card">\n                <img src="${personaje.image}" alt="${personaje.name}">\n                <div class="character-name">${personaje.name}</div>\n                <div class="character-status">Estado: ${personaje.status}</div>\n              </div>\n            `;\n          });\n\n          gridHTML += \'</div>\';\n\n          // Agrega cada tarjeta al contenedor\n          contenedor.innerHTML = gridHTML;\n\n        } catch (error) {\n          console.error(\'Error:\', error);\n          contenedor.innerHTML = \'Error al cargar los personajes\';\n        }\n      }\n\n      // Paso 4: Conecta la funci\xf3n al evento click del bot\xf3n\n      btnCargar.addEventListener(\'click\', cargarPersonajes);\n    <\/script>\n  </body>\n</html>\n'})})]}),"\n",(0,s.jsxs)(a,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 Ver soluci\xf3n compleja"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'<!DOCTYPE html>\n<html lang="es">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Rick y Morty API - Ejercicio</title>\n</head>\n<body>\n   <h1>Personajes de Rick y Morty</h1>\n    <button id="btnCargar">Cargar Personajes</button>\n    <div id="contenedor"></div>\n\n    <script>\n        // Paso 1: Seleccionar el bot\xf3n y el contenedor\n        const btnCargar = document.getElementById(\'btnCargar\');\n        const contenedor = document.getElementById(\'contenedor\');\n\n        // Funci\xf3n para determinar la clase del estado del personaje\n        function getStatusClass(status) {\n            if (status.toLowerCase() === \'alive\') return \'status-alive\';\n            if (status.toLowerCase() === \'dead\') return \'status-dead\';\n            return \'status-unknown\';\n        }\n\n        // Paso 2: Crear funci\xf3n async para cargar personajes\n        async function cargarPersonajes() {\n            // Deshabilitar el bot\xf3n mientras se carga\n            btnCargar.disabled = true;\n            btnCargar.textContent = \'Cargando...\';\n\n            // Mostrar mensaje de carga\n            contenedor.innerHTML = \'<div class="loading">Cargando personajes...</div>\';\n\n            try {\n                // Hacer la petici\xf3n a la API\n                const respuesta = await fetch(\'https://rickandmortyapi.com/api/character\');\n                const data = await respuesta.json();\n\n                // Paso 3: Obtener los primeros 6 personajes\n                const personajes = data.results.slice(0, 6);\n\n                // Crear el grid de personajes\n                let gridHTML = \'<div class="characters-grid">\';\n\n                // Generar HTML para cada personaje\n                personajes.forEach(personaje => {\n                    gridHTML += `\n                        <div class="character-card">\n                            <img class="character-image" src="${personaje.image}" alt="${personaje.name}">\n                            <div class="character-info">\n                                <div class="character-name">${personaje.name}</div>\n                                <div class="character-status">\n                                    <span class="status-icon ${getStatusClass(personaje.status)}"></span>\n                                    Estado: ${personaje.status}\n                                </div>\n                                <div class="character-species">Especie: ${personaje.species}</div>\n                            </div>\n                        </div>\n                    `;\n                });\n\n                gridHTML += \'</div>\';\n\n                // Mostrar los personajes en el contenedor\n                contenedor.innerHTML = gridHTML;\n\n            } catch (error) {\n                // Manejar errores\n                console.error(\'Error al cargar los personajes:\', error);\n                contenedor.innerHTML = `\n                    <div class="loading">\n                        Error al cargar los personajes. Intenta de nuevo.\n                    </div>\n                `;\n            } finally {\n                // Restaurar el bot\xf3n\n                btnCargar.disabled = false;\n                btnCargar.textContent = \'Cargar Personajes\';\n            }\n        }\n\n        // Paso 4: Conectar la funci\xf3n al evento click del bot\xf3n\n        btnCargar.addEventListener(\'click\', cargarPersonajes);\n    <\/script>\n</body>\n</html>\n'})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\xbfDudas? Escribenos a cualquiera de nosotros (a la monitora Sary o al profe Kevin) por WhatsApp, Discord, el grupo o por DM, sin pena. \xa1Estamos para ayudarte!"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var r=a(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);