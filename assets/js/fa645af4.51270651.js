"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2098],{505:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"computacion-3/semana-1/guide-docker","title":"Gu\xeda de configuraci\xf3n de Docker","description":"Instalaci\xf3n y configuraci\xf3n de Docker","source":"@site/docs/computacion-3/semana-1/guide-docker.md","sourceDirName":"computacion-3/semana-1","slug":"/computacion-3/semana-1/guide-docker","permalink":"/docs/computacion-3/semana-1/guide-docker","draft":false,"unlisted":false,"editUrl":"https://github.com/Kelocoes/docukelo-icesi/tree/main/docs/computacion-3/semana-1/guide-docker.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Comandos de Docker","permalink":"/docs/computacion-3/semana-1/docker-commands"},"next":{"title":"S2 - Node JS","permalink":"/docs/category/s2---node-js"}}');var o=a(4848),r=a(8453);const i={sidebar_position:3},s="Gu\xeda de configuraci\xf3n de Docker",d={},l=[{value:"Instalaci\xf3n y configuraci\xf3n de Docker",id:"instalaci\xf3n-y-configuraci\xf3n-de-docker",level:2},{value:"Windows",id:"windows",level:3},{value:"Linux (Ubuntu)",id:"linux-ubuntu",level:3},{value:"Despliegue de una aplicaci\xf3n con Spring Boot y React en Docker",id:"despliegue-de-una-aplicaci\xf3n-con-spring-boot-y-react-en-docker",level:2},{value:"Backend - Creaci\xf3n del Dockerfile",id:"backend---creaci\xf3n-del-dockerfile",level:3},{value:"Frontend - Creaci\xf3n del Dockerfile",id:"frontend---creaci\xf3n-del-dockerfile",level:3},{value:"Construcci\xf3n de las im\xe1genes usando docker-compose",id:"construcci\xf3n-de-las-im\xe1genes-usando-docker-compose",level:3},{value:"Construcci\xf3n y ejecuci\xf3n de los contenedores",id:"construcci\xf3n-y-ejecuci\xf3n-de-los-contenedores",level:3}];function t(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"gu\xeda-de-configuraci\xf3n-de-docker",children:"Gu\xeda de configuraci\xf3n de Docker"})}),"\n",(0,o.jsx)(n.h2,{id:"instalaci\xf3n-y-configuraci\xf3n-de-docker",children:"Instalaci\xf3n y configuraci\xf3n de Docker"}),"\n",(0,o.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Descargar Docker Desktop desde el sitio oficial de Docker."}),"\n"]}),"\n",(0,o.jsx)("img",{src:"/img/docker-install-win.png",alt:"Descargar Docker Desktop",width:"800"}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Ejecutar el instalador y seguir las instrucciones en pantalla."}),"\n",(0,o.jsx)(n.li,{children:"Una vez instalado, abrir Docker Desktop y asegurarse de que est\xe9 en ejecuci\xf3n."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A este punto es posible que necesites habilitar o instalar el WSL (Windows Subsystem for Linux) para que Docker funcione correctamente. Puedes seguir las instrucciones en la ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/desktop/windows/wsl/",children:"documentaci\xf3n oficial de Docker"})," para habilitar WSL."]}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsx)(n.li,{children:"Para verificar que Docker est\xe1 instalado correctamente, puedes abrir el Docker Desktop y ejecutar el siguiente comando en la terminal:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker --version\n"})}),"\n",(0,o.jsx)(n.h3,{id:"linux-ubuntu",children:"Linux (Ubuntu)"}),"\n",(0,o.jsxs)(n.p,{children:["Sigue la gu\xeda oficial de ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/desktop/setup/install/linux/ubuntu",children:"instalaci\xf3n de Docker en Ubuntu"})," para instalar Docker en tu sistema."]}),"\n",(0,o.jsx)(n.h2,{id:"despliegue-de-una-aplicaci\xf3n-con-spring-boot-y-react-en-docker",children:"Despliegue de una aplicaci\xf3n con Spring Boot y React en Docker"}),"\n",(0,o.jsx)(n.p,{children:"Para mantener simple el ejemplo, utilizaremos una aplicaci\xf3n de Spring Boot y React b\xe1sica donde consumiremos una API. A continuaci\xf3n, se describen los pasos para desplegar esta aplicaci\xf3n utilizando Docker."}),"\n",(0,o.jsx)(n.h3,{id:"backend---creaci\xf3n-del-dockerfile",children:"Backend - Creaci\xf3n del Dockerfile"}),"\n",(0,o.jsxs)(n.p,{children:["Primero asumimos que est\xe1s usando maven, aunque realmente puedes usar cualquier herramienta de construcci\xf3n que prefieras. Crea un archivo llamado ",(0,o.jsx)(n.code,{children:"Dockerfile"})," en la ra\xedz de tu proyecto de Spring Boot con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Etapa 1: Build del WAR\nFROM maven:3.8.5-openjdk-17 AS builder\nWORKDIR /app\nCOPY . .\nRUN mvn clean package -DskipTests\n\n# Etapa 2: Deploy del WAR en Tomcat\nFROM tomcat:9-jdk17\nCOPY --from=builder /app/target/*.war /usr/local/tomcat/webapps/ROOT.war\n\nEXPOSE 8080\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Aqu\xed podemos observar algo llamado ",(0,o.jsx)(n.strong,{children:"multi-stage build"}),". Esto nos permite crear una imagen m\xe1s liviana al separar el proceso de construcci\xf3n del de ejecuci\xf3n. En la primera etapa, usamos una imagen de Maven para compilar el proyecto y generar el archivo WAR. En la segunda etapa, usamos una imagen de Tomcat para desplegar el WAR generado."]}),"\n",(0,o.jsx)(n.h3,{id:"frontend---creaci\xf3n-del-dockerfile",children:"Frontend - Creaci\xf3n del Dockerfile"}),"\n",(0,o.jsxs)(n.p,{children:["Crea un archivo llamado ",(0,o.jsx)(n.code,{children:"Dockerfile"})," en la ra\xedz de tu proyecto de React con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Etapa 1: contruccion\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN npm install\nRUN npm run build\n\n# Etapa 2: servir con nginx (proxy reverso)\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nCOPY ./nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD ["nginx", "-g", "daemon off;"]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Ya que estamos proponiendo usar nginx, es necesario crear un archivo de configuraci\xf3n llamado ",(0,o.jsx)(n.code,{children:"nginx.conf"})," en la ra\xedz de tu proyecto de React con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-nginx",children:"server {\n  listen 80;\n  server_name localhost;\n\n  root /usr/share/nginx/html;\n  index index.html;\n\n  location / {\n    try_files $uri /index.html;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Esto configura Nginx para servir tu aplicaci\xf3n React y manejar correctamente las rutas, sino es probable que redirija a una p\xe1gina 404 si intentas acceder a rutas que no existen como archivos est\xe1ticos."}),"\n",(0,o.jsx)(n.h3,{id:"construcci\xf3n-de-las-im\xe1genes-usando-docker-compose",children:"Construcci\xf3n de las im\xe1genes usando docker-compose"}),"\n",(0,o.jsxs)(n.p,{children:["Crea un archivo llamado ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," en la ra\xedz de tu proyecto con el siguiente contenido:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\n  db:\n    image: postgres:14.18\n    container_name: postgres-db\n    environment:\n      - POSTGRES_DB=db-docker-spring-react\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - "5440:5432"\n\n  backend:\n    build:\n      context: ./demo\n      dockerfile: Dockerfile\n    container_name: spring-backend\n    environment:\n      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/db-docker-spring-react\n      SPRING_DATASOURCE_USERNAME: postgres\n      SPRING_DATASOURCE_PASSWORD: postgres\n    depends_on:\n      - db\n    ports:\n      - "8080:8080"\n\n  frontend:\n    build:\n      context: ./my-react-app\n      dockerfile: Dockerfile\n    container_name: react-frontend\n    ports:\n      - "3001:80"\n    depends_on:\n      - backend\n\nvolumes:\n  postgres_data:\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),", se definen tres servicios:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"db"}),": Utiliza la imagen oficial de PostgreSQL y configura las variables de entorno necesarias para crear una base de datos y un usuario."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"backend"}),": Construye la imagen del backend de Spring Boot desde el Dockerfile ubicado en la carpeta ",(0,o.jsx)(n.code,{children:"demo"}),". Configura las variables de entorno necesarias para conectarse a la base de datos PostgreSQL y expone el puerto 8080."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"frontend"}),": Construye la imagen del frontend de React desde el Dockerfile ubicado en la carpeta ",(0,o.jsx)(n.code,{children:"my-react-app"})," y expone el puerto 3000."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"construcci\xf3n-y-ejecuci\xf3n-de-los-contenedores",children:"Construcci\xf3n y ejecuci\xf3n de los contenedores"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Asegurate que Docker y Docker Compose est\xe9n instalados y funcionando correctamente."}),"\n",(0,o.jsxs)(n.li,{children:["Abre una terminal y navega al directorio donde se encuentra tu archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Ejecuta el siguiente comando para construir y ejecutar los contenedores:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker-compose up --build\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Esto construir\xe1 las im\xe1genes de tu aplicaci\xf3n y levantar\xe1 los contenedores definidos en el archivo ",(0,o.jsx)(n.code,{children:"docker-compose.yml"}),"."]}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:["Una vez que los contenedores est\xe9n en ejecuci\xf3n, podr\xe1s acceder a tu aplicaci\xf3n React en ",(0,o.jsx)(n.code,{children:"http://localhost:3000"})," y al backend de Spring Boot en ",(0,o.jsx)(n.code,{children:"http://localhost:8080"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>s});var c=a(6540);const o={},r=c.createContext(o);function i(e){const n=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);